<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- Created with Inkscape (http://www.inkscape.org/) -->

<svg
   xml:space="preserve"
   id="SVGRoot"
   version="1.1"
   viewBox="0 0 1920 1080"
   height="1080"
   width="1920"
   xmlns:xlink="http://www.w3.org/1999/xlink"
   xmlns="http://www.w3.org/2000/svg"
   xmlns:svg="http://www.w3.org/2000/svg"
   xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
   xmlns:cc="http://creativecommons.org/ns#"
   xmlns:dc="http://purl.org/dc/elements/1.1/"><title
     id="title11848">spacetime</title><defs
     id="defs16"><linearGradient
       id="linearGradient1"><stop
         style="stop-color:#fdafb5;stop-opacity:0.98823529;"
         offset="0"
         id="stop2" /><stop
         style="stop-color:#ff62b9;stop-opacity:0.99607843;"
         offset="1"
         id="stop1" /></linearGradient><filter
       style="color-interpolation-filters:sRGB"
       id="filter50691"
       x="-0.010355253"
       y="-0.016631358"
       width="1.0207089"
       height="1.0333431"><feColorMatrix
         values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 -0.21 -0.72 -0.07 1 0 "
         result="result1"
         id="feColorMatrix50659" /><feColorMatrix
         result="result3"
         values="1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 2 -1 "
         id="feColorMatrix50661" /><feColorMatrix
         values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.21 0.72 0.07 0 0 "
         in="SourceGraphic"
         result="result2"
         id="feColorMatrix50663" /><feColorMatrix
         result="result9"
         values="1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 1.5 -0.5 "
         id="feColorMatrix50665" /><feMerge
         result="result11"
         id="feMerge50671"><feMergeNode
           in="result3"
           id="feMergeNode50667" /><feMergeNode
           in="result9"
           id="feMergeNode50669" /></feMerge><feFlood
         flood-opacity="1"
         flood-color="rgb(186,22,91)"
         result="result10"
         id="feFlood50673" /><feComposite
         in2="result11"
         result="result12"
         operator="out"
         id="feComposite50675" /><feFlood
         flood-opacity="1"
         result="result13"
         flood-color="rgb(1,171,171)"
         id="feFlood50677" /><feComposite
         in2="result3"
         result="result14"
         operator="in"
         id="feComposite50679" /><feComposite
         in2="result12"
         result="result17"
         k3="1"
         k2="1"
         operator="arithmetic"
         id="feComposite50681"
         k1="0"
         k4="0" /><feFlood
         flood-opacity="1"
         result="result15"
         flood-color="rgb(255,255,0)"
         id="feFlood50683" /><feComposite
         in2="result9"
         result="result16"
         operator="in"
         id="feComposite50685" /><feComposite
         in2="result17"
         result="result18"
         k3="1"
         k2="1"
         operator="arithmetic"
         id="feComposite50687"
         k1="0"
         k4="0" /><feComposite
         in2="SourceGraphic"
         operator="in"
         id="feComposite50689"
         result="fbSourceGraphic" /><feColorMatrix
         result="fbSourceGraphicAlpha"
         in="fbSourceGraphic"
         values="0 0 0 -1 0 0 0 0 -1 0 0 0 0 -1 0 0 0 0 1 0"
         id="feColorMatrix50863" /><feColorMatrix
         id="feColorMatrix50865"
         type="luminanceToAlpha"
         result="colormatrix1"
         in="fbSourceGraphic" /><feFlood
         id="feFlood50867"
         flood-opacity="0.87451"
         flood-color="rgb(240,222,204)"
         result="flood1" /><feComposite
         in2="colormatrix1"
         id="feComposite50869"
         operator="out"
         result="composite1" /><feFlood
         id="feFlood50871"
         flood-opacity="1"
         flood-color="rgb(250,139,217)"
         result="flood2" /><feComposite
         in2="colormatrix1"
         id="feComposite50873"
         result="composite2"
         operator="in" /><feComposite
         in2="composite1"
         id="feComposite50875"
         in="composite2"
         k2="1"
         k3="1"
         operator="arithmetic"
         result="composite3"
         k1="0"
         k4="0" /><feColorMatrix
         id="feColorMatrix50877"
         in="composite3"
         type="matrix"
         values="2 -1 0 0 0 0 2 -1 0 0 -1 0 2 0 0 0 0 0 1 0 "
         result="colormatrix2" /><feComposite
         in2="composite3"
         id="feComposite50879"
         in="colormatrix2"
         operator="arithmetic"
         k2="0.915888"
         result="composite4"
         k1="0"
         k3="0"
         k4="0" /><feBlend
         in2="composite3"
         id="feBlend50881"
         in="composite4"
         mode="normal"
         result="blend" /><feComposite
         in2="fbSourceGraphic"
         id="feComposite50883"
         operator="in" /></filter><script
       id="mesh_polyfill-9"
       type="text/javascript">
!function(){const t=&quot;http://www.w3.org/2000/svg&quot;,e=&quot;http://www.w3.org/1999/xlink&quot;,s=&quot;http://www.w3.org/1999/xhtml&quot;,r=2;if(document.createElementNS(t,&quot;meshgradient&quot;).x)return;const n=(t,e,s,r)=&gt;{let n=new x(.5*(e.x+s.x),.5*(e.y+s.y)),o=new x(.5*(t.x+e.x),.5*(t.y+e.y)),i=new x(.5*(s.x+r.x),.5*(s.y+r.y)),a=new x(.5*(n.x+o.x),.5*(n.y+o.y)),h=new x(.5*(n.x+i.x),.5*(n.y+i.y)),l=new x(.5*(a.x+h.x),.5*(a.y+h.y));return[[t,o,a,l],[l,h,i,r]]},o=t=&gt;{let e=t[0].distSquared(t[1]),s=t[2].distSquared(t[3]),r=.25*t[0].distSquared(t[2]),n=.25*t[1].distSquared(t[3]),o=e&gt;s?e:s,i=r&gt;n?r:n;return 18*(o&gt;i?o:i)},i=(t,e)=&gt;Math.sqrt(t.distSquared(e)),a=(t,e)=&gt;t.scale(2/3).add(e.scale(1/3)),h=t=&gt;{let e,s,r,n,o,i,a,h=new g;return t.match(/(\w+\(\s*[^)]+\))+/g).forEach(t=&gt;{let l=t.match(/[\w.-]+/g),d=l.shift();switch(d){case&quot;translate&quot;:2===l.length?e=new g(1,0,0,1,l[0],l[1]):(console.error(&quot;mesh.js: translate does not have 2 arguments!&quot;),e=new g(1,0,0,1,0,0)),h=h.append(e);break;case&quot;scale&quot;:1===l.length?s=new g(l[0],0,0,l[0],0,0):2===l.length?s=new g(l[0],0,0,l[1],0,0):(console.error(&quot;mesh.js: scale does not have 1 or 2 arguments!&quot;),s=new g(1,0,0,1,0,0)),h=h.append(s);break;case&quot;rotate&quot;:if(3===l.length&amp;&amp;(e=new g(1,0,0,1,l[1],l[2]),h=h.append(e)),l[0]){r=l[0]*Math.PI/180;let t=Math.cos(r),e=Math.sin(r);Math.abs(t)&lt;1e-16&amp;&amp;(t=0),Math.abs(e)&lt;1e-16&amp;&amp;(e=0),a=new g(t,e,-e,t,0,0),h=h.append(a)}else console.error(&quot;math.js: No argument to rotate transform!&quot;);3===l.length&amp;&amp;(e=new g(1,0,0,1,-l[1],-l[2]),h=h.append(e));break;case&quot;skewX&quot;:l[0]?(r=l[0]*Math.PI/180,n=Math.tan(r),o=new g(1,0,n,1,0,0),h=h.append(o)):console.error(&quot;math.js: No argument to skewX transform!&quot;);break;case&quot;skewY&quot;:l[0]?(r=l[0]*Math.PI/180,n=Math.tan(r),i=new g(1,n,0,1,0,0),h=h.append(i)):console.error(&quot;math.js: No argument to skewY transform!&quot;);break;case&quot;matrix&quot;:6===l.length?h=h.append(new g(...l)):console.error(&quot;math.js: Incorrect number of arguments for matrix!&quot;);break;default:console.error(&quot;mesh.js: Unhandled transform type: &quot;+d)}}),h},l=t=&gt;{let e=[],s=t.split(/[ ,]+/);for(let t=0,r=s.length-1;t&lt;r;t+=2)e.push(new x(parseFloat(s[t]),parseFloat(s[t+1])));return e},d=(t,e)=&gt;{for(let s in e)t.setAttribute(s,e[s])},c=(t,e,s,r,n)=&gt;{let o,i,a=[0,0,0,0];for(let h=0;h&lt;3;++h)e[h]&lt;t[h]&amp;&amp;e[h]&lt;s[h]||t[h]&lt;e[h]&amp;&amp;s[h]&lt;e[h]?a[h]=0:(a[h]=.5*((e[h]-t[h])/r+(s[h]-e[h])/n),o=Math.abs(3*(e[h]-t[h])/r),i=Math.abs(3*(s[h]-e[h])/n),a[h]&gt;o?a[h]=o:a[h]&gt;i&amp;&amp;(a[h]=i));return a},u=[[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0],[-3,3,0,0,-2,-1,0,0,0,0,0,0,0,0,0,0],[2,-2,0,0,1,1,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0],[0,0,0,0,0,0,0,0,-3,3,0,0,-2,-1,0,0],[0,0,0,0,0,0,0,0,2,-2,0,0,1,1,0,0],[-3,0,3,0,0,0,0,0,-2,0,-1,0,0,0,0,0],[0,0,0,0,-3,0,3,0,0,0,0,0,-2,0,-1,0],[9,-9,-9,9,6,3,-6,-3,6,-6,3,-3,4,2,2,1],[-6,6,6,-6,-3,-3,3,3,-4,4,-2,2,-2,-2,-1,-1],[2,0,-2,0,0,0,0,0,1,0,1,0,0,0,0,0],[0,0,0,0,2,0,-2,0,0,0,0,0,1,0,1,0],[-6,6,6,-6,-4,-2,4,2,-3,3,-3,3,-2,-1,-2,-1],[4,-4,-4,4,2,2,-2,-2,2,-2,2,-2,1,1,1,1]],f=t=&gt;{let e=[];for(let s=0;s&lt;16;++s){e[s]=0;for(let r=0;r&lt;16;++r)e[s]+=u[s][r]*t[r]}return e},p=(t,e,s)=&gt;{const r=e*e,n=s*s,o=e*e*e,i=s*s*s;return t[0]+t[1]*e+t[2]*r+t[3]*o+t[4]*s+t[5]*s*e+t[6]*s*r+t[7]*s*o+t[8]*n+t[9]*n*e+t[10]*n*r+t[11]*n*o+t[12]*i+t[13]*i*e+t[14]*i*r+t[15]*i*o},y=t=&gt;{let e=[],s=[],r=[];for(let s=0;s&lt;4;++s)e[s]=[],e[s][0]=n(t[0][s],t[1][s],t[2][s],t[3][s]),e[s][1]=[],e[s][1].push(...n(...e[s][0][0])),e[s][1].push(...n(...e[s][0][1])),e[s][2]=[],e[s][2].push(...n(...e[s][1][0])),e[s][2].push(...n(...e[s][1][1])),e[s][2].push(...n(...e[s][1][2])),e[s][2].push(...n(...e[s][1][3]));for(let t=0;t&lt;8;++t){s[t]=[];for(let r=0;r&lt;4;++r)s[t][r]=[],s[t][r][0]=n(e[0][2][t][r],e[1][2][t][r],e[2][2][t][r],e[3][2][t][r]),s[t][r][1]=[],s[t][r][1].push(...n(...s[t][r][0][0])),s[t][r][1].push(...n(...s[t][r][0][1])),s[t][r][2]=[],s[t][r][2].push(...n(...s[t][r][1][0])),s[t][r][2].push(...n(...s[t][r][1][1])),s[t][r][2].push(...n(...s[t][r][1][2])),s[t][r][2].push(...n(...s[t][r][1][3]))}for(let t=0;t&lt;8;++t){r[t]=[];for(let e=0;e&lt;8;++e)r[t][e]=[],r[t][e][0]=s[t][0][2][e],r[t][e][1]=s[t][1][2][e],r[t][e][2]=s[t][2][2][e],r[t][e][3]=s[t][3][2][e]}return r};class x{constructor(t,e){this.x=t||0,this.y=e||0}toString(){return`(x=${this.x}, y=${this.y})`}clone(){return new x(this.x,this.y)}add(t){return new x(this.x+t.x,this.y+t.y)}scale(t){return void 0===t.x?new x(this.x*t,this.y*t):new x(this.x*t.x,this.y*t.y)}distSquared(t){let e=this.x-t.x,s=this.y-t.y;return e*e+s*s}transform(t){let e=this.x*t.a+this.y*t.c+t.e,s=this.x*t.b+this.y*t.d+t.f;return new x(e,s)}}class g{constructor(t,e,s,r,n,o){void 0===t?(this.a=1,this.b=0,this.c=0,this.d=1,this.e=0,this.f=0):(this.a=t,this.b=e,this.c=s,this.d=r,this.e=n,this.f=o)}toString(){return`affine: ${this.a} ${this.c} ${this.e} \n       ${this.b} ${this.d} ${this.f}`}append(t){t instanceof g||console.error(&quot;mesh.js: argument to Affine.append is not affine!&quot;);let e=this.a*t.a+this.c*t.b,s=this.b*t.a+this.d*t.b,r=this.a*t.c+this.c*t.d,n=this.b*t.c+this.d*t.d,o=this.a*t.e+this.c*t.f+this.e,i=this.b*t.e+this.d*t.f+this.f;return new g(e,s,r,n,o,i)}}class w{constructor(t,e){this.nodes=t,this.colors=e}paintCurve(t,e){if(o(this.nodes)&gt;r){const s=n(...this.nodes);let r=[[],[]],o=[[],[]];for(let t=0;t&lt;4;++t)r[0][t]=this.colors[0][t],r[1][t]=(this.colors[0][t]+this.colors[1][t])/2,o[0][t]=r[1][t],o[1][t]=this.colors[1][t];let i=new w(s[0],r),a=new w(s[1],o);i.paintCurve(t,e),a.paintCurve(t,e)}else{let s=Math.round(this.nodes[0].x);if(s&gt;=0&amp;&amp;s&lt;e){let r=4*(~~this.nodes[0].y*e+s);t[r]=Math.round(this.colors[0][0]),t[r+1]=Math.round(this.colors[0][1]),t[r+2]=Math.round(this.colors[0][2]),t[r+3]=Math.round(this.colors[0][3])}}}}class m{constructor(t,e){this.nodes=t,this.colors=e}split(){let t=[[],[],[],[]],e=[[],[],[],[]],s=[[[],[]],[[],[]]],r=[[[],[]],[[],[]]];for(let s=0;s&lt;4;++s){const r=n(this.nodes[0][s],this.nodes[1][s],this.nodes[2][s],this.nodes[3][s]);t[0][s]=r[0][0],t[1][s]=r[0][1],t[2][s]=r[0][2],t[3][s]=r[0][3],e[0][s]=r[1][0],e[1][s]=r[1][1],e[2][s]=r[1][2],e[3][s]=r[1][3]}for(let t=0;t&lt;4;++t)s[0][0][t]=this.colors[0][0][t],s[0][1][t]=this.colors[0][1][t],s[1][0][t]=(this.colors[0][0][t]+this.colors[1][0][t])/2,s[1][1][t]=(this.colors[0][1][t]+this.colors[1][1][t])/2,r[0][0][t]=s[1][0][t],r[0][1][t]=s[1][1][t],r[1][0][t]=this.colors[1][0][t],r[1][1][t]=this.colors[1][1][t];return[new m(t,s),new m(e,r)]}paint(t,e){let s,n=!1;for(let t=0;t&lt;4;++t)if((s=o([this.nodes[0][t],this.nodes[1][t],this.nodes[2][t],this.nodes[3][t]]))&gt;r){n=!0;break}if(n){let s=this.split();s[0].paint(t,e),s[1].paint(t,e)}else{new w([...this.nodes[0]],[...this.colors[0]]).paintCurve(t,e)}}}class b{constructor(t){this.readMesh(t),this.type=t.getAttribute(&quot;type&quot;)||&quot;bilinear&quot;}readMesh(t){let e=[[]],s=[[]],r=Number(t.getAttribute(&quot;x&quot;)),n=Number(t.getAttribute(&quot;y&quot;));e[0][0]=new x(r,n);let o=t.children;for(let t=0,r=o.length;t&lt;r;++t){e[3*t+1]=[],e[3*t+2]=[],e[3*t+3]=[],s[t+1]=[];let r=o[t].children;for(let n=0,o=r.length;n&lt;o;++n){let o=r[n].children;for(let r=0,i=o.length;r&lt;i;++r){let i=r;0!==t&amp;&amp;++i;let h,d=o[r].getAttribute(&quot;path&quot;),c=&quot;l&quot;;null!=d&amp;&amp;(c=(h=d.match(/\s*([lLcC])\s*(.*)/))[1]);let u=l(h[2]);switch(c){case&quot;l&quot;:0===i?(e[3*t][3*n+3]=u[0].add(e[3*t][3*n]),e[3*t][3*n+1]=a(e[3*t][3*n],e[3*t][3*n+3]),e[3*t][3*n+2]=a(e[3*t][3*n+3],e[3*t][3*n])):1===i?(e[3*t+3][3*n+3]=u[0].add(e[3*t][3*n+3]),e[3*t+1][3*n+3]=a(e[3*t][3*n+3],e[3*t+3][3*n+3]),e[3*t+2][3*n+3]=a(e[3*t+3][3*n+3],e[3*t][3*n+3])):2===i?(0===n&amp;&amp;(e[3*t+3][3*n+0]=u[0].add(e[3*t+3][3*n+3])),e[3*t+3][3*n+1]=a(e[3*t+3][3*n],e[3*t+3][3*n+3]),e[3*t+3][3*n+2]=a(e[3*t+3][3*n+3],e[3*t+3][3*n])):(e[3*t+1][3*n]=a(e[3*t][3*n],e[3*t+3][3*n]),e[3*t+2][3*n]=a(e[3*t+3][3*n],e[3*t][3*n]));break;case&quot;L&quot;:0===i?(e[3*t][3*n+3]=u[0],e[3*t][3*n+1]=a(e[3*t][3*n],e[3*t][3*n+3]),e[3*t][3*n+2]=a(e[3*t][3*n+3],e[3*t][3*n])):1===i?(e[3*t+3][3*n+3]=u[0],e[3*t+1][3*n+3]=a(e[3*t][3*n+3],e[3*t+3][3*n+3]),e[3*t+2][3*n+3]=a(e[3*t+3][3*n+3],e[3*t][3*n+3])):2===i?(0===n&amp;&amp;(e[3*t+3][3*n+0]=u[0]),e[3*t+3][3*n+1]=a(e[3*t+3][3*n],e[3*t+3][3*n+3]),e[3*t+3][3*n+2]=a(e[3*t+3][3*n+3],e[3*t+3][3*n])):(e[3*t+1][3*n]=a(e[3*t][3*n],e[3*t+3][3*n]),e[3*t+2][3*n]=a(e[3*t+3][3*n],e[3*t][3*n]));break;case&quot;c&quot;:0===i?(e[3*t][3*n+1]=u[0].add(e[3*t][3*n]),e[3*t][3*n+2]=u[1].add(e[3*t][3*n]),e[3*t][3*n+3]=u[2].add(e[3*t][3*n])):1===i?(e[3*t+1][3*n+3]=u[0].add(e[3*t][3*n+3]),e[3*t+2][3*n+3]=u[1].add(e[3*t][3*n+3]),e[3*t+3][3*n+3]=u[2].add(e[3*t][3*n+3])):2===i?(e[3*t+3][3*n+2]=u[0].add(e[3*t+3][3*n+3]),e[3*t+3][3*n+1]=u[1].add(e[3*t+3][3*n+3]),0===n&amp;&amp;(e[3*t+3][3*n+0]=u[2].add(e[3*t+3][3*n+3]))):(e[3*t+2][3*n]=u[0].add(e[3*t+3][3*n]),e[3*t+1][3*n]=u[1].add(e[3*t+3][3*n]));break;case&quot;C&quot;:0===i?(e[3*t][3*n+1]=u[0],e[3*t][3*n+2]=u[1],e[3*t][3*n+3]=u[2]):1===i?(e[3*t+1][3*n+3]=u[0],e[3*t+2][3*n+3]=u[1],e[3*t+3][3*n+3]=u[2]):2===i?(e[3*t+3][3*n+2]=u[0],e[3*t+3][3*n+1]=u[1],0===n&amp;&amp;(e[3*t+3][3*n+0]=u[2])):(e[3*t+2][3*n]=u[0],e[3*t+1][3*n]=u[1]);break;default:console.error(&quot;mesh.js: &quot;+c+&quot; invalid path type.&quot;)}if(0===t&amp;&amp;0===n||r&gt;0){let e=window.getComputedStyle(o[r]).stopColor.match(/^rgb\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)$/i),a=window.getComputedStyle(o[r]).stopOpacity,h=255;a&amp;&amp;(h=Math.floor(255*a)),e&amp;&amp;(0===i?(s[t][n]=[],s[t][n][0]=Math.floor(e[1]),s[t][n][1]=Math.floor(e[2]),s[t][n][2]=Math.floor(e[3]),s[t][n][3]=h):1===i?(s[t][n+1]=[],s[t][n+1][0]=Math.floor(e[1]),s[t][n+1][1]=Math.floor(e[2]),s[t][n+1][2]=Math.floor(e[3]),s[t][n+1][3]=h):2===i?(s[t+1][n+1]=[],s[t+1][n+1][0]=Math.floor(e[1]),s[t+1][n+1][1]=Math.floor(e[2]),s[t+1][n+1][2]=Math.floor(e[3]),s[t+1][n+1][3]=h):3===i&amp;&amp;(s[t+1][n]=[],s[t+1][n][0]=Math.floor(e[1]),s[t+1][n][1]=Math.floor(e[2]),s[t+1][n][2]=Math.floor(e[3]),s[t+1][n][3]=h))}}e[3*t+1][3*n+1]=new x,e[3*t+1][3*n+2]=new x,e[3*t+2][3*n+1]=new x,e[3*t+2][3*n+2]=new x,e[3*t+1][3*n+1].x=(-4*e[3*t][3*n].x+6*(e[3*t][3*n+1].x+e[3*t+1][3*n].x)+-2*(e[3*t][3*n+3].x+e[3*t+3][3*n].x)+3*(e[3*t+3][3*n+1].x+e[3*t+1][3*n+3].x)+-1*e[3*t+3][3*n+3].x)/9,e[3*t+1][3*n+2].x=(-4*e[3*t][3*n+3].x+6*(e[3*t][3*n+2].x+e[3*t+1][3*n+3].x)+-2*(e[3*t][3*n].x+e[3*t+3][3*n+3].x)+3*(e[3*t+3][3*n+2].x+e[3*t+1][3*n].x)+-1*e[3*t+3][3*n].x)/9,e[3*t+2][3*n+1].x=(-4*e[3*t+3][3*n].x+6*(e[3*t+3][3*n+1].x+e[3*t+2][3*n].x)+-2*(e[3*t+3][3*n+3].x+e[3*t][3*n].x)+3*(e[3*t][3*n+1].x+e[3*t+2][3*n+3].x)+-1*e[3*t][3*n+3].x)/9,e[3*t+2][3*n+2].x=(-4*e[3*t+3][3*n+3].x+6*(e[3*t+3][3*n+2].x+e[3*t+2][3*n+3].x)+-2*(e[3*t+3][3*n].x+e[3*t][3*n+3].x)+3*(e[3*t][3*n+2].x+e[3*t+2][3*n].x)+-1*e[3*t][3*n].x)/9,e[3*t+1][3*n+1].y=(-4*e[3*t][3*n].y+6*(e[3*t][3*n+1].y+e[3*t+1][3*n].y)+-2*(e[3*t][3*n+3].y+e[3*t+3][3*n].y)+3*(e[3*t+3][3*n+1].y+e[3*t+1][3*n+3].y)+-1*e[3*t+3][3*n+3].y)/9,e[3*t+1][3*n+2].y=(-4*e[3*t][3*n+3].y+6*(e[3*t][3*n+2].y+e[3*t+1][3*n+3].y)+-2*(e[3*t][3*n].y+e[3*t+3][3*n+3].y)+3*(e[3*t+3][3*n+2].y+e[3*t+1][3*n].y)+-1*e[3*t+3][3*n].y)/9,e[3*t+2][3*n+1].y=(-4*e[3*t+3][3*n].y+6*(e[3*t+3][3*n+1].y+e[3*t+2][3*n].y)+-2*(e[3*t+3][3*n+3].y+e[3*t][3*n].y)+3*(e[3*t][3*n+1].y+e[3*t+2][3*n+3].y)+-1*e[3*t][3*n+3].y)/9,e[3*t+2][3*n+2].y=(-4*e[3*t+3][3*n+3].y+6*(e[3*t+3][3*n+2].y+e[3*t+2][3*n+3].y)+-2*(e[3*t+3][3*n].y+e[3*t][3*n+3].y)+3*(e[3*t][3*n+2].y+e[3*t+2][3*n].y)+-1*e[3*t][3*n].y)/9}}this.nodes=e,this.colors=s}paintMesh(t,e){let s=(this.nodes.length-1)/3,r=(this.nodes[0].length-1)/3;if(&quot;bilinear&quot;===this.type||s&lt;2||r&lt;2){let n;for(let o=0;o&lt;s;++o)for(let s=0;s&lt;r;++s){let r=[];for(let t=3*o,e=3*o+4;t&lt;e;++t)r.push(this.nodes[t].slice(3*s,3*s+4));let i=[];i.push(this.colors[o].slice(s,s+2)),i.push(this.colors[o+1].slice(s,s+2)),(n=new m(r,i)).paint(t,e)}}else{let n,o,a,h,l,d,u;const x=s,g=r;s++,r++;let w=new Array(s);for(let t=0;t&lt;s;++t){w[t]=new Array(r);for(let e=0;e&lt;r;++e)w[t][e]=[],w[t][e][0]=this.nodes[3*t][3*e],w[t][e][1]=this.colors[t][e]}for(let t=0;t&lt;s;++t)for(let e=0;e&lt;r;++e)0!==t&amp;&amp;t!==x&amp;&amp;(n=i(w[t-1][e][0],w[t][e][0]),o=i(w[t+1][e][0],w[t][e][0]),w[t][e][2]=c(w[t-1][e][1],w[t][e][1],w[t+1][e][1],n,o)),0!==e&amp;&amp;e!==g&amp;&amp;(n=i(w[t][e-1][0],w[t][e][0]),o=i(w[t][e+1][0],w[t][e][0]),w[t][e][3]=c(w[t][e-1][1],w[t][e][1],w[t][e+1][1],n,o));for(let t=0;t&lt;r;++t){w[0][t][2]=[],w[x][t][2]=[];for(let e=0;e&lt;4;++e)n=i(w[1][t][0],w[0][t][0]),o=i(w[x][t][0],w[x-1][t][0]),w[0][t][2][e]=n&gt;0?2*(w[1][t][1][e]-w[0][t][1][e])/n-w[1][t][2][e]:0,w[x][t][2][e]=o&gt;0?2*(w[x][t][1][e]-w[x-1][t][1][e])/o-w[x-1][t][2][e]:0}for(let t=0;t&lt;s;++t){w[t][0][3]=[],w[t][g][3]=[];for(let e=0;e&lt;4;++e)n=i(w[t][1][0],w[t][0][0]),o=i(w[t][g][0],w[t][g-1][0]),w[t][0][3][e]=n&gt;0?2*(w[t][1][1][e]-w[t][0][1][e])/n-w[t][1][3][e]:0,w[t][g][3][e]=o&gt;0?2*(w[t][g][1][e]-w[t][g-1][1][e])/o-w[t][g-1][3][e]:0}for(let s=0;s&lt;x;++s)for(let r=0;r&lt;g;++r){let n=i(w[s][r][0],w[s+1][r][0]),o=i(w[s][r+1][0],w[s+1][r+1][0]),c=i(w[s][r][0],w[s][r+1][0]),x=i(w[s+1][r][0],w[s+1][r+1][0]),g=[[],[],[],[]];for(let t=0;t&lt;4;++t){(d=[])[0]=w[s][r][1][t],d[1]=w[s+1][r][1][t],d[2]=w[s][r+1][1][t],d[3]=w[s+1][r+1][1][t],d[4]=w[s][r][2][t]*n,d[5]=w[s+1][r][2][t]*n,d[6]=w[s][r+1][2][t]*o,d[7]=w[s+1][r+1][2][t]*o,d[8]=w[s][r][3][t]*c,d[9]=w[s+1][r][3][t]*x,d[10]=w[s][r+1][3][t]*c,d[11]=w[s+1][r+1][3][t]*x,d[12]=0,d[13]=0,d[14]=0,d[15]=0,u=f(d);for(let e=0;e&lt;9;++e){g[t][e]=[];for(let s=0;s&lt;9;++s)g[t][e][s]=p(u,e/8,s/8),g[t][e][s]&gt;255?g[t][e][s]=255:g[t][e][s]&lt;0&amp;&amp;(g[t][e][s]=0)}}h=[];for(let t=3*s,e=3*s+4;t&lt;e;++t)h.push(this.nodes[t].slice(3*r,3*r+4));l=y(h);for(let s=0;s&lt;8;++s)for(let r=0;r&lt;8;++r)(a=new m(l[s][r],[[[g[0][s][r],g[1][s][r],g[2][s][r],g[3][s][r]],[g[0][s][r+1],g[1][s][r+1],g[2][s][r+1],g[3][s][r+1]]],[[g[0][s+1][r],g[1][s+1][r],g[2][s+1][r],g[3][s+1][r]],[g[0][s+1][r+1],g[1][s+1][r+1],g[2][s+1][r+1],g[3][s+1][r+1]]]])).paint(t,e)}}}transform(t){if(t instanceof x)for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].add(t);else if(t instanceof g)for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].transform(t)}scale(t){for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].scale(t)}}document.querySelectorAll(&quot;rect,circle,ellipse,path,text&quot;).forEach((r,n)=&gt;{let o=r.getAttribute(&quot;id&quot;);o||(o=&quot;patchjs_shape&quot;+n,r.setAttribute(&quot;id&quot;,o));const i=r.style.fill.match(/^url\(\s*&quot;?\s*#([^\s&quot;]+)&quot;?\s*\)/),a=r.style.stroke.match(/^url\(\s*&quot;?\s*#([^\s&quot;]+)&quot;?\s*\)/);if(i&amp;&amp;i[1]){const a=document.getElementById(i[1]);if(a&amp;&amp;&quot;meshgradient&quot;===a.nodeName){const i=r.getBBox();let l=document.createElementNS(s,&quot;canvas&quot;);d(l,{width:i.width,height:i.height});const c=l.getContext(&quot;2d&quot;);let u=c.createImageData(i.width,i.height);const f=new b(a);&quot;objectBoundingBox&quot;===a.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;f.scale(new x(i.width,i.height));const p=a.getAttribute(&quot;gradientTransform&quot;);null!=p&amp;&amp;f.transform(h(p)),&quot;userSpaceOnUse&quot;===a.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;f.transform(new x(-i.x,-i.y)),f.paintMesh(u.data,l.width),c.putImageData(u,0,0);const y=document.createElementNS(t,&quot;image&quot;);d(y,{width:i.width,height:i.height,x:i.x,y:i.y});let g=l.toDataURL();y.setAttributeNS(e,&quot;xlink:href&quot;,g),r.parentNode.insertBefore(y,r),r.style.fill=&quot;none&quot;;const w=document.createElementNS(t,&quot;use&quot;);w.setAttributeNS(e,&quot;xlink:href&quot;,&quot;#&quot;+o);const m=&quot;patchjs_clip&quot;+n,M=document.createElementNS(t,&quot;clipPath&quot;);M.setAttribute(&quot;id&quot;,m),M.appendChild(w),r.parentElement.insertBefore(M,r),y.setAttribute(&quot;clip-path&quot;,&quot;url(#&quot;+m+&quot;)&quot;),u=null,l=null,g=null}}if(a&amp;&amp;a[1]){const o=document.getElementById(a[1]);if(o&amp;&amp;&quot;meshgradient&quot;===o.nodeName){const i=parseFloat(r.style.strokeWidth.slice(0,-2))*(parseFloat(r.style.strokeMiterlimit)||parseFloat(r.getAttribute(&quot;stroke-miterlimit&quot;))||1),a=r.getBBox(),l=Math.trunc(a.width+i),c=Math.trunc(a.height+i),u=Math.trunc(a.x-i/2),f=Math.trunc(a.y-i/2);let p=document.createElementNS(s,&quot;canvas&quot;);d(p,{width:l,height:c});const y=p.getContext(&quot;2d&quot;);let g=y.createImageData(l,c);const w=new b(o);&quot;objectBoundingBox&quot;===o.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;w.scale(new x(l,c));const m=o.getAttribute(&quot;gradientTransform&quot;);null!=m&amp;&amp;w.transform(h(m)),&quot;userSpaceOnUse&quot;===o.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;w.transform(new x(-u,-f)),w.paintMesh(g.data,p.width),y.putImageData(g,0,0);const M=document.createElementNS(t,&quot;image&quot;);d(M,{width:l,height:c,x:0,y:0});let S=p.toDataURL();M.setAttributeNS(e,&quot;xlink:href&quot;,S);const k=&quot;pattern_clip&quot;+n,A=document.createElementNS(t,&quot;pattern&quot;);d(A,{id:k,patternUnits:&quot;userSpaceOnUse&quot;,width:l,height:c,x:u,y:f}),A.appendChild(M),o.parentNode.appendChild(A),r.style.stroke=&quot;url(#&quot;+k+&quot;)&quot;,g=null,p=null,S=null}}})}();
</script><script
       id="mesh_polyfill"
       type="text/javascript">
!function(){const t=&quot;http://www.w3.org/2000/svg&quot;,e=&quot;http://www.w3.org/1999/xlink&quot;,s=&quot;http://www.w3.org/1999/xhtml&quot;,r=2;if(document.createElementNS(t,&quot;meshgradient&quot;).x)return;const n=(t,e,s,r)=&gt;{let n=new x(.5*(e.x+s.x),.5*(e.y+s.y)),o=new x(.5*(t.x+e.x),.5*(t.y+e.y)),i=new x(.5*(s.x+r.x),.5*(s.y+r.y)),a=new x(.5*(n.x+o.x),.5*(n.y+o.y)),h=new x(.5*(n.x+i.x),.5*(n.y+i.y)),l=new x(.5*(a.x+h.x),.5*(a.y+h.y));return[[t,o,a,l],[l,h,i,r]]},o=t=&gt;{let e=t[0].distSquared(t[1]),s=t[2].distSquared(t[3]),r=.25*t[0].distSquared(t[2]),n=.25*t[1].distSquared(t[3]),o=e&gt;s?e:s,i=r&gt;n?r:n;return 18*(o&gt;i?o:i)},i=(t,e)=&gt;Math.sqrt(t.distSquared(e)),a=(t,e)=&gt;t.scale(2/3).add(e.scale(1/3)),h=t=&gt;{let e,s,r,n,o,i,a,h=new g;return t.match(/(\w+\(\s*[^)]+\))+/g).forEach(t=&gt;{let l=t.match(/[\w.-]+/g),d=l.shift();switch(d){case&quot;translate&quot;:2===l.length?e=new g(1,0,0,1,l[0],l[1]):(console.error(&quot;mesh.js: translate does not have 2 arguments!&quot;),e=new g(1,0,0,1,0,0)),h=h.append(e);break;case&quot;scale&quot;:1===l.length?s=new g(l[0],0,0,l[0],0,0):2===l.length?s=new g(l[0],0,0,l[1],0,0):(console.error(&quot;mesh.js: scale does not have 1 or 2 arguments!&quot;),s=new g(1,0,0,1,0,0)),h=h.append(s);break;case&quot;rotate&quot;:if(3===l.length&amp;&amp;(e=new g(1,0,0,1,l[1],l[2]),h=h.append(e)),l[0]){r=l[0]*Math.PI/180;let t=Math.cos(r),e=Math.sin(r);Math.abs(t)&lt;1e-16&amp;&amp;(t=0),Math.abs(e)&lt;1e-16&amp;&amp;(e=0),a=new g(t,e,-e,t,0,0),h=h.append(a)}else console.error(&quot;math.js: No argument to rotate transform!&quot;);3===l.length&amp;&amp;(e=new g(1,0,0,1,-l[1],-l[2]),h=h.append(e));break;case&quot;skewX&quot;:l[0]?(r=l[0]*Math.PI/180,n=Math.tan(r),o=new g(1,0,n,1,0,0),h=h.append(o)):console.error(&quot;math.js: No argument to skewX transform!&quot;);break;case&quot;skewY&quot;:l[0]?(r=l[0]*Math.PI/180,n=Math.tan(r),i=new g(1,n,0,1,0,0),h=h.append(i)):console.error(&quot;math.js: No argument to skewY transform!&quot;);break;case&quot;matrix&quot;:6===l.length?h=h.append(new g(...l)):console.error(&quot;math.js: Incorrect number of arguments for matrix!&quot;);break;default:console.error(&quot;mesh.js: Unhandled transform type: &quot;+d)}}),h},l=t=&gt;{let e=[],s=t.split(/[ ,]+/);for(let t=0,r=s.length-1;t&lt;r;t+=2)e.push(new x(parseFloat(s[t]),parseFloat(s[t+1])));return e},d=(t,e)=&gt;{for(let s in e)t.setAttribute(s,e[s])},c=(t,e,s,r,n)=&gt;{let o,i,a=[0,0,0,0];for(let h=0;h&lt;3;++h)e[h]&lt;t[h]&amp;&amp;e[h]&lt;s[h]||t[h]&lt;e[h]&amp;&amp;s[h]&lt;e[h]?a[h]=0:(a[h]=.5*((e[h]-t[h])/r+(s[h]-e[h])/n),o=Math.abs(3*(e[h]-t[h])/r),i=Math.abs(3*(s[h]-e[h])/n),a[h]&gt;o?a[h]=o:a[h]&gt;i&amp;&amp;(a[h]=i));return a},u=[[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0],[-3,3,0,0,-2,-1,0,0,0,0,0,0,0,0,0,0],[2,-2,0,0,1,1,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0],[0,0,0,0,0,0,0,0,-3,3,0,0,-2,-1,0,0],[0,0,0,0,0,0,0,0,2,-2,0,0,1,1,0,0],[-3,0,3,0,0,0,0,0,-2,0,-1,0,0,0,0,0],[0,0,0,0,-3,0,3,0,0,0,0,0,-2,0,-1,0],[9,-9,-9,9,6,3,-6,-3,6,-6,3,-3,4,2,2,1],[-6,6,6,-6,-3,-3,3,3,-4,4,-2,2,-2,-2,-1,-1],[2,0,-2,0,0,0,0,0,1,0,1,0,0,0,0,0],[0,0,0,0,2,0,-2,0,0,0,0,0,1,0,1,0],[-6,6,6,-6,-4,-2,4,2,-3,3,-3,3,-2,-1,-2,-1],[4,-4,-4,4,2,2,-2,-2,2,-2,2,-2,1,1,1,1]],f=t=&gt;{let e=[];for(let s=0;s&lt;16;++s){e[s]=0;for(let r=0;r&lt;16;++r)e[s]+=u[s][r]*t[r]}return e},p=(t,e,s)=&gt;{const r=e*e,n=s*s,o=e*e*e,i=s*s*s;return t[0]+t[1]*e+t[2]*r+t[3]*o+t[4]*s+t[5]*s*e+t[6]*s*r+t[7]*s*o+t[8]*n+t[9]*n*e+t[10]*n*r+t[11]*n*o+t[12]*i+t[13]*i*e+t[14]*i*r+t[15]*i*o},y=t=&gt;{let e=[],s=[],r=[];for(let s=0;s&lt;4;++s)e[s]=[],e[s][0]=n(t[0][s],t[1][s],t[2][s],t[3][s]),e[s][1]=[],e[s][1].push(...n(...e[s][0][0])),e[s][1].push(...n(...e[s][0][1])),e[s][2]=[],e[s][2].push(...n(...e[s][1][0])),e[s][2].push(...n(...e[s][1][1])),e[s][2].push(...n(...e[s][1][2])),e[s][2].push(...n(...e[s][1][3]));for(let t=0;t&lt;8;++t){s[t]=[];for(let r=0;r&lt;4;++r)s[t][r]=[],s[t][r][0]=n(e[0][2][t][r],e[1][2][t][r],e[2][2][t][r],e[3][2][t][r]),s[t][r][1]=[],s[t][r][1].push(...n(...s[t][r][0][0])),s[t][r][1].push(...n(...s[t][r][0][1])),s[t][r][2]=[],s[t][r][2].push(...n(...s[t][r][1][0])),s[t][r][2].push(...n(...s[t][r][1][1])),s[t][r][2].push(...n(...s[t][r][1][2])),s[t][r][2].push(...n(...s[t][r][1][3]))}for(let t=0;t&lt;8;++t){r[t]=[];for(let e=0;e&lt;8;++e)r[t][e]=[],r[t][e][0]=s[t][0][2][e],r[t][e][1]=s[t][1][2][e],r[t][e][2]=s[t][2][2][e],r[t][e][3]=s[t][3][2][e]}return r};class x{constructor(t,e){this.x=t||0,this.y=e||0}toString(){return`(x=${this.x}, y=${this.y})`}clone(){return new x(this.x,this.y)}add(t){return new x(this.x+t.x,this.y+t.y)}scale(t){return void 0===t.x?new x(this.x*t,this.y*t):new x(this.x*t.x,this.y*t.y)}distSquared(t){let e=this.x-t.x,s=this.y-t.y;return e*e+s*s}transform(t){let e=this.x*t.a+this.y*t.c+t.e,s=this.x*t.b+this.y*t.d+t.f;return new x(e,s)}}class g{constructor(t,e,s,r,n,o){void 0===t?(this.a=1,this.b=0,this.c=0,this.d=1,this.e=0,this.f=0):(this.a=t,this.b=e,this.c=s,this.d=r,this.e=n,this.f=o)}toString(){return`affine: ${this.a} ${this.c} ${this.e} \n       ${this.b} ${this.d} ${this.f}`}append(t){t instanceof g||console.error(&quot;mesh.js: argument to Affine.append is not affine!&quot;);let e=this.a*t.a+this.c*t.b,s=this.b*t.a+this.d*t.b,r=this.a*t.c+this.c*t.d,n=this.b*t.c+this.d*t.d,o=this.a*t.e+this.c*t.f+this.e,i=this.b*t.e+this.d*t.f+this.f;return new g(e,s,r,n,o,i)}}class w{constructor(t,e){this.nodes=t,this.colors=e}paintCurve(t,e){if(o(this.nodes)&gt;r){const s=n(...this.nodes);let r=[[],[]],o=[[],[]];for(let t=0;t&lt;4;++t)r[0][t]=this.colors[0][t],r[1][t]=(this.colors[0][t]+this.colors[1][t])/2,o[0][t]=r[1][t],o[1][t]=this.colors[1][t];let i=new w(s[0],r),a=new w(s[1],o);i.paintCurve(t,e),a.paintCurve(t,e)}else{let s=Math.round(this.nodes[0].x);if(s&gt;=0&amp;&amp;s&lt;e){let r=4*(~~this.nodes[0].y*e+s);t[r]=Math.round(this.colors[0][0]),t[r+1]=Math.round(this.colors[0][1]),t[r+2]=Math.round(this.colors[0][2]),t[r+3]=Math.round(this.colors[0][3])}}}}class m{constructor(t,e){this.nodes=t,this.colors=e}split(){let t=[[],[],[],[]],e=[[],[],[],[]],s=[[[],[]],[[],[]]],r=[[[],[]],[[],[]]];for(let s=0;s&lt;4;++s){const r=n(this.nodes[0][s],this.nodes[1][s],this.nodes[2][s],this.nodes[3][s]);t[0][s]=r[0][0],t[1][s]=r[0][1],t[2][s]=r[0][2],t[3][s]=r[0][3],e[0][s]=r[1][0],e[1][s]=r[1][1],e[2][s]=r[1][2],e[3][s]=r[1][3]}for(let t=0;t&lt;4;++t)s[0][0][t]=this.colors[0][0][t],s[0][1][t]=this.colors[0][1][t],s[1][0][t]=(this.colors[0][0][t]+this.colors[1][0][t])/2,s[1][1][t]=(this.colors[0][1][t]+this.colors[1][1][t])/2,r[0][0][t]=s[1][0][t],r[0][1][t]=s[1][1][t],r[1][0][t]=this.colors[1][0][t],r[1][1][t]=this.colors[1][1][t];return[new m(t,s),new m(e,r)]}paint(t,e){let s,n=!1;for(let t=0;t&lt;4;++t)if((s=o([this.nodes[0][t],this.nodes[1][t],this.nodes[2][t],this.nodes[3][t]]))&gt;r){n=!0;break}if(n){let s=this.split();s[0].paint(t,e),s[1].paint(t,e)}else{new w([...this.nodes[0]],[...this.colors[0]]).paintCurve(t,e)}}}class b{constructor(t){this.readMesh(t),this.type=t.getAttribute(&quot;type&quot;)||&quot;bilinear&quot;}readMesh(t){let e=[[]],s=[[]],r=Number(t.getAttribute(&quot;x&quot;)),n=Number(t.getAttribute(&quot;y&quot;));e[0][0]=new x(r,n);let o=t.children;for(let t=0,r=o.length;t&lt;r;++t){e[3*t+1]=[],e[3*t+2]=[],e[3*t+3]=[],s[t+1]=[];let r=o[t].children;for(let n=0,o=r.length;n&lt;o;++n){let o=r[n].children;for(let r=0,i=o.length;r&lt;i;++r){let i=r;0!==t&amp;&amp;++i;let h,d=o[r].getAttribute(&quot;path&quot;),c=&quot;l&quot;;null!=d&amp;&amp;(c=(h=d.match(/\s*([lLcC])\s*(.*)/))[1]);let u=l(h[2]);switch(c){case&quot;l&quot;:0===i?(e[3*t][3*n+3]=u[0].add(e[3*t][3*n]),e[3*t][3*n+1]=a(e[3*t][3*n],e[3*t][3*n+3]),e[3*t][3*n+2]=a(e[3*t][3*n+3],e[3*t][3*n])):1===i?(e[3*t+3][3*n+3]=u[0].add(e[3*t][3*n+3]),e[3*t+1][3*n+3]=a(e[3*t][3*n+3],e[3*t+3][3*n+3]),e[3*t+2][3*n+3]=a(e[3*t+3][3*n+3],e[3*t][3*n+3])):2===i?(0===n&amp;&amp;(e[3*t+3][3*n+0]=u[0].add(e[3*t+3][3*n+3])),e[3*t+3][3*n+1]=a(e[3*t+3][3*n],e[3*t+3][3*n+3]),e[3*t+3][3*n+2]=a(e[3*t+3][3*n+3],e[3*t+3][3*n])):(e[3*t+1][3*n]=a(e[3*t][3*n],e[3*t+3][3*n]),e[3*t+2][3*n]=a(e[3*t+3][3*n],e[3*t][3*n]));break;case&quot;L&quot;:0===i?(e[3*t][3*n+3]=u[0],e[3*t][3*n+1]=a(e[3*t][3*n],e[3*t][3*n+3]),e[3*t][3*n+2]=a(e[3*t][3*n+3],e[3*t][3*n])):1===i?(e[3*t+3][3*n+3]=u[0],e[3*t+1][3*n+3]=a(e[3*t][3*n+3],e[3*t+3][3*n+3]),e[3*t+2][3*n+3]=a(e[3*t+3][3*n+3],e[3*t][3*n+3])):2===i?(0===n&amp;&amp;(e[3*t+3][3*n+0]=u[0]),e[3*t+3][3*n+1]=a(e[3*t+3][3*n],e[3*t+3][3*n+3]),e[3*t+3][3*n+2]=a(e[3*t+3][3*n+3],e[3*t+3][3*n])):(e[3*t+1][3*n]=a(e[3*t][3*n],e[3*t+3][3*n]),e[3*t+2][3*n]=a(e[3*t+3][3*n],e[3*t][3*n]));break;case&quot;c&quot;:0===i?(e[3*t][3*n+1]=u[0].add(e[3*t][3*n]),e[3*t][3*n+2]=u[1].add(e[3*t][3*n]),e[3*t][3*n+3]=u[2].add(e[3*t][3*n])):1===i?(e[3*t+1][3*n+3]=u[0].add(e[3*t][3*n+3]),e[3*t+2][3*n+3]=u[1].add(e[3*t][3*n+3]),e[3*t+3][3*n+3]=u[2].add(e[3*t][3*n+3])):2===i?(e[3*t+3][3*n+2]=u[0].add(e[3*t+3][3*n+3]),e[3*t+3][3*n+1]=u[1].add(e[3*t+3][3*n+3]),0===n&amp;&amp;(e[3*t+3][3*n+0]=u[2].add(e[3*t+3][3*n+3]))):(e[3*t+2][3*n]=u[0].add(e[3*t+3][3*n]),e[3*t+1][3*n]=u[1].add(e[3*t+3][3*n]));break;case&quot;C&quot;:0===i?(e[3*t][3*n+1]=u[0],e[3*t][3*n+2]=u[1],e[3*t][3*n+3]=u[2]):1===i?(e[3*t+1][3*n+3]=u[0],e[3*t+2][3*n+3]=u[1],e[3*t+3][3*n+3]=u[2]):2===i?(e[3*t+3][3*n+2]=u[0],e[3*t+3][3*n+1]=u[1],0===n&amp;&amp;(e[3*t+3][3*n+0]=u[2])):(e[3*t+2][3*n]=u[0],e[3*t+1][3*n]=u[1]);break;default:console.error(&quot;mesh.js: &quot;+c+&quot; invalid path type.&quot;)}if(0===t&amp;&amp;0===n||r&gt;0){let e=window.getComputedStyle(o[r]).stopColor.match(/^rgb\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)$/i),a=window.getComputedStyle(o[r]).stopOpacity,h=255;a&amp;&amp;(h=Math.floor(255*a)),e&amp;&amp;(0===i?(s[t][n]=[],s[t][n][0]=Math.floor(e[1]),s[t][n][1]=Math.floor(e[2]),s[t][n][2]=Math.floor(e[3]),s[t][n][3]=h):1===i?(s[t][n+1]=[],s[t][n+1][0]=Math.floor(e[1]),s[t][n+1][1]=Math.floor(e[2]),s[t][n+1][2]=Math.floor(e[3]),s[t][n+1][3]=h):2===i?(s[t+1][n+1]=[],s[t+1][n+1][0]=Math.floor(e[1]),s[t+1][n+1][1]=Math.floor(e[2]),s[t+1][n+1][2]=Math.floor(e[3]),s[t+1][n+1][3]=h):3===i&amp;&amp;(s[t+1][n]=[],s[t+1][n][0]=Math.floor(e[1]),s[t+1][n][1]=Math.floor(e[2]),s[t+1][n][2]=Math.floor(e[3]),s[t+1][n][3]=h))}}e[3*t+1][3*n+1]=new x,e[3*t+1][3*n+2]=new x,e[3*t+2][3*n+1]=new x,e[3*t+2][3*n+2]=new x,e[3*t+1][3*n+1].x=(-4*e[3*t][3*n].x+6*(e[3*t][3*n+1].x+e[3*t+1][3*n].x)+-2*(e[3*t][3*n+3].x+e[3*t+3][3*n].x)+3*(e[3*t+3][3*n+1].x+e[3*t+1][3*n+3].x)+-1*e[3*t+3][3*n+3].x)/9,e[3*t+1][3*n+2].x=(-4*e[3*t][3*n+3].x+6*(e[3*t][3*n+2].x+e[3*t+1][3*n+3].x)+-2*(e[3*t][3*n].x+e[3*t+3][3*n+3].x)+3*(e[3*t+3][3*n+2].x+e[3*t+1][3*n].x)+-1*e[3*t+3][3*n].x)/9,e[3*t+2][3*n+1].x=(-4*e[3*t+3][3*n].x+6*(e[3*t+3][3*n+1].x+e[3*t+2][3*n].x)+-2*(e[3*t+3][3*n+3].x+e[3*t][3*n].x)+3*(e[3*t][3*n+1].x+e[3*t+2][3*n+3].x)+-1*e[3*t][3*n+3].x)/9,e[3*t+2][3*n+2].x=(-4*e[3*t+3][3*n+3].x+6*(e[3*t+3][3*n+2].x+e[3*t+2][3*n+3].x)+-2*(e[3*t+3][3*n].x+e[3*t][3*n+3].x)+3*(e[3*t][3*n+2].x+e[3*t+2][3*n].x)+-1*e[3*t][3*n].x)/9,e[3*t+1][3*n+1].y=(-4*e[3*t][3*n].y+6*(e[3*t][3*n+1].y+e[3*t+1][3*n].y)+-2*(e[3*t][3*n+3].y+e[3*t+3][3*n].y)+3*(e[3*t+3][3*n+1].y+e[3*t+1][3*n+3].y)+-1*e[3*t+3][3*n+3].y)/9,e[3*t+1][3*n+2].y=(-4*e[3*t][3*n+3].y+6*(e[3*t][3*n+2].y+e[3*t+1][3*n+3].y)+-2*(e[3*t][3*n].y+e[3*t+3][3*n+3].y)+3*(e[3*t+3][3*n+2].y+e[3*t+1][3*n].y)+-1*e[3*t+3][3*n].y)/9,e[3*t+2][3*n+1].y=(-4*e[3*t+3][3*n].y+6*(e[3*t+3][3*n+1].y+e[3*t+2][3*n].y)+-2*(e[3*t+3][3*n+3].y+e[3*t][3*n].y)+3*(e[3*t][3*n+1].y+e[3*t+2][3*n+3].y)+-1*e[3*t][3*n+3].y)/9,e[3*t+2][3*n+2].y=(-4*e[3*t+3][3*n+3].y+6*(e[3*t+3][3*n+2].y+e[3*t+2][3*n+3].y)+-2*(e[3*t+3][3*n].y+e[3*t][3*n+3].y)+3*(e[3*t][3*n+2].y+e[3*t+2][3*n].y)+-1*e[3*t][3*n].y)/9}}this.nodes=e,this.colors=s}paintMesh(t,e){let s=(this.nodes.length-1)/3,r=(this.nodes[0].length-1)/3;if(&quot;bilinear&quot;===this.type||s&lt;2||r&lt;2){let n;for(let o=0;o&lt;s;++o)for(let s=0;s&lt;r;++s){let r=[];for(let t=3*o,e=3*o+4;t&lt;e;++t)r.push(this.nodes[t].slice(3*s,3*s+4));let i=[];i.push(this.colors[o].slice(s,s+2)),i.push(this.colors[o+1].slice(s,s+2)),(n=new m(r,i)).paint(t,e)}}else{let n,o,a,h,l,d,u;const x=s,g=r;s++,r++;let w=new Array(s);for(let t=0;t&lt;s;++t){w[t]=new Array(r);for(let e=0;e&lt;r;++e)w[t][e]=[],w[t][e][0]=this.nodes[3*t][3*e],w[t][e][1]=this.colors[t][e]}for(let t=0;t&lt;s;++t)for(let e=0;e&lt;r;++e)0!==t&amp;&amp;t!==x&amp;&amp;(n=i(w[t-1][e][0],w[t][e][0]),o=i(w[t+1][e][0],w[t][e][0]),w[t][e][2]=c(w[t-1][e][1],w[t][e][1],w[t+1][e][1],n,o)),0!==e&amp;&amp;e!==g&amp;&amp;(n=i(w[t][e-1][0],w[t][e][0]),o=i(w[t][e+1][0],w[t][e][0]),w[t][e][3]=c(w[t][e-1][1],w[t][e][1],w[t][e+1][1],n,o));for(let t=0;t&lt;r;++t){w[0][t][2]=[],w[x][t][2]=[];for(let e=0;e&lt;4;++e)n=i(w[1][t][0],w[0][t][0]),o=i(w[x][t][0],w[x-1][t][0]),w[0][t][2][e]=n&gt;0?2*(w[1][t][1][e]-w[0][t][1][e])/n-w[1][t][2][e]:0,w[x][t][2][e]=o&gt;0?2*(w[x][t][1][e]-w[x-1][t][1][e])/o-w[x-1][t][2][e]:0}for(let t=0;t&lt;s;++t){w[t][0][3]=[],w[t][g][3]=[];for(let e=0;e&lt;4;++e)n=i(w[t][1][0],w[t][0][0]),o=i(w[t][g][0],w[t][g-1][0]),w[t][0][3][e]=n&gt;0?2*(w[t][1][1][e]-w[t][0][1][e])/n-w[t][1][3][e]:0,w[t][g][3][e]=o&gt;0?2*(w[t][g][1][e]-w[t][g-1][1][e])/o-w[t][g-1][3][e]:0}for(let s=0;s&lt;x;++s)for(let r=0;r&lt;g;++r){let n=i(w[s][r][0],w[s+1][r][0]),o=i(w[s][r+1][0],w[s+1][r+1][0]),c=i(w[s][r][0],w[s][r+1][0]),x=i(w[s+1][r][0],w[s+1][r+1][0]),g=[[],[],[],[]];for(let t=0;t&lt;4;++t){(d=[])[0]=w[s][r][1][t],d[1]=w[s+1][r][1][t],d[2]=w[s][r+1][1][t],d[3]=w[s+1][r+1][1][t],d[4]=w[s][r][2][t]*n,d[5]=w[s+1][r][2][t]*n,d[6]=w[s][r+1][2][t]*o,d[7]=w[s+1][r+1][2][t]*o,d[8]=w[s][r][3][t]*c,d[9]=w[s+1][r][3][t]*x,d[10]=w[s][r+1][3][t]*c,d[11]=w[s+1][r+1][3][t]*x,d[12]=0,d[13]=0,d[14]=0,d[15]=0,u=f(d);for(let e=0;e&lt;9;++e){g[t][e]=[];for(let s=0;s&lt;9;++s)g[t][e][s]=p(u,e/8,s/8),g[t][e][s]&gt;255?g[t][e][s]=255:g[t][e][s]&lt;0&amp;&amp;(g[t][e][s]=0)}}h=[];for(let t=3*s,e=3*s+4;t&lt;e;++t)h.push(this.nodes[t].slice(3*r,3*r+4));l=y(h);for(let s=0;s&lt;8;++s)for(let r=0;r&lt;8;++r)(a=new m(l[s][r],[[[g[0][s][r],g[1][s][r],g[2][s][r],g[3][s][r]],[g[0][s][r+1],g[1][s][r+1],g[2][s][r+1],g[3][s][r+1]]],[[g[0][s+1][r],g[1][s+1][r],g[2][s+1][r],g[3][s+1][r]],[g[0][s+1][r+1],g[1][s+1][r+1],g[2][s+1][r+1],g[3][s+1][r+1]]]])).paint(t,e)}}}transform(t){if(t instanceof x)for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].add(t);else if(t instanceof g)for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].transform(t)}scale(t){for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].scale(t)}}document.querySelectorAll(&quot;rect,circle,ellipse,path,text&quot;).forEach((r,n)=&gt;{let o=r.getAttribute(&quot;id&quot;);o||(o=&quot;patchjs_shape&quot;+n,r.setAttribute(&quot;id&quot;,o));const i=r.style.fill.match(/^url\(\s*&quot;?\s*#([^\s&quot;]+)&quot;?\s*\)/),a=r.style.stroke.match(/^url\(\s*&quot;?\s*#([^\s&quot;]+)&quot;?\s*\)/);if(i&amp;&amp;i[1]){const a=document.getElementById(i[1]);if(a&amp;&amp;&quot;meshgradient&quot;===a.nodeName){const i=r.getBBox();let l=document.createElementNS(s,&quot;canvas&quot;);d(l,{width:i.width,height:i.height});const c=l.getContext(&quot;2d&quot;);let u=c.createImageData(i.width,i.height);const f=new b(a);&quot;objectBoundingBox&quot;===a.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;f.scale(new x(i.width,i.height));const p=a.getAttribute(&quot;gradientTransform&quot;);null!=p&amp;&amp;f.transform(h(p)),&quot;userSpaceOnUse&quot;===a.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;f.transform(new x(-i.x,-i.y)),f.paintMesh(u.data,l.width),c.putImageData(u,0,0);const y=document.createElementNS(t,&quot;image&quot;);d(y,{width:i.width,height:i.height,x:i.x,y:i.y});let g=l.toDataURL();y.setAttributeNS(e,&quot;xlink:href&quot;,g),r.parentNode.insertBefore(y,r),r.style.fill=&quot;none&quot;;const w=document.createElementNS(t,&quot;use&quot;);w.setAttributeNS(e,&quot;xlink:href&quot;,&quot;#&quot;+o);const m=&quot;patchjs_clip&quot;+n,M=document.createElementNS(t,&quot;clipPath&quot;);M.setAttribute(&quot;id&quot;,m),M.appendChild(w),r.parentElement.insertBefore(M,r),y.setAttribute(&quot;clip-path&quot;,&quot;url(#&quot;+m+&quot;)&quot;),u=null,l=null,g=null}}if(a&amp;&amp;a[1]){const o=document.getElementById(a[1]);if(o&amp;&amp;&quot;meshgradient&quot;===o.nodeName){const i=parseFloat(r.style.strokeWidth.slice(0,-2))*(parseFloat(r.style.strokeMiterlimit)||parseFloat(r.getAttribute(&quot;stroke-miterlimit&quot;))||1),a=r.getBBox(),l=Math.trunc(a.width+i),c=Math.trunc(a.height+i),u=Math.trunc(a.x-i/2),f=Math.trunc(a.y-i/2);let p=document.createElementNS(s,&quot;canvas&quot;);d(p,{width:l,height:c});const y=p.getContext(&quot;2d&quot;);let g=y.createImageData(l,c);const w=new b(o);&quot;objectBoundingBox&quot;===o.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;w.scale(new x(l,c));const m=o.getAttribute(&quot;gradientTransform&quot;);null!=m&amp;&amp;w.transform(h(m)),&quot;userSpaceOnUse&quot;===o.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;w.transform(new x(-u,-f)),w.paintMesh(g.data,p.width),y.putImageData(g,0,0);const M=document.createElementNS(t,&quot;image&quot;);d(M,{width:l,height:c,x:0,y:0});let S=p.toDataURL();M.setAttributeNS(e,&quot;xlink:href&quot;,S);const k=&quot;pattern_clip&quot;+n,A=document.createElementNS(t,&quot;pattern&quot;);d(A,{id:k,patternUnits:&quot;userSpaceOnUse&quot;,width:l,height:c,x:u,y:f}),A.appendChild(M),o.parentNode.appendChild(A),r.style.stroke=&quot;url(#&quot;+k+&quot;)&quot;,g=null,p=null,S=null}}})}();
</script><script
       id="mesh_polyfill-97"
       type="text/javascript">
!function(){const t=&quot;http://www.w3.org/2000/svg&quot;,e=&quot;http://www.w3.org/1999/xlink&quot;,s=&quot;http://www.w3.org/1999/xhtml&quot;,r=2;if(document.createElementNS(t,&quot;meshgradient&quot;).x)return;const n=(t,e,s,r)=&gt;{let n=new x(.5*(e.x+s.x),.5*(e.y+s.y)),o=new x(.5*(t.x+e.x),.5*(t.y+e.y)),i=new x(.5*(s.x+r.x),.5*(s.y+r.y)),a=new x(.5*(n.x+o.x),.5*(n.y+o.y)),h=new x(.5*(n.x+i.x),.5*(n.y+i.y)),l=new x(.5*(a.x+h.x),.5*(a.y+h.y));return[[t,o,a,l],[l,h,i,r]]},o=t=&gt;{let e=t[0].distSquared(t[1]),s=t[2].distSquared(t[3]),r=.25*t[0].distSquared(t[2]),n=.25*t[1].distSquared(t[3]),o=e&gt;s?e:s,i=r&gt;n?r:n;return 18*(o&gt;i?o:i)},i=(t,e)=&gt;Math.sqrt(t.distSquared(e)),a=(t,e)=&gt;t.scale(2/3).add(e.scale(1/3)),h=t=&gt;{let e,s,r,n,o,i,a,h=new g;return t.match(/(\w+\(\s*[^)]+\))+/g).forEach(t=&gt;{let l=t.match(/[\w.-]+/g),d=l.shift();switch(d){case&quot;translate&quot;:2===l.length?e=new g(1,0,0,1,l[0],l[1]):(console.error(&quot;mesh.js: translate does not have 2 arguments!&quot;),e=new g(1,0,0,1,0,0)),h=h.append(e);break;case&quot;scale&quot;:1===l.length?s=new g(l[0],0,0,l[0],0,0):2===l.length?s=new g(l[0],0,0,l[1],0,0):(console.error(&quot;mesh.js: scale does not have 1 or 2 arguments!&quot;),s=new g(1,0,0,1,0,0)),h=h.append(s);break;case&quot;rotate&quot;:if(3===l.length&amp;&amp;(e=new g(1,0,0,1,l[1],l[2]),h=h.append(e)),l[0]){r=l[0]*Math.PI/180;let t=Math.cos(r),e=Math.sin(r);Math.abs(t)&lt;1e-16&amp;&amp;(t=0),Math.abs(e)&lt;1e-16&amp;&amp;(e=0),a=new g(t,e,-e,t,0,0),h=h.append(a)}else console.error(&quot;math.js: No argument to rotate transform!&quot;);3===l.length&amp;&amp;(e=new g(1,0,0,1,-l[1],-l[2]),h=h.append(e));break;case&quot;skewX&quot;:l[0]?(r=l[0]*Math.PI/180,n=Math.tan(r),o=new g(1,0,n,1,0,0),h=h.append(o)):console.error(&quot;math.js: No argument to skewX transform!&quot;);break;case&quot;skewY&quot;:l[0]?(r=l[0]*Math.PI/180,n=Math.tan(r),i=new g(1,n,0,1,0,0),h=h.append(i)):console.error(&quot;math.js: No argument to skewY transform!&quot;);break;case&quot;matrix&quot;:6===l.length?h=h.append(new g(...l)):console.error(&quot;math.js: Incorrect number of arguments for matrix!&quot;);break;default:console.error(&quot;mesh.js: Unhandled transform type: &quot;+d)}}),h},l=t=&gt;{let e=[],s=t.split(/[ ,]+/);for(let t=0,r=s.length-1;t&lt;r;t+=2)e.push(new x(parseFloat(s[t]),parseFloat(s[t+1])));return e},d=(t,e)=&gt;{for(let s in e)t.setAttribute(s,e[s])},c=(t,e,s,r,n)=&gt;{let o,i,a=[0,0,0,0];for(let h=0;h&lt;3;++h)e[h]&lt;t[h]&amp;&amp;e[h]&lt;s[h]||t[h]&lt;e[h]&amp;&amp;s[h]&lt;e[h]?a[h]=0:(a[h]=.5*((e[h]-t[h])/r+(s[h]-e[h])/n),o=Math.abs(3*(e[h]-t[h])/r),i=Math.abs(3*(s[h]-e[h])/n),a[h]&gt;o?a[h]=o:a[h]&gt;i&amp;&amp;(a[h]=i));return a},u=[[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0],[-3,3,0,0,-2,-1,0,0,0,0,0,0,0,0,0,0],[2,-2,0,0,1,1,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0],[0,0,0,0,0,0,0,0,-3,3,0,0,-2,-1,0,0],[0,0,0,0,0,0,0,0,2,-2,0,0,1,1,0,0],[-3,0,3,0,0,0,0,0,-2,0,-1,0,0,0,0,0],[0,0,0,0,-3,0,3,0,0,0,0,0,-2,0,-1,0],[9,-9,-9,9,6,3,-6,-3,6,-6,3,-3,4,2,2,1],[-6,6,6,-6,-3,-3,3,3,-4,4,-2,2,-2,-2,-1,-1],[2,0,-2,0,0,0,0,0,1,0,1,0,0,0,0,0],[0,0,0,0,2,0,-2,0,0,0,0,0,1,0,1,0],[-6,6,6,-6,-4,-2,4,2,-3,3,-3,3,-2,-1,-2,-1],[4,-4,-4,4,2,2,-2,-2,2,-2,2,-2,1,1,1,1]],f=t=&gt;{let e=[];for(let s=0;s&lt;16;++s){e[s]=0;for(let r=0;r&lt;16;++r)e[s]+=u[s][r]*t[r]}return e},p=(t,e,s)=&gt;{const r=e*e,n=s*s,o=e*e*e,i=s*s*s;return t[0]+t[1]*e+t[2]*r+t[3]*o+t[4]*s+t[5]*s*e+t[6]*s*r+t[7]*s*o+t[8]*n+t[9]*n*e+t[10]*n*r+t[11]*n*o+t[12]*i+t[13]*i*e+t[14]*i*r+t[15]*i*o},y=t=&gt;{let e=[],s=[],r=[];for(let s=0;s&lt;4;++s)e[s]=[],e[s][0]=n(t[0][s],t[1][s],t[2][s],t[3][s]),e[s][1]=[],e[s][1].push(...n(...e[s][0][0])),e[s][1].push(...n(...e[s][0][1])),e[s][2]=[],e[s][2].push(...n(...e[s][1][0])),e[s][2].push(...n(...e[s][1][1])),e[s][2].push(...n(...e[s][1][2])),e[s][2].push(...n(...e[s][1][3]));for(let t=0;t&lt;8;++t){s[t]=[];for(let r=0;r&lt;4;++r)s[t][r]=[],s[t][r][0]=n(e[0][2][t][r],e[1][2][t][r],e[2][2][t][r],e[3][2][t][r]),s[t][r][1]=[],s[t][r][1].push(...n(...s[t][r][0][0])),s[t][r][1].push(...n(...s[t][r][0][1])),s[t][r][2]=[],s[t][r][2].push(...n(...s[t][r][1][0])),s[t][r][2].push(...n(...s[t][r][1][1])),s[t][r][2].push(...n(...s[t][r][1][2])),s[t][r][2].push(...n(...s[t][r][1][3]))}for(let t=0;t&lt;8;++t){r[t]=[];for(let e=0;e&lt;8;++e)r[t][e]=[],r[t][e][0]=s[t][0][2][e],r[t][e][1]=s[t][1][2][e],r[t][e][2]=s[t][2][2][e],r[t][e][3]=s[t][3][2][e]}return r};class x{constructor(t,e){this.x=t||0,this.y=e||0}toString(){return`(x=${this.x}, y=${this.y})`}clone(){return new x(this.x,this.y)}add(t){return new x(this.x+t.x,this.y+t.y)}scale(t){return void 0===t.x?new x(this.x*t,this.y*t):new x(this.x*t.x,this.y*t.y)}distSquared(t){let e=this.x-t.x,s=this.y-t.y;return e*e+s*s}transform(t){let e=this.x*t.a+this.y*t.c+t.e,s=this.x*t.b+this.y*t.d+t.f;return new x(e,s)}}class g{constructor(t,e,s,r,n,o){void 0===t?(this.a=1,this.b=0,this.c=0,this.d=1,this.e=0,this.f=0):(this.a=t,this.b=e,this.c=s,this.d=r,this.e=n,this.f=o)}toString(){return`affine: ${this.a} ${this.c} ${this.e} \n       ${this.b} ${this.d} ${this.f}`}append(t){t instanceof g||console.error(&quot;mesh.js: argument to Affine.append is not affine!&quot;);let e=this.a*t.a+this.c*t.b,s=this.b*t.a+this.d*t.b,r=this.a*t.c+this.c*t.d,n=this.b*t.c+this.d*t.d,o=this.a*t.e+this.c*t.f+this.e,i=this.b*t.e+this.d*t.f+this.f;return new g(e,s,r,n,o,i)}}class w{constructor(t,e){this.nodes=t,this.colors=e}paintCurve(t,e){if(o(this.nodes)&gt;r){const s=n(...this.nodes);let r=[[],[]],o=[[],[]];for(let t=0;t&lt;4;++t)r[0][t]=this.colors[0][t],r[1][t]=(this.colors[0][t]+this.colors[1][t])/2,o[0][t]=r[1][t],o[1][t]=this.colors[1][t];let i=new w(s[0],r),a=new w(s[1],o);i.paintCurve(t,e),a.paintCurve(t,e)}else{let s=Math.round(this.nodes[0].x);if(s&gt;=0&amp;&amp;s&lt;e){let r=4*(~~this.nodes[0].y*e+s);t[r]=Math.round(this.colors[0][0]),t[r+1]=Math.round(this.colors[0][1]),t[r+2]=Math.round(this.colors[0][2]),t[r+3]=Math.round(this.colors[0][3])}}}}class m{constructor(t,e){this.nodes=t,this.colors=e}split(){let t=[[],[],[],[]],e=[[],[],[],[]],s=[[[],[]],[[],[]]],r=[[[],[]],[[],[]]];for(let s=0;s&lt;4;++s){const r=n(this.nodes[0][s],this.nodes[1][s],this.nodes[2][s],this.nodes[3][s]);t[0][s]=r[0][0],t[1][s]=r[0][1],t[2][s]=r[0][2],t[3][s]=r[0][3],e[0][s]=r[1][0],e[1][s]=r[1][1],e[2][s]=r[1][2],e[3][s]=r[1][3]}for(let t=0;t&lt;4;++t)s[0][0][t]=this.colors[0][0][t],s[0][1][t]=this.colors[0][1][t],s[1][0][t]=(this.colors[0][0][t]+this.colors[1][0][t])/2,s[1][1][t]=(this.colors[0][1][t]+this.colors[1][1][t])/2,r[0][0][t]=s[1][0][t],r[0][1][t]=s[1][1][t],r[1][0][t]=this.colors[1][0][t],r[1][1][t]=this.colors[1][1][t];return[new m(t,s),new m(e,r)]}paint(t,e){let s,n=!1;for(let t=0;t&lt;4;++t)if((s=o([this.nodes[0][t],this.nodes[1][t],this.nodes[2][t],this.nodes[3][t]]))&gt;r){n=!0;break}if(n){let s=this.split();s[0].paint(t,e),s[1].paint(t,e)}else{new w([...this.nodes[0]],[...this.colors[0]]).paintCurve(t,e)}}}class b{constructor(t){this.readMesh(t),this.type=t.getAttribute(&quot;type&quot;)||&quot;bilinear&quot;}readMesh(t){let e=[[]],s=[[]],r=Number(t.getAttribute(&quot;x&quot;)),n=Number(t.getAttribute(&quot;y&quot;));e[0][0]=new x(r,n);let o=t.children;for(let t=0,r=o.length;t&lt;r;++t){e[3*t+1]=[],e[3*t+2]=[],e[3*t+3]=[],s[t+1]=[];let r=o[t].children;for(let n=0,o=r.length;n&lt;o;++n){let o=r[n].children;for(let r=0,i=o.length;r&lt;i;++r){let i=r;0!==t&amp;&amp;++i;let h,d=o[r].getAttribute(&quot;path&quot;),c=&quot;l&quot;;null!=d&amp;&amp;(c=(h=d.match(/\s*([lLcC])\s*(.*)/))[1]);let u=l(h[2]);switch(c){case&quot;l&quot;:0===i?(e[3*t][3*n+3]=u[0].add(e[3*t][3*n]),e[3*t][3*n+1]=a(e[3*t][3*n],e[3*t][3*n+3]),e[3*t][3*n+2]=a(e[3*t][3*n+3],e[3*t][3*n])):1===i?(e[3*t+3][3*n+3]=u[0].add(e[3*t][3*n+3]),e[3*t+1][3*n+3]=a(e[3*t][3*n+3],e[3*t+3][3*n+3]),e[3*t+2][3*n+3]=a(e[3*t+3][3*n+3],e[3*t][3*n+3])):2===i?(0===n&amp;&amp;(e[3*t+3][3*n+0]=u[0].add(e[3*t+3][3*n+3])),e[3*t+3][3*n+1]=a(e[3*t+3][3*n],e[3*t+3][3*n+3]),e[3*t+3][3*n+2]=a(e[3*t+3][3*n+3],e[3*t+3][3*n])):(e[3*t+1][3*n]=a(e[3*t][3*n],e[3*t+3][3*n]),e[3*t+2][3*n]=a(e[3*t+3][3*n],e[3*t][3*n]));break;case&quot;L&quot;:0===i?(e[3*t][3*n+3]=u[0],e[3*t][3*n+1]=a(e[3*t][3*n],e[3*t][3*n+3]),e[3*t][3*n+2]=a(e[3*t][3*n+3],e[3*t][3*n])):1===i?(e[3*t+3][3*n+3]=u[0],e[3*t+1][3*n+3]=a(e[3*t][3*n+3],e[3*t+3][3*n+3]),e[3*t+2][3*n+3]=a(e[3*t+3][3*n+3],e[3*t][3*n+3])):2===i?(0===n&amp;&amp;(e[3*t+3][3*n+0]=u[0]),e[3*t+3][3*n+1]=a(e[3*t+3][3*n],e[3*t+3][3*n+3]),e[3*t+3][3*n+2]=a(e[3*t+3][3*n+3],e[3*t+3][3*n])):(e[3*t+1][3*n]=a(e[3*t][3*n],e[3*t+3][3*n]),e[3*t+2][3*n]=a(e[3*t+3][3*n],e[3*t][3*n]));break;case&quot;c&quot;:0===i?(e[3*t][3*n+1]=u[0].add(e[3*t][3*n]),e[3*t][3*n+2]=u[1].add(e[3*t][3*n]),e[3*t][3*n+3]=u[2].add(e[3*t][3*n])):1===i?(e[3*t+1][3*n+3]=u[0].add(e[3*t][3*n+3]),e[3*t+2][3*n+3]=u[1].add(e[3*t][3*n+3]),e[3*t+3][3*n+3]=u[2].add(e[3*t][3*n+3])):2===i?(e[3*t+3][3*n+2]=u[0].add(e[3*t+3][3*n+3]),e[3*t+3][3*n+1]=u[1].add(e[3*t+3][3*n+3]),0===n&amp;&amp;(e[3*t+3][3*n+0]=u[2].add(e[3*t+3][3*n+3]))):(e[3*t+2][3*n]=u[0].add(e[3*t+3][3*n]),e[3*t+1][3*n]=u[1].add(e[3*t+3][3*n]));break;case&quot;C&quot;:0===i?(e[3*t][3*n+1]=u[0],e[3*t][3*n+2]=u[1],e[3*t][3*n+3]=u[2]):1===i?(e[3*t+1][3*n+3]=u[0],e[3*t+2][3*n+3]=u[1],e[3*t+3][3*n+3]=u[2]):2===i?(e[3*t+3][3*n+2]=u[0],e[3*t+3][3*n+1]=u[1],0===n&amp;&amp;(e[3*t+3][3*n+0]=u[2])):(e[3*t+2][3*n]=u[0],e[3*t+1][3*n]=u[1]);break;default:console.error(&quot;mesh.js: &quot;+c+&quot; invalid path type.&quot;)}if(0===t&amp;&amp;0===n||r&gt;0){let e=window.getComputedStyle(o[r]).stopColor.match(/^rgb\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)$/i),a=window.getComputedStyle(o[r]).stopOpacity,h=255;a&amp;&amp;(h=Math.floor(255*a)),e&amp;&amp;(0===i?(s[t][n]=[],s[t][n][0]=Math.floor(e[1]),s[t][n][1]=Math.floor(e[2]),s[t][n][2]=Math.floor(e[3]),s[t][n][3]=h):1===i?(s[t][n+1]=[],s[t][n+1][0]=Math.floor(e[1]),s[t][n+1][1]=Math.floor(e[2]),s[t][n+1][2]=Math.floor(e[3]),s[t][n+1][3]=h):2===i?(s[t+1][n+1]=[],s[t+1][n+1][0]=Math.floor(e[1]),s[t+1][n+1][1]=Math.floor(e[2]),s[t+1][n+1][2]=Math.floor(e[3]),s[t+1][n+1][3]=h):3===i&amp;&amp;(s[t+1][n]=[],s[t+1][n][0]=Math.floor(e[1]),s[t+1][n][1]=Math.floor(e[2]),s[t+1][n][2]=Math.floor(e[3]),s[t+1][n][3]=h))}}e[3*t+1][3*n+1]=new x,e[3*t+1][3*n+2]=new x,e[3*t+2][3*n+1]=new x,e[3*t+2][3*n+2]=new x,e[3*t+1][3*n+1].x=(-4*e[3*t][3*n].x+6*(e[3*t][3*n+1].x+e[3*t+1][3*n].x)+-2*(e[3*t][3*n+3].x+e[3*t+3][3*n].x)+3*(e[3*t+3][3*n+1].x+e[3*t+1][3*n+3].x)+-1*e[3*t+3][3*n+3].x)/9,e[3*t+1][3*n+2].x=(-4*e[3*t][3*n+3].x+6*(e[3*t][3*n+2].x+e[3*t+1][3*n+3].x)+-2*(e[3*t][3*n].x+e[3*t+3][3*n+3].x)+3*(e[3*t+3][3*n+2].x+e[3*t+1][3*n].x)+-1*e[3*t+3][3*n].x)/9,e[3*t+2][3*n+1].x=(-4*e[3*t+3][3*n].x+6*(e[3*t+3][3*n+1].x+e[3*t+2][3*n].x)+-2*(e[3*t+3][3*n+3].x+e[3*t][3*n].x)+3*(e[3*t][3*n+1].x+e[3*t+2][3*n+3].x)+-1*e[3*t][3*n+3].x)/9,e[3*t+2][3*n+2].x=(-4*e[3*t+3][3*n+3].x+6*(e[3*t+3][3*n+2].x+e[3*t+2][3*n+3].x)+-2*(e[3*t+3][3*n].x+e[3*t][3*n+3].x)+3*(e[3*t][3*n+2].x+e[3*t+2][3*n].x)+-1*e[3*t][3*n].x)/9,e[3*t+1][3*n+1].y=(-4*e[3*t][3*n].y+6*(e[3*t][3*n+1].y+e[3*t+1][3*n].y)+-2*(e[3*t][3*n+3].y+e[3*t+3][3*n].y)+3*(e[3*t+3][3*n+1].y+e[3*t+1][3*n+3].y)+-1*e[3*t+3][3*n+3].y)/9,e[3*t+1][3*n+2].y=(-4*e[3*t][3*n+3].y+6*(e[3*t][3*n+2].y+e[3*t+1][3*n+3].y)+-2*(e[3*t][3*n].y+e[3*t+3][3*n+3].y)+3*(e[3*t+3][3*n+2].y+e[3*t+1][3*n].y)+-1*e[3*t+3][3*n].y)/9,e[3*t+2][3*n+1].y=(-4*e[3*t+3][3*n].y+6*(e[3*t+3][3*n+1].y+e[3*t+2][3*n].y)+-2*(e[3*t+3][3*n+3].y+e[3*t][3*n].y)+3*(e[3*t][3*n+1].y+e[3*t+2][3*n+3].y)+-1*e[3*t][3*n+3].y)/9,e[3*t+2][3*n+2].y=(-4*e[3*t+3][3*n+3].y+6*(e[3*t+3][3*n+2].y+e[3*t+2][3*n+3].y)+-2*(e[3*t+3][3*n].y+e[3*t][3*n+3].y)+3*(e[3*t][3*n+2].y+e[3*t+2][3*n].y)+-1*e[3*t][3*n].y)/9}}this.nodes=e,this.colors=s}paintMesh(t,e){let s=(this.nodes.length-1)/3,r=(this.nodes[0].length-1)/3;if(&quot;bilinear&quot;===this.type||s&lt;2||r&lt;2){let n;for(let o=0;o&lt;s;++o)for(let s=0;s&lt;r;++s){let r=[];for(let t=3*o,e=3*o+4;t&lt;e;++t)r.push(this.nodes[t].slice(3*s,3*s+4));let i=[];i.push(this.colors[o].slice(s,s+2)),i.push(this.colors[o+1].slice(s,s+2)),(n=new m(r,i)).paint(t,e)}}else{let n,o,a,h,l,d,u;const x=s,g=r;s++,r++;let w=new Array(s);for(let t=0;t&lt;s;++t){w[t]=new Array(r);for(let e=0;e&lt;r;++e)w[t][e]=[],w[t][e][0]=this.nodes[3*t][3*e],w[t][e][1]=this.colors[t][e]}for(let t=0;t&lt;s;++t)for(let e=0;e&lt;r;++e)0!==t&amp;&amp;t!==x&amp;&amp;(n=i(w[t-1][e][0],w[t][e][0]),o=i(w[t+1][e][0],w[t][e][0]),w[t][e][2]=c(w[t-1][e][1],w[t][e][1],w[t+1][e][1],n,o)),0!==e&amp;&amp;e!==g&amp;&amp;(n=i(w[t][e-1][0],w[t][e][0]),o=i(w[t][e+1][0],w[t][e][0]),w[t][e][3]=c(w[t][e-1][1],w[t][e][1],w[t][e+1][1],n,o));for(let t=0;t&lt;r;++t){w[0][t][2]=[],w[x][t][2]=[];for(let e=0;e&lt;4;++e)n=i(w[1][t][0],w[0][t][0]),o=i(w[x][t][0],w[x-1][t][0]),w[0][t][2][e]=n&gt;0?2*(w[1][t][1][e]-w[0][t][1][e])/n-w[1][t][2][e]:0,w[x][t][2][e]=o&gt;0?2*(w[x][t][1][e]-w[x-1][t][1][e])/o-w[x-1][t][2][e]:0}for(let t=0;t&lt;s;++t){w[t][0][3]=[],w[t][g][3]=[];for(let e=0;e&lt;4;++e)n=i(w[t][1][0],w[t][0][0]),o=i(w[t][g][0],w[t][g-1][0]),w[t][0][3][e]=n&gt;0?2*(w[t][1][1][e]-w[t][0][1][e])/n-w[t][1][3][e]:0,w[t][g][3][e]=o&gt;0?2*(w[t][g][1][e]-w[t][g-1][1][e])/o-w[t][g-1][3][e]:0}for(let s=0;s&lt;x;++s)for(let r=0;r&lt;g;++r){let n=i(w[s][r][0],w[s+1][r][0]),o=i(w[s][r+1][0],w[s+1][r+1][0]),c=i(w[s][r][0],w[s][r+1][0]),x=i(w[s+1][r][0],w[s+1][r+1][0]),g=[[],[],[],[]];for(let t=0;t&lt;4;++t){(d=[])[0]=w[s][r][1][t],d[1]=w[s+1][r][1][t],d[2]=w[s][r+1][1][t],d[3]=w[s+1][r+1][1][t],d[4]=w[s][r][2][t]*n,d[5]=w[s+1][r][2][t]*n,d[6]=w[s][r+1][2][t]*o,d[7]=w[s+1][r+1][2][t]*o,d[8]=w[s][r][3][t]*c,d[9]=w[s+1][r][3][t]*x,d[10]=w[s][r+1][3][t]*c,d[11]=w[s+1][r+1][3][t]*x,d[12]=0,d[13]=0,d[14]=0,d[15]=0,u=f(d);for(let e=0;e&lt;9;++e){g[t][e]=[];for(let s=0;s&lt;9;++s)g[t][e][s]=p(u,e/8,s/8),g[t][e][s]&gt;255?g[t][e][s]=255:g[t][e][s]&lt;0&amp;&amp;(g[t][e][s]=0)}}h=[];for(let t=3*s,e=3*s+4;t&lt;e;++t)h.push(this.nodes[t].slice(3*r,3*r+4));l=y(h);for(let s=0;s&lt;8;++s)for(let r=0;r&lt;8;++r)(a=new m(l[s][r],[[[g[0][s][r],g[1][s][r],g[2][s][r],g[3][s][r]],[g[0][s][r+1],g[1][s][r+1],g[2][s][r+1],g[3][s][r+1]]],[[g[0][s+1][r],g[1][s+1][r],g[2][s+1][r],g[3][s+1][r]],[g[0][s+1][r+1],g[1][s+1][r+1],g[2][s+1][r+1],g[3][s+1][r+1]]]])).paint(t,e)}}}transform(t){if(t instanceof x)for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].add(t);else if(t instanceof g)for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].transform(t)}scale(t){for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].scale(t)}}document.querySelectorAll(&quot;rect,circle,ellipse,path,text&quot;).forEach((r,n)=&gt;{let o=r.getAttribute(&quot;id&quot;);o||(o=&quot;patchjs_shape&quot;+n,r.setAttribute(&quot;id&quot;,o));const i=r.style.fill.match(/^url\(\s*&quot;?\s*#([^\s&quot;]+)&quot;?\s*\)/),a=r.style.stroke.match(/^url\(\s*&quot;?\s*#([^\s&quot;]+)&quot;?\s*\)/);if(i&amp;&amp;i[1]){const a=document.getElementById(i[1]);if(a&amp;&amp;&quot;meshgradient&quot;===a.nodeName){const i=r.getBBox();let l=document.createElementNS(s,&quot;canvas&quot;);d(l,{width:i.width,height:i.height});const c=l.getContext(&quot;2d&quot;);let u=c.createImageData(i.width,i.height);const f=new b(a);&quot;objectBoundingBox&quot;===a.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;f.scale(new x(i.width,i.height));const p=a.getAttribute(&quot;gradientTransform&quot;);null!=p&amp;&amp;f.transform(h(p)),&quot;userSpaceOnUse&quot;===a.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;f.transform(new x(-i.x,-i.y)),f.paintMesh(u.data,l.width),c.putImageData(u,0,0);const y=document.createElementNS(t,&quot;image&quot;);d(y,{width:i.width,height:i.height,x:i.x,y:i.y});let g=l.toDataURL();y.setAttributeNS(e,&quot;xlink:href&quot;,g),r.parentNode.insertBefore(y,r),r.style.fill=&quot;none&quot;;const w=document.createElementNS(t,&quot;use&quot;);w.setAttributeNS(e,&quot;xlink:href&quot;,&quot;#&quot;+o);const m=&quot;patchjs_clip&quot;+n,M=document.createElementNS(t,&quot;clipPath&quot;);M.setAttribute(&quot;id&quot;,m),M.appendChild(w),r.parentElement.insertBefore(M,r),y.setAttribute(&quot;clip-path&quot;,&quot;url(#&quot;+m+&quot;)&quot;),u=null,l=null,g=null}}if(a&amp;&amp;a[1]){const o=document.getElementById(a[1]);if(o&amp;&amp;&quot;meshgradient&quot;===o.nodeName){const i=parseFloat(r.style.strokeWidth.slice(0,-2))*(parseFloat(r.style.strokeMiterlimit)||parseFloat(r.getAttribute(&quot;stroke-miterlimit&quot;))||1),a=r.getBBox(),l=Math.trunc(a.width+i),c=Math.trunc(a.height+i),u=Math.trunc(a.x-i/2),f=Math.trunc(a.y-i/2);let p=document.createElementNS(s,&quot;canvas&quot;);d(p,{width:l,height:c});const y=p.getContext(&quot;2d&quot;);let g=y.createImageData(l,c);const w=new b(o);&quot;objectBoundingBox&quot;===o.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;w.scale(new x(l,c));const m=o.getAttribute(&quot;gradientTransform&quot;);null!=m&amp;&amp;w.transform(h(m)),&quot;userSpaceOnUse&quot;===o.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;w.transform(new x(-u,-f)),w.paintMesh(g.data,p.width),y.putImageData(g,0,0);const M=document.createElementNS(t,&quot;image&quot;);d(M,{width:l,height:c,x:0,y:0});let S=p.toDataURL();M.setAttributeNS(e,&quot;xlink:href&quot;,S);const k=&quot;pattern_clip&quot;+n,A=document.createElementNS(t,&quot;pattern&quot;);d(A,{id:k,patternUnits:&quot;userSpaceOnUse&quot;,width:l,height:c,x:u,y:f}),A.appendChild(M),o.parentNode.appendChild(A),r.style.stroke=&quot;url(#&quot;+k+&quot;)&quot;,g=null,p=null,S=null}}})}();
</script><script
       id="mesh_polyfill-60"
       type="text/javascript">
!function(){const t=&quot;http://www.w3.org/2000/svg&quot;,e=&quot;http://www.w3.org/1999/xlink&quot;,s=&quot;http://www.w3.org/1999/xhtml&quot;,r=2;if(document.createElementNS(t,&quot;meshgradient&quot;).x)return;const n=(t,e,s,r)=&gt;{let n=new x(.5*(e.x+s.x),.5*(e.y+s.y)),o=new x(.5*(t.x+e.x),.5*(t.y+e.y)),i=new x(.5*(s.x+r.x),.5*(s.y+r.y)),a=new x(.5*(n.x+o.x),.5*(n.y+o.y)),h=new x(.5*(n.x+i.x),.5*(n.y+i.y)),l=new x(.5*(a.x+h.x),.5*(a.y+h.y));return[[t,o,a,l],[l,h,i,r]]},o=t=&gt;{let e=t[0].distSquared(t[1]),s=t[2].distSquared(t[3]),r=.25*t[0].distSquared(t[2]),n=.25*t[1].distSquared(t[3]),o=e&gt;s?e:s,i=r&gt;n?r:n;return 18*(o&gt;i?o:i)},i=(t,e)=&gt;Math.sqrt(t.distSquared(e)),a=(t,e)=&gt;t.scale(2/3).add(e.scale(1/3)),h=t=&gt;{let e,s,r,n,o,i,a,h=new g;return t.match(/(\w+\(\s*[^)]+\))+/g).forEach(t=&gt;{let l=t.match(/[\w.-]+/g),d=l.shift();switch(d){case&quot;translate&quot;:2===l.length?e=new g(1,0,0,1,l[0],l[1]):(console.error(&quot;mesh.js: translate does not have 2 arguments!&quot;),e=new g(1,0,0,1,0,0)),h=h.append(e);break;case&quot;scale&quot;:1===l.length?s=new g(l[0],0,0,l[0],0,0):2===l.length?s=new g(l[0],0,0,l[1],0,0):(console.error(&quot;mesh.js: scale does not have 1 or 2 arguments!&quot;),s=new g(1,0,0,1,0,0)),h=h.append(s);break;case&quot;rotate&quot;:if(3===l.length&amp;&amp;(e=new g(1,0,0,1,l[1],l[2]),h=h.append(e)),l[0]){r=l[0]*Math.PI/180;let t=Math.cos(r),e=Math.sin(r);Math.abs(t)&lt;1e-16&amp;&amp;(t=0),Math.abs(e)&lt;1e-16&amp;&amp;(e=0),a=new g(t,e,-e,t,0,0),h=h.append(a)}else console.error(&quot;math.js: No argument to rotate transform!&quot;);3===l.length&amp;&amp;(e=new g(1,0,0,1,-l[1],-l[2]),h=h.append(e));break;case&quot;skewX&quot;:l[0]?(r=l[0]*Math.PI/180,n=Math.tan(r),o=new g(1,0,n,1,0,0),h=h.append(o)):console.error(&quot;math.js: No argument to skewX transform!&quot;);break;case&quot;skewY&quot;:l[0]?(r=l[0]*Math.PI/180,n=Math.tan(r),i=new g(1,n,0,1,0,0),h=h.append(i)):console.error(&quot;math.js: No argument to skewY transform!&quot;);break;case&quot;matrix&quot;:6===l.length?h=h.append(new g(...l)):console.error(&quot;math.js: Incorrect number of arguments for matrix!&quot;);break;default:console.error(&quot;mesh.js: Unhandled transform type: &quot;+d)}}),h},l=t=&gt;{let e=[],s=t.split(/[ ,]+/);for(let t=0,r=s.length-1;t&lt;r;t+=2)e.push(new x(parseFloat(s[t]),parseFloat(s[t+1])));return e},d=(t,e)=&gt;{for(let s in e)t.setAttribute(s,e[s])},c=(t,e,s,r,n)=&gt;{let o,i,a=[0,0,0,0];for(let h=0;h&lt;3;++h)e[h]&lt;t[h]&amp;&amp;e[h]&lt;s[h]||t[h]&lt;e[h]&amp;&amp;s[h]&lt;e[h]?a[h]=0:(a[h]=.5*((e[h]-t[h])/r+(s[h]-e[h])/n),o=Math.abs(3*(e[h]-t[h])/r),i=Math.abs(3*(s[h]-e[h])/n),a[h]&gt;o?a[h]=o:a[h]&gt;i&amp;&amp;(a[h]=i));return a},u=[[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0],[-3,3,0,0,-2,-1,0,0,0,0,0,0,0,0,0,0],[2,-2,0,0,1,1,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0],[0,0,0,0,0,0,0,0,-3,3,0,0,-2,-1,0,0],[0,0,0,0,0,0,0,0,2,-2,0,0,1,1,0,0],[-3,0,3,0,0,0,0,0,-2,0,-1,0,0,0,0,0],[0,0,0,0,-3,0,3,0,0,0,0,0,-2,0,-1,0],[9,-9,-9,9,6,3,-6,-3,6,-6,3,-3,4,2,2,1],[-6,6,6,-6,-3,-3,3,3,-4,4,-2,2,-2,-2,-1,-1],[2,0,-2,0,0,0,0,0,1,0,1,0,0,0,0,0],[0,0,0,0,2,0,-2,0,0,0,0,0,1,0,1,0],[-6,6,6,-6,-4,-2,4,2,-3,3,-3,3,-2,-1,-2,-1],[4,-4,-4,4,2,2,-2,-2,2,-2,2,-2,1,1,1,1]],f=t=&gt;{let e=[];for(let s=0;s&lt;16;++s){e[s]=0;for(let r=0;r&lt;16;++r)e[s]+=u[s][r]*t[r]}return e},p=(t,e,s)=&gt;{const r=e*e,n=s*s,o=e*e*e,i=s*s*s;return t[0]+t[1]*e+t[2]*r+t[3]*o+t[4]*s+t[5]*s*e+t[6]*s*r+t[7]*s*o+t[8]*n+t[9]*n*e+t[10]*n*r+t[11]*n*o+t[12]*i+t[13]*i*e+t[14]*i*r+t[15]*i*o},y=t=&gt;{let e=[],s=[],r=[];for(let s=0;s&lt;4;++s)e[s]=[],e[s][0]=n(t[0][s],t[1][s],t[2][s],t[3][s]),e[s][1]=[],e[s][1].push(...n(...e[s][0][0])),e[s][1].push(...n(...e[s][0][1])),e[s][2]=[],e[s][2].push(...n(...e[s][1][0])),e[s][2].push(...n(...e[s][1][1])),e[s][2].push(...n(...e[s][1][2])),e[s][2].push(...n(...e[s][1][3]));for(let t=0;t&lt;8;++t){s[t]=[];for(let r=0;r&lt;4;++r)s[t][r]=[],s[t][r][0]=n(e[0][2][t][r],e[1][2][t][r],e[2][2][t][r],e[3][2][t][r]),s[t][r][1]=[],s[t][r][1].push(...n(...s[t][r][0][0])),s[t][r][1].push(...n(...s[t][r][0][1])),s[t][r][2]=[],s[t][r][2].push(...n(...s[t][r][1][0])),s[t][r][2].push(...n(...s[t][r][1][1])),s[t][r][2].push(...n(...s[t][r][1][2])),s[t][r][2].push(...n(...s[t][r][1][3]))}for(let t=0;t&lt;8;++t){r[t]=[];for(let e=0;e&lt;8;++e)r[t][e]=[],r[t][e][0]=s[t][0][2][e],r[t][e][1]=s[t][1][2][e],r[t][e][2]=s[t][2][2][e],r[t][e][3]=s[t][3][2][e]}return r};class x{constructor(t,e){this.x=t||0,this.y=e||0}toString(){return`(x=${this.x}, y=${this.y})`}clone(){return new x(this.x,this.y)}add(t){return new x(this.x+t.x,this.y+t.y)}scale(t){return void 0===t.x?new x(this.x*t,this.y*t):new x(this.x*t.x,this.y*t.y)}distSquared(t){let e=this.x-t.x,s=this.y-t.y;return e*e+s*s}transform(t){let e=this.x*t.a+this.y*t.c+t.e,s=this.x*t.b+this.y*t.d+t.f;return new x(e,s)}}class g{constructor(t,e,s,r,n,o){void 0===t?(this.a=1,this.b=0,this.c=0,this.d=1,this.e=0,this.f=0):(this.a=t,this.b=e,this.c=s,this.d=r,this.e=n,this.f=o)}toString(){return`affine: ${this.a} ${this.c} ${this.e} \n       ${this.b} ${this.d} ${this.f}`}append(t){t instanceof g||console.error(&quot;mesh.js: argument to Affine.append is not affine!&quot;);let e=this.a*t.a+this.c*t.b,s=this.b*t.a+this.d*t.b,r=this.a*t.c+this.c*t.d,n=this.b*t.c+this.d*t.d,o=this.a*t.e+this.c*t.f+this.e,i=this.b*t.e+this.d*t.f+this.f;return new g(e,s,r,n,o,i)}}class w{constructor(t,e){this.nodes=t,this.colors=e}paintCurve(t,e){if(o(this.nodes)&gt;r){const s=n(...this.nodes);let r=[[],[]],o=[[],[]];for(let t=0;t&lt;4;++t)r[0][t]=this.colors[0][t],r[1][t]=(this.colors[0][t]+this.colors[1][t])/2,o[0][t]=r[1][t],o[1][t]=this.colors[1][t];let i=new w(s[0],r),a=new w(s[1],o);i.paintCurve(t,e),a.paintCurve(t,e)}else{let s=Math.round(this.nodes[0].x);if(s&gt;=0&amp;&amp;s&lt;e){let r=4*(~~this.nodes[0].y*e+s);t[r]=Math.round(this.colors[0][0]),t[r+1]=Math.round(this.colors[0][1]),t[r+2]=Math.round(this.colors[0][2]),t[r+3]=Math.round(this.colors[0][3])}}}}class m{constructor(t,e){this.nodes=t,this.colors=e}split(){let t=[[],[],[],[]],e=[[],[],[],[]],s=[[[],[]],[[],[]]],r=[[[],[]],[[],[]]];for(let s=0;s&lt;4;++s){const r=n(this.nodes[0][s],this.nodes[1][s],this.nodes[2][s],this.nodes[3][s]);t[0][s]=r[0][0],t[1][s]=r[0][1],t[2][s]=r[0][2],t[3][s]=r[0][3],e[0][s]=r[1][0],e[1][s]=r[1][1],e[2][s]=r[1][2],e[3][s]=r[1][3]}for(let t=0;t&lt;4;++t)s[0][0][t]=this.colors[0][0][t],s[0][1][t]=this.colors[0][1][t],s[1][0][t]=(this.colors[0][0][t]+this.colors[1][0][t])/2,s[1][1][t]=(this.colors[0][1][t]+this.colors[1][1][t])/2,r[0][0][t]=s[1][0][t],r[0][1][t]=s[1][1][t],r[1][0][t]=this.colors[1][0][t],r[1][1][t]=this.colors[1][1][t];return[new m(t,s),new m(e,r)]}paint(t,e){let s,n=!1;for(let t=0;t&lt;4;++t)if((s=o([this.nodes[0][t],this.nodes[1][t],this.nodes[2][t],this.nodes[3][t]]))&gt;r){n=!0;break}if(n){let s=this.split();s[0].paint(t,e),s[1].paint(t,e)}else{new w([...this.nodes[0]],[...this.colors[0]]).paintCurve(t,e)}}}class b{constructor(t){this.readMesh(t),this.type=t.getAttribute(&quot;type&quot;)||&quot;bilinear&quot;}readMesh(t){let e=[[]],s=[[]],r=Number(t.getAttribute(&quot;x&quot;)),n=Number(t.getAttribute(&quot;y&quot;));e[0][0]=new x(r,n);let o=t.children;for(let t=0,r=o.length;t&lt;r;++t){e[3*t+1]=[],e[3*t+2]=[],e[3*t+3]=[],s[t+1]=[];let r=o[t].children;for(let n=0,o=r.length;n&lt;o;++n){let o=r[n].children;for(let r=0,i=o.length;r&lt;i;++r){let i=r;0!==t&amp;&amp;++i;let h,d=o[r].getAttribute(&quot;path&quot;),c=&quot;l&quot;;null!=d&amp;&amp;(c=(h=d.match(/\s*([lLcC])\s*(.*)/))[1]);let u=l(h[2]);switch(c){case&quot;l&quot;:0===i?(e[3*t][3*n+3]=u[0].add(e[3*t][3*n]),e[3*t][3*n+1]=a(e[3*t][3*n],e[3*t][3*n+3]),e[3*t][3*n+2]=a(e[3*t][3*n+3],e[3*t][3*n])):1===i?(e[3*t+3][3*n+3]=u[0].add(e[3*t][3*n+3]),e[3*t+1][3*n+3]=a(e[3*t][3*n+3],e[3*t+3][3*n+3]),e[3*t+2][3*n+3]=a(e[3*t+3][3*n+3],e[3*t][3*n+3])):2===i?(0===n&amp;&amp;(e[3*t+3][3*n+0]=u[0].add(e[3*t+3][3*n+3])),e[3*t+3][3*n+1]=a(e[3*t+3][3*n],e[3*t+3][3*n+3]),e[3*t+3][3*n+2]=a(e[3*t+3][3*n+3],e[3*t+3][3*n])):(e[3*t+1][3*n]=a(e[3*t][3*n],e[3*t+3][3*n]),e[3*t+2][3*n]=a(e[3*t+3][3*n],e[3*t][3*n]));break;case&quot;L&quot;:0===i?(e[3*t][3*n+3]=u[0],e[3*t][3*n+1]=a(e[3*t][3*n],e[3*t][3*n+3]),e[3*t][3*n+2]=a(e[3*t][3*n+3],e[3*t][3*n])):1===i?(e[3*t+3][3*n+3]=u[0],e[3*t+1][3*n+3]=a(e[3*t][3*n+3],e[3*t+3][3*n+3]),e[3*t+2][3*n+3]=a(e[3*t+3][3*n+3],e[3*t][3*n+3])):2===i?(0===n&amp;&amp;(e[3*t+3][3*n+0]=u[0]),e[3*t+3][3*n+1]=a(e[3*t+3][3*n],e[3*t+3][3*n+3]),e[3*t+3][3*n+2]=a(e[3*t+3][3*n+3],e[3*t+3][3*n])):(e[3*t+1][3*n]=a(e[3*t][3*n],e[3*t+3][3*n]),e[3*t+2][3*n]=a(e[3*t+3][3*n],e[3*t][3*n]));break;case&quot;c&quot;:0===i?(e[3*t][3*n+1]=u[0].add(e[3*t][3*n]),e[3*t][3*n+2]=u[1].add(e[3*t][3*n]),e[3*t][3*n+3]=u[2].add(e[3*t][3*n])):1===i?(e[3*t+1][3*n+3]=u[0].add(e[3*t][3*n+3]),e[3*t+2][3*n+3]=u[1].add(e[3*t][3*n+3]),e[3*t+3][3*n+3]=u[2].add(e[3*t][3*n+3])):2===i?(e[3*t+3][3*n+2]=u[0].add(e[3*t+3][3*n+3]),e[3*t+3][3*n+1]=u[1].add(e[3*t+3][3*n+3]),0===n&amp;&amp;(e[3*t+3][3*n+0]=u[2].add(e[3*t+3][3*n+3]))):(e[3*t+2][3*n]=u[0].add(e[3*t+3][3*n]),e[3*t+1][3*n]=u[1].add(e[3*t+3][3*n]));break;case&quot;C&quot;:0===i?(e[3*t][3*n+1]=u[0],e[3*t][3*n+2]=u[1],e[3*t][3*n+3]=u[2]):1===i?(e[3*t+1][3*n+3]=u[0],e[3*t+2][3*n+3]=u[1],e[3*t+3][3*n+3]=u[2]):2===i?(e[3*t+3][3*n+2]=u[0],e[3*t+3][3*n+1]=u[1],0===n&amp;&amp;(e[3*t+3][3*n+0]=u[2])):(e[3*t+2][3*n]=u[0],e[3*t+1][3*n]=u[1]);break;default:console.error(&quot;mesh.js: &quot;+c+&quot; invalid path type.&quot;)}if(0===t&amp;&amp;0===n||r&gt;0){let e=window.getComputedStyle(o[r]).stopColor.match(/^rgb\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)$/i),a=window.getComputedStyle(o[r]).stopOpacity,h=255;a&amp;&amp;(h=Math.floor(255*a)),e&amp;&amp;(0===i?(s[t][n]=[],s[t][n][0]=Math.floor(e[1]),s[t][n][1]=Math.floor(e[2]),s[t][n][2]=Math.floor(e[3]),s[t][n][3]=h):1===i?(s[t][n+1]=[],s[t][n+1][0]=Math.floor(e[1]),s[t][n+1][1]=Math.floor(e[2]),s[t][n+1][2]=Math.floor(e[3]),s[t][n+1][3]=h):2===i?(s[t+1][n+1]=[],s[t+1][n+1][0]=Math.floor(e[1]),s[t+1][n+1][1]=Math.floor(e[2]),s[t+1][n+1][2]=Math.floor(e[3]),s[t+1][n+1][3]=h):3===i&amp;&amp;(s[t+1][n]=[],s[t+1][n][0]=Math.floor(e[1]),s[t+1][n][1]=Math.floor(e[2]),s[t+1][n][2]=Math.floor(e[3]),s[t+1][n][3]=h))}}e[3*t+1][3*n+1]=new x,e[3*t+1][3*n+2]=new x,e[3*t+2][3*n+1]=new x,e[3*t+2][3*n+2]=new x,e[3*t+1][3*n+1].x=(-4*e[3*t][3*n].x+6*(e[3*t][3*n+1].x+e[3*t+1][3*n].x)+-2*(e[3*t][3*n+3].x+e[3*t+3][3*n].x)+3*(e[3*t+3][3*n+1].x+e[3*t+1][3*n+3].x)+-1*e[3*t+3][3*n+3].x)/9,e[3*t+1][3*n+2].x=(-4*e[3*t][3*n+3].x+6*(e[3*t][3*n+2].x+e[3*t+1][3*n+3].x)+-2*(e[3*t][3*n].x+e[3*t+3][3*n+3].x)+3*(e[3*t+3][3*n+2].x+e[3*t+1][3*n].x)+-1*e[3*t+3][3*n].x)/9,e[3*t+2][3*n+1].x=(-4*e[3*t+3][3*n].x+6*(e[3*t+3][3*n+1].x+e[3*t+2][3*n].x)+-2*(e[3*t+3][3*n+3].x+e[3*t][3*n].x)+3*(e[3*t][3*n+1].x+e[3*t+2][3*n+3].x)+-1*e[3*t][3*n+3].x)/9,e[3*t+2][3*n+2].x=(-4*e[3*t+3][3*n+3].x+6*(e[3*t+3][3*n+2].x+e[3*t+2][3*n+3].x)+-2*(e[3*t+3][3*n].x+e[3*t][3*n+3].x)+3*(e[3*t][3*n+2].x+e[3*t+2][3*n].x)+-1*e[3*t][3*n].x)/9,e[3*t+1][3*n+1].y=(-4*e[3*t][3*n].y+6*(e[3*t][3*n+1].y+e[3*t+1][3*n].y)+-2*(e[3*t][3*n+3].y+e[3*t+3][3*n].y)+3*(e[3*t+3][3*n+1].y+e[3*t+1][3*n+3].y)+-1*e[3*t+3][3*n+3].y)/9,e[3*t+1][3*n+2].y=(-4*e[3*t][3*n+3].y+6*(e[3*t][3*n+2].y+e[3*t+1][3*n+3].y)+-2*(e[3*t][3*n].y+e[3*t+3][3*n+3].y)+3*(e[3*t+3][3*n+2].y+e[3*t+1][3*n].y)+-1*e[3*t+3][3*n].y)/9,e[3*t+2][3*n+1].y=(-4*e[3*t+3][3*n].y+6*(e[3*t+3][3*n+1].y+e[3*t+2][3*n].y)+-2*(e[3*t+3][3*n+3].y+e[3*t][3*n].y)+3*(e[3*t][3*n+1].y+e[3*t+2][3*n+3].y)+-1*e[3*t][3*n+3].y)/9,e[3*t+2][3*n+2].y=(-4*e[3*t+3][3*n+3].y+6*(e[3*t+3][3*n+2].y+e[3*t+2][3*n+3].y)+-2*(e[3*t+3][3*n].y+e[3*t][3*n+3].y)+3*(e[3*t][3*n+2].y+e[3*t+2][3*n].y)+-1*e[3*t][3*n].y)/9}}this.nodes=e,this.colors=s}paintMesh(t,e){let s=(this.nodes.length-1)/3,r=(this.nodes[0].length-1)/3;if(&quot;bilinear&quot;===this.type||s&lt;2||r&lt;2){let n;for(let o=0;o&lt;s;++o)for(let s=0;s&lt;r;++s){let r=[];for(let t=3*o,e=3*o+4;t&lt;e;++t)r.push(this.nodes[t].slice(3*s,3*s+4));let i=[];i.push(this.colors[o].slice(s,s+2)),i.push(this.colors[o+1].slice(s,s+2)),(n=new m(r,i)).paint(t,e)}}else{let n,o,a,h,l,d,u;const x=s,g=r;s++,r++;let w=new Array(s);for(let t=0;t&lt;s;++t){w[t]=new Array(r);for(let e=0;e&lt;r;++e)w[t][e]=[],w[t][e][0]=this.nodes[3*t][3*e],w[t][e][1]=this.colors[t][e]}for(let t=0;t&lt;s;++t)for(let e=0;e&lt;r;++e)0!==t&amp;&amp;t!==x&amp;&amp;(n=i(w[t-1][e][0],w[t][e][0]),o=i(w[t+1][e][0],w[t][e][0]),w[t][e][2]=c(w[t-1][e][1],w[t][e][1],w[t+1][e][1],n,o)),0!==e&amp;&amp;e!==g&amp;&amp;(n=i(w[t][e-1][0],w[t][e][0]),o=i(w[t][e+1][0],w[t][e][0]),w[t][e][3]=c(w[t][e-1][1],w[t][e][1],w[t][e+1][1],n,o));for(let t=0;t&lt;r;++t){w[0][t][2]=[],w[x][t][2]=[];for(let e=0;e&lt;4;++e)n=i(w[1][t][0],w[0][t][0]),o=i(w[x][t][0],w[x-1][t][0]),w[0][t][2][e]=n&gt;0?2*(w[1][t][1][e]-w[0][t][1][e])/n-w[1][t][2][e]:0,w[x][t][2][e]=o&gt;0?2*(w[x][t][1][e]-w[x-1][t][1][e])/o-w[x-1][t][2][e]:0}for(let t=0;t&lt;s;++t){w[t][0][3]=[],w[t][g][3]=[];for(let e=0;e&lt;4;++e)n=i(w[t][1][0],w[t][0][0]),o=i(w[t][g][0],w[t][g-1][0]),w[t][0][3][e]=n&gt;0?2*(w[t][1][1][e]-w[t][0][1][e])/n-w[t][1][3][e]:0,w[t][g][3][e]=o&gt;0?2*(w[t][g][1][e]-w[t][g-1][1][e])/o-w[t][g-1][3][e]:0}for(let s=0;s&lt;x;++s)for(let r=0;r&lt;g;++r){let n=i(w[s][r][0],w[s+1][r][0]),o=i(w[s][r+1][0],w[s+1][r+1][0]),c=i(w[s][r][0],w[s][r+1][0]),x=i(w[s+1][r][0],w[s+1][r+1][0]),g=[[],[],[],[]];for(let t=0;t&lt;4;++t){(d=[])[0]=w[s][r][1][t],d[1]=w[s+1][r][1][t],d[2]=w[s][r+1][1][t],d[3]=w[s+1][r+1][1][t],d[4]=w[s][r][2][t]*n,d[5]=w[s+1][r][2][t]*n,d[6]=w[s][r+1][2][t]*o,d[7]=w[s+1][r+1][2][t]*o,d[8]=w[s][r][3][t]*c,d[9]=w[s+1][r][3][t]*x,d[10]=w[s][r+1][3][t]*c,d[11]=w[s+1][r+1][3][t]*x,d[12]=0,d[13]=0,d[14]=0,d[15]=0,u=f(d);for(let e=0;e&lt;9;++e){g[t][e]=[];for(let s=0;s&lt;9;++s)g[t][e][s]=p(u,e/8,s/8),g[t][e][s]&gt;255?g[t][e][s]=255:g[t][e][s]&lt;0&amp;&amp;(g[t][e][s]=0)}}h=[];for(let t=3*s,e=3*s+4;t&lt;e;++t)h.push(this.nodes[t].slice(3*r,3*r+4));l=y(h);for(let s=0;s&lt;8;++s)for(let r=0;r&lt;8;++r)(a=new m(l[s][r],[[[g[0][s][r],g[1][s][r],g[2][s][r],g[3][s][r]],[g[0][s][r+1],g[1][s][r+1],g[2][s][r+1],g[3][s][r+1]]],[[g[0][s+1][r],g[1][s+1][r],g[2][s+1][r],g[3][s+1][r]],[g[0][s+1][r+1],g[1][s+1][r+1],g[2][s+1][r+1],g[3][s+1][r+1]]]])).paint(t,e)}}}transform(t){if(t instanceof x)for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].add(t);else if(t instanceof g)for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].transform(t)}scale(t){for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].scale(t)}}document.querySelectorAll(&quot;rect,circle,ellipse,path,text&quot;).forEach((r,n)=&gt;{let o=r.getAttribute(&quot;id&quot;);o||(o=&quot;patchjs_shape&quot;+n,r.setAttribute(&quot;id&quot;,o));const i=r.style.fill.match(/^url\(\s*&quot;?\s*#([^\s&quot;]+)&quot;?\s*\)/),a=r.style.stroke.match(/^url\(\s*&quot;?\s*#([^\s&quot;]+)&quot;?\s*\)/);if(i&amp;&amp;i[1]){const a=document.getElementById(i[1]);if(a&amp;&amp;&quot;meshgradient&quot;===a.nodeName){const i=r.getBBox();let l=document.createElementNS(s,&quot;canvas&quot;);d(l,{width:i.width,height:i.height});const c=l.getContext(&quot;2d&quot;);let u=c.createImageData(i.width,i.height);const f=new b(a);&quot;objectBoundingBox&quot;===a.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;f.scale(new x(i.width,i.height));const p=a.getAttribute(&quot;gradientTransform&quot;);null!=p&amp;&amp;f.transform(h(p)),&quot;userSpaceOnUse&quot;===a.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;f.transform(new x(-i.x,-i.y)),f.paintMesh(u.data,l.width),c.putImageData(u,0,0);const y=document.createElementNS(t,&quot;image&quot;);d(y,{width:i.width,height:i.height,x:i.x,y:i.y});let g=l.toDataURL();y.setAttributeNS(e,&quot;xlink:href&quot;,g),r.parentNode.insertBefore(y,r),r.style.fill=&quot;none&quot;;const w=document.createElementNS(t,&quot;use&quot;);w.setAttributeNS(e,&quot;xlink:href&quot;,&quot;#&quot;+o);const m=&quot;patchjs_clip&quot;+n,M=document.createElementNS(t,&quot;clipPath&quot;);M.setAttribute(&quot;id&quot;,m),M.appendChild(w),r.parentElement.insertBefore(M,r),y.setAttribute(&quot;clip-path&quot;,&quot;url(#&quot;+m+&quot;)&quot;),u=null,l=null,g=null}}if(a&amp;&amp;a[1]){const o=document.getElementById(a[1]);if(o&amp;&amp;&quot;meshgradient&quot;===o.nodeName){const i=parseFloat(r.style.strokeWidth.slice(0,-2))*(parseFloat(r.style.strokeMiterlimit)||parseFloat(r.getAttribute(&quot;stroke-miterlimit&quot;))||1),a=r.getBBox(),l=Math.trunc(a.width+i),c=Math.trunc(a.height+i),u=Math.trunc(a.x-i/2),f=Math.trunc(a.y-i/2);let p=document.createElementNS(s,&quot;canvas&quot;);d(p,{width:l,height:c});const y=p.getContext(&quot;2d&quot;);let g=y.createImageData(l,c);const w=new b(o);&quot;objectBoundingBox&quot;===o.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;w.scale(new x(l,c));const m=o.getAttribute(&quot;gradientTransform&quot;);null!=m&amp;&amp;w.transform(h(m)),&quot;userSpaceOnUse&quot;===o.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;w.transform(new x(-u,-f)),w.paintMesh(g.data,p.width),y.putImageData(g,0,0);const M=document.createElementNS(t,&quot;image&quot;);d(M,{width:l,height:c,x:0,y:0});let S=p.toDataURL();M.setAttributeNS(e,&quot;xlink:href&quot;,S);const k=&quot;pattern_clip&quot;+n,A=document.createElementNS(t,&quot;pattern&quot;);d(A,{id:k,patternUnits:&quot;userSpaceOnUse&quot;,width:l,height:c,x:u,y:f}),A.appendChild(M),o.parentNode.appendChild(A),r.style.stroke=&quot;url(#&quot;+k+&quot;)&quot;,g=null,p=null,S=null}}})}();
</script><script
       id="mesh_polyfill-5"
       type="text/javascript">
!function(){const t=&quot;http://www.w3.org/2000/svg&quot;,e=&quot;http://www.w3.org/1999/xlink&quot;,s=&quot;http://www.w3.org/1999/xhtml&quot;,r=2;if(document.createElementNS(t,&quot;meshgradient&quot;).x)return;const n=(t,e,s,r)=&gt;{let n=new x(.5*(e.x+s.x),.5*(e.y+s.y)),o=new x(.5*(t.x+e.x),.5*(t.y+e.y)),i=new x(.5*(s.x+r.x),.5*(s.y+r.y)),a=new x(.5*(n.x+o.x),.5*(n.y+o.y)),h=new x(.5*(n.x+i.x),.5*(n.y+i.y)),l=new x(.5*(a.x+h.x),.5*(a.y+h.y));return[[t,o,a,l],[l,h,i,r]]},o=t=&gt;{let e=t[0].distSquared(t[1]),s=t[2].distSquared(t[3]),r=.25*t[0].distSquared(t[2]),n=.25*t[1].distSquared(t[3]),o=e&gt;s?e:s,i=r&gt;n?r:n;return 18*(o&gt;i?o:i)},i=(t,e)=&gt;Math.sqrt(t.distSquared(e)),a=(t,e)=&gt;t.scale(2/3).add(e.scale(1/3)),h=t=&gt;{let e,s,r,n,o,i,a,h=new g;return t.match(/(\w+\(\s*[^)]+\))+/g).forEach(t=&gt;{let l=t.match(/[\w.-]+/g),d=l.shift();switch(d){case&quot;translate&quot;:2===l.length?e=new g(1,0,0,1,l[0],l[1]):(console.error(&quot;mesh.js: translate does not have 2 arguments!&quot;),e=new g(1,0,0,1,0,0)),h=h.append(e);break;case&quot;scale&quot;:1===l.length?s=new g(l[0],0,0,l[0],0,0):2===l.length?s=new g(l[0],0,0,l[1],0,0):(console.error(&quot;mesh.js: scale does not have 1 or 2 arguments!&quot;),s=new g(1,0,0,1,0,0)),h=h.append(s);break;case&quot;rotate&quot;:if(3===l.length&amp;&amp;(e=new g(1,0,0,1,l[1],l[2]),h=h.append(e)),l[0]){r=l[0]*Math.PI/180;let t=Math.cos(r),e=Math.sin(r);Math.abs(t)&lt;1e-16&amp;&amp;(t=0),Math.abs(e)&lt;1e-16&amp;&amp;(e=0),a=new g(t,e,-e,t,0,0),h=h.append(a)}else console.error(&quot;math.js: No argument to rotate transform!&quot;);3===l.length&amp;&amp;(e=new g(1,0,0,1,-l[1],-l[2]),h=h.append(e));break;case&quot;skewX&quot;:l[0]?(r=l[0]*Math.PI/180,n=Math.tan(r),o=new g(1,0,n,1,0,0),h=h.append(o)):console.error(&quot;math.js: No argument to skewX transform!&quot;);break;case&quot;skewY&quot;:l[0]?(r=l[0]*Math.PI/180,n=Math.tan(r),i=new g(1,n,0,1,0,0),h=h.append(i)):console.error(&quot;math.js: No argument to skewY transform!&quot;);break;case&quot;matrix&quot;:6===l.length?h=h.append(new g(...l)):console.error(&quot;math.js: Incorrect number of arguments for matrix!&quot;);break;default:console.error(&quot;mesh.js: Unhandled transform type: &quot;+d)}}),h},l=t=&gt;{let e=[],s=t.split(/[ ,]+/);for(let t=0,r=s.length-1;t&lt;r;t+=2)e.push(new x(parseFloat(s[t]),parseFloat(s[t+1])));return e},d=(t,e)=&gt;{for(let s in e)t.setAttribute(s,e[s])},c=(t,e,s,r,n)=&gt;{let o,i,a=[0,0,0,0];for(let h=0;h&lt;3;++h)e[h]&lt;t[h]&amp;&amp;e[h]&lt;s[h]||t[h]&lt;e[h]&amp;&amp;s[h]&lt;e[h]?a[h]=0:(a[h]=.5*((e[h]-t[h])/r+(s[h]-e[h])/n),o=Math.abs(3*(e[h]-t[h])/r),i=Math.abs(3*(s[h]-e[h])/n),a[h]&gt;o?a[h]=o:a[h]&gt;i&amp;&amp;(a[h]=i));return a},u=[[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0],[-3,3,0,0,-2,-1,0,0,0,0,0,0,0,0,0,0],[2,-2,0,0,1,1,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0],[0,0,0,0,0,0,0,0,-3,3,0,0,-2,-1,0,0],[0,0,0,0,0,0,0,0,2,-2,0,0,1,1,0,0],[-3,0,3,0,0,0,0,0,-2,0,-1,0,0,0,0,0],[0,0,0,0,-3,0,3,0,0,0,0,0,-2,0,-1,0],[9,-9,-9,9,6,3,-6,-3,6,-6,3,-3,4,2,2,1],[-6,6,6,-6,-3,-3,3,3,-4,4,-2,2,-2,-2,-1,-1],[2,0,-2,0,0,0,0,0,1,0,1,0,0,0,0,0],[0,0,0,0,2,0,-2,0,0,0,0,0,1,0,1,0],[-6,6,6,-6,-4,-2,4,2,-3,3,-3,3,-2,-1,-2,-1],[4,-4,-4,4,2,2,-2,-2,2,-2,2,-2,1,1,1,1]],f=t=&gt;{let e=[];for(let s=0;s&lt;16;++s){e[s]=0;for(let r=0;r&lt;16;++r)e[s]+=u[s][r]*t[r]}return e},p=(t,e,s)=&gt;{const r=e*e,n=s*s,o=e*e*e,i=s*s*s;return t[0]+t[1]*e+t[2]*r+t[3]*o+t[4]*s+t[5]*s*e+t[6]*s*r+t[7]*s*o+t[8]*n+t[9]*n*e+t[10]*n*r+t[11]*n*o+t[12]*i+t[13]*i*e+t[14]*i*r+t[15]*i*o},y=t=&gt;{let e=[],s=[],r=[];for(let s=0;s&lt;4;++s)e[s]=[],e[s][0]=n(t[0][s],t[1][s],t[2][s],t[3][s]),e[s][1]=[],e[s][1].push(...n(...e[s][0][0])),e[s][1].push(...n(...e[s][0][1])),e[s][2]=[],e[s][2].push(...n(...e[s][1][0])),e[s][2].push(...n(...e[s][1][1])),e[s][2].push(...n(...e[s][1][2])),e[s][2].push(...n(...e[s][1][3]));for(let t=0;t&lt;8;++t){s[t]=[];for(let r=0;r&lt;4;++r)s[t][r]=[],s[t][r][0]=n(e[0][2][t][r],e[1][2][t][r],e[2][2][t][r],e[3][2][t][r]),s[t][r][1]=[],s[t][r][1].push(...n(...s[t][r][0][0])),s[t][r][1].push(...n(...s[t][r][0][1])),s[t][r][2]=[],s[t][r][2].push(...n(...s[t][r][1][0])),s[t][r][2].push(...n(...s[t][r][1][1])),s[t][r][2].push(...n(...s[t][r][1][2])),s[t][r][2].push(...n(...s[t][r][1][3]))}for(let t=0;t&lt;8;++t){r[t]=[];for(let e=0;e&lt;8;++e)r[t][e]=[],r[t][e][0]=s[t][0][2][e],r[t][e][1]=s[t][1][2][e],r[t][e][2]=s[t][2][2][e],r[t][e][3]=s[t][3][2][e]}return r};class x{constructor(t,e){this.x=t||0,this.y=e||0}toString(){return`(x=${this.x}, y=${this.y})`}clone(){return new x(this.x,this.y)}add(t){return new x(this.x+t.x,this.y+t.y)}scale(t){return void 0===t.x?new x(this.x*t,this.y*t):new x(this.x*t.x,this.y*t.y)}distSquared(t){let e=this.x-t.x,s=this.y-t.y;return e*e+s*s}transform(t){let e=this.x*t.a+this.y*t.c+t.e,s=this.x*t.b+this.y*t.d+t.f;return new x(e,s)}}class g{constructor(t,e,s,r,n,o){void 0===t?(this.a=1,this.b=0,this.c=0,this.d=1,this.e=0,this.f=0):(this.a=t,this.b=e,this.c=s,this.d=r,this.e=n,this.f=o)}toString(){return`affine: ${this.a} ${this.c} ${this.e} \n       ${this.b} ${this.d} ${this.f}`}append(t){t instanceof g||console.error(&quot;mesh.js: argument to Affine.append is not affine!&quot;);let e=this.a*t.a+this.c*t.b,s=this.b*t.a+this.d*t.b,r=this.a*t.c+this.c*t.d,n=this.b*t.c+this.d*t.d,o=this.a*t.e+this.c*t.f+this.e,i=this.b*t.e+this.d*t.f+this.f;return new g(e,s,r,n,o,i)}}class w{constructor(t,e){this.nodes=t,this.colors=e}paintCurve(t,e){if(o(this.nodes)&gt;r){const s=n(...this.nodes);let r=[[],[]],o=[[],[]];for(let t=0;t&lt;4;++t)r[0][t]=this.colors[0][t],r[1][t]=(this.colors[0][t]+this.colors[1][t])/2,o[0][t]=r[1][t],o[1][t]=this.colors[1][t];let i=new w(s[0],r),a=new w(s[1],o);i.paintCurve(t,e),a.paintCurve(t,e)}else{let s=Math.round(this.nodes[0].x);if(s&gt;=0&amp;&amp;s&lt;e){let r=4*(~~this.nodes[0].y*e+s);t[r]=Math.round(this.colors[0][0]),t[r+1]=Math.round(this.colors[0][1]),t[r+2]=Math.round(this.colors[0][2]),t[r+3]=Math.round(this.colors[0][3])}}}}class m{constructor(t,e){this.nodes=t,this.colors=e}split(){let t=[[],[],[],[]],e=[[],[],[],[]],s=[[[],[]],[[],[]]],r=[[[],[]],[[],[]]];for(let s=0;s&lt;4;++s){const r=n(this.nodes[0][s],this.nodes[1][s],this.nodes[2][s],this.nodes[3][s]);t[0][s]=r[0][0],t[1][s]=r[0][1],t[2][s]=r[0][2],t[3][s]=r[0][3],e[0][s]=r[1][0],e[1][s]=r[1][1],e[2][s]=r[1][2],e[3][s]=r[1][3]}for(let t=0;t&lt;4;++t)s[0][0][t]=this.colors[0][0][t],s[0][1][t]=this.colors[0][1][t],s[1][0][t]=(this.colors[0][0][t]+this.colors[1][0][t])/2,s[1][1][t]=(this.colors[0][1][t]+this.colors[1][1][t])/2,r[0][0][t]=s[1][0][t],r[0][1][t]=s[1][1][t],r[1][0][t]=this.colors[1][0][t],r[1][1][t]=this.colors[1][1][t];return[new m(t,s),new m(e,r)]}paint(t,e){let s,n=!1;for(let t=0;t&lt;4;++t)if((s=o([this.nodes[0][t],this.nodes[1][t],this.nodes[2][t],this.nodes[3][t]]))&gt;r){n=!0;break}if(n){let s=this.split();s[0].paint(t,e),s[1].paint(t,e)}else{new w([...this.nodes[0]],[...this.colors[0]]).paintCurve(t,e)}}}class b{constructor(t){this.readMesh(t),this.type=t.getAttribute(&quot;type&quot;)||&quot;bilinear&quot;}readMesh(t){let e=[[]],s=[[]],r=Number(t.getAttribute(&quot;x&quot;)),n=Number(t.getAttribute(&quot;y&quot;));e[0][0]=new x(r,n);let o=t.children;for(let t=0,r=o.length;t&lt;r;++t){e[3*t+1]=[],e[3*t+2]=[],e[3*t+3]=[],s[t+1]=[];let r=o[t].children;for(let n=0,o=r.length;n&lt;o;++n){let o=r[n].children;for(let r=0,i=o.length;r&lt;i;++r){let i=r;0!==t&amp;&amp;++i;let h,d=o[r].getAttribute(&quot;path&quot;),c=&quot;l&quot;;null!=d&amp;&amp;(c=(h=d.match(/\s*([lLcC])\s*(.*)/))[1]);let u=l(h[2]);switch(c){case&quot;l&quot;:0===i?(e[3*t][3*n+3]=u[0].add(e[3*t][3*n]),e[3*t][3*n+1]=a(e[3*t][3*n],e[3*t][3*n+3]),e[3*t][3*n+2]=a(e[3*t][3*n+3],e[3*t][3*n])):1===i?(e[3*t+3][3*n+3]=u[0].add(e[3*t][3*n+3]),e[3*t+1][3*n+3]=a(e[3*t][3*n+3],e[3*t+3][3*n+3]),e[3*t+2][3*n+3]=a(e[3*t+3][3*n+3],e[3*t][3*n+3])):2===i?(0===n&amp;&amp;(e[3*t+3][3*n+0]=u[0].add(e[3*t+3][3*n+3])),e[3*t+3][3*n+1]=a(e[3*t+3][3*n],e[3*t+3][3*n+3]),e[3*t+3][3*n+2]=a(e[3*t+3][3*n+3],e[3*t+3][3*n])):(e[3*t+1][3*n]=a(e[3*t][3*n],e[3*t+3][3*n]),e[3*t+2][3*n]=a(e[3*t+3][3*n],e[3*t][3*n]));break;case&quot;L&quot;:0===i?(e[3*t][3*n+3]=u[0],e[3*t][3*n+1]=a(e[3*t][3*n],e[3*t][3*n+3]),e[3*t][3*n+2]=a(e[3*t][3*n+3],e[3*t][3*n])):1===i?(e[3*t+3][3*n+3]=u[0],e[3*t+1][3*n+3]=a(e[3*t][3*n+3],e[3*t+3][3*n+3]),e[3*t+2][3*n+3]=a(e[3*t+3][3*n+3],e[3*t][3*n+3])):2===i?(0===n&amp;&amp;(e[3*t+3][3*n+0]=u[0]),e[3*t+3][3*n+1]=a(e[3*t+3][3*n],e[3*t+3][3*n+3]),e[3*t+3][3*n+2]=a(e[3*t+3][3*n+3],e[3*t+3][3*n])):(e[3*t+1][3*n]=a(e[3*t][3*n],e[3*t+3][3*n]),e[3*t+2][3*n]=a(e[3*t+3][3*n],e[3*t][3*n]));break;case&quot;c&quot;:0===i?(e[3*t][3*n+1]=u[0].add(e[3*t][3*n]),e[3*t][3*n+2]=u[1].add(e[3*t][3*n]),e[3*t][3*n+3]=u[2].add(e[3*t][3*n])):1===i?(e[3*t+1][3*n+3]=u[0].add(e[3*t][3*n+3]),e[3*t+2][3*n+3]=u[1].add(e[3*t][3*n+3]),e[3*t+3][3*n+3]=u[2].add(e[3*t][3*n+3])):2===i?(e[3*t+3][3*n+2]=u[0].add(e[3*t+3][3*n+3]),e[3*t+3][3*n+1]=u[1].add(e[3*t+3][3*n+3]),0===n&amp;&amp;(e[3*t+3][3*n+0]=u[2].add(e[3*t+3][3*n+3]))):(e[3*t+2][3*n]=u[0].add(e[3*t+3][3*n]),e[3*t+1][3*n]=u[1].add(e[3*t+3][3*n]));break;case&quot;C&quot;:0===i?(e[3*t][3*n+1]=u[0],e[3*t][3*n+2]=u[1],e[3*t][3*n+3]=u[2]):1===i?(e[3*t+1][3*n+3]=u[0],e[3*t+2][3*n+3]=u[1],e[3*t+3][3*n+3]=u[2]):2===i?(e[3*t+3][3*n+2]=u[0],e[3*t+3][3*n+1]=u[1],0===n&amp;&amp;(e[3*t+3][3*n+0]=u[2])):(e[3*t+2][3*n]=u[0],e[3*t+1][3*n]=u[1]);break;default:console.error(&quot;mesh.js: &quot;+c+&quot; invalid path type.&quot;)}if(0===t&amp;&amp;0===n||r&gt;0){let e=window.getComputedStyle(o[r]).stopColor.match(/^rgb\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)$/i),a=window.getComputedStyle(o[r]).stopOpacity,h=255;a&amp;&amp;(h=Math.floor(255*a)),e&amp;&amp;(0===i?(s[t][n]=[],s[t][n][0]=Math.floor(e[1]),s[t][n][1]=Math.floor(e[2]),s[t][n][2]=Math.floor(e[3]),s[t][n][3]=h):1===i?(s[t][n+1]=[],s[t][n+1][0]=Math.floor(e[1]),s[t][n+1][1]=Math.floor(e[2]),s[t][n+1][2]=Math.floor(e[3]),s[t][n+1][3]=h):2===i?(s[t+1][n+1]=[],s[t+1][n+1][0]=Math.floor(e[1]),s[t+1][n+1][1]=Math.floor(e[2]),s[t+1][n+1][2]=Math.floor(e[3]),s[t+1][n+1][3]=h):3===i&amp;&amp;(s[t+1][n]=[],s[t+1][n][0]=Math.floor(e[1]),s[t+1][n][1]=Math.floor(e[2]),s[t+1][n][2]=Math.floor(e[3]),s[t+1][n][3]=h))}}e[3*t+1][3*n+1]=new x,e[3*t+1][3*n+2]=new x,e[3*t+2][3*n+1]=new x,e[3*t+2][3*n+2]=new x,e[3*t+1][3*n+1].x=(-4*e[3*t][3*n].x+6*(e[3*t][3*n+1].x+e[3*t+1][3*n].x)+-2*(e[3*t][3*n+3].x+e[3*t+3][3*n].x)+3*(e[3*t+3][3*n+1].x+e[3*t+1][3*n+3].x)+-1*e[3*t+3][3*n+3].x)/9,e[3*t+1][3*n+2].x=(-4*e[3*t][3*n+3].x+6*(e[3*t][3*n+2].x+e[3*t+1][3*n+3].x)+-2*(e[3*t][3*n].x+e[3*t+3][3*n+3].x)+3*(e[3*t+3][3*n+2].x+e[3*t+1][3*n].x)+-1*e[3*t+3][3*n].x)/9,e[3*t+2][3*n+1].x=(-4*e[3*t+3][3*n].x+6*(e[3*t+3][3*n+1].x+e[3*t+2][3*n].x)+-2*(e[3*t+3][3*n+3].x+e[3*t][3*n].x)+3*(e[3*t][3*n+1].x+e[3*t+2][3*n+3].x)+-1*e[3*t][3*n+3].x)/9,e[3*t+2][3*n+2].x=(-4*e[3*t+3][3*n+3].x+6*(e[3*t+3][3*n+2].x+e[3*t+2][3*n+3].x)+-2*(e[3*t+3][3*n].x+e[3*t][3*n+3].x)+3*(e[3*t][3*n+2].x+e[3*t+2][3*n].x)+-1*e[3*t][3*n].x)/9,e[3*t+1][3*n+1].y=(-4*e[3*t][3*n].y+6*(e[3*t][3*n+1].y+e[3*t+1][3*n].y)+-2*(e[3*t][3*n+3].y+e[3*t+3][3*n].y)+3*(e[3*t+3][3*n+1].y+e[3*t+1][3*n+3].y)+-1*e[3*t+3][3*n+3].y)/9,e[3*t+1][3*n+2].y=(-4*e[3*t][3*n+3].y+6*(e[3*t][3*n+2].y+e[3*t+1][3*n+3].y)+-2*(e[3*t][3*n].y+e[3*t+3][3*n+3].y)+3*(e[3*t+3][3*n+2].y+e[3*t+1][3*n].y)+-1*e[3*t+3][3*n].y)/9,e[3*t+2][3*n+1].y=(-4*e[3*t+3][3*n].y+6*(e[3*t+3][3*n+1].y+e[3*t+2][3*n].y)+-2*(e[3*t+3][3*n+3].y+e[3*t][3*n].y)+3*(e[3*t][3*n+1].y+e[3*t+2][3*n+3].y)+-1*e[3*t][3*n+3].y)/9,e[3*t+2][3*n+2].y=(-4*e[3*t+3][3*n+3].y+6*(e[3*t+3][3*n+2].y+e[3*t+2][3*n+3].y)+-2*(e[3*t+3][3*n].y+e[3*t][3*n+3].y)+3*(e[3*t][3*n+2].y+e[3*t+2][3*n].y)+-1*e[3*t][3*n].y)/9}}this.nodes=e,this.colors=s}paintMesh(t,e){let s=(this.nodes.length-1)/3,r=(this.nodes[0].length-1)/3;if(&quot;bilinear&quot;===this.type||s&lt;2||r&lt;2){let n;for(let o=0;o&lt;s;++o)for(let s=0;s&lt;r;++s){let r=[];for(let t=3*o,e=3*o+4;t&lt;e;++t)r.push(this.nodes[t].slice(3*s,3*s+4));let i=[];i.push(this.colors[o].slice(s,s+2)),i.push(this.colors[o+1].slice(s,s+2)),(n=new m(r,i)).paint(t,e)}}else{let n,o,a,h,l,d,u;const x=s,g=r;s++,r++;let w=new Array(s);for(let t=0;t&lt;s;++t){w[t]=new Array(r);for(let e=0;e&lt;r;++e)w[t][e]=[],w[t][e][0]=this.nodes[3*t][3*e],w[t][e][1]=this.colors[t][e]}for(let t=0;t&lt;s;++t)for(let e=0;e&lt;r;++e)0!==t&amp;&amp;t!==x&amp;&amp;(n=i(w[t-1][e][0],w[t][e][0]),o=i(w[t+1][e][0],w[t][e][0]),w[t][e][2]=c(w[t-1][e][1],w[t][e][1],w[t+1][e][1],n,o)),0!==e&amp;&amp;e!==g&amp;&amp;(n=i(w[t][e-1][0],w[t][e][0]),o=i(w[t][e+1][0],w[t][e][0]),w[t][e][3]=c(w[t][e-1][1],w[t][e][1],w[t][e+1][1],n,o));for(let t=0;t&lt;r;++t){w[0][t][2]=[],w[x][t][2]=[];for(let e=0;e&lt;4;++e)n=i(w[1][t][0],w[0][t][0]),o=i(w[x][t][0],w[x-1][t][0]),w[0][t][2][e]=n&gt;0?2*(w[1][t][1][e]-w[0][t][1][e])/n-w[1][t][2][e]:0,w[x][t][2][e]=o&gt;0?2*(w[x][t][1][e]-w[x-1][t][1][e])/o-w[x-1][t][2][e]:0}for(let t=0;t&lt;s;++t){w[t][0][3]=[],w[t][g][3]=[];for(let e=0;e&lt;4;++e)n=i(w[t][1][0],w[t][0][0]),o=i(w[t][g][0],w[t][g-1][0]),w[t][0][3][e]=n&gt;0?2*(w[t][1][1][e]-w[t][0][1][e])/n-w[t][1][3][e]:0,w[t][g][3][e]=o&gt;0?2*(w[t][g][1][e]-w[t][g-1][1][e])/o-w[t][g-1][3][e]:0}for(let s=0;s&lt;x;++s)for(let r=0;r&lt;g;++r){let n=i(w[s][r][0],w[s+1][r][0]),o=i(w[s][r+1][0],w[s+1][r+1][0]),c=i(w[s][r][0],w[s][r+1][0]),x=i(w[s+1][r][0],w[s+1][r+1][0]),g=[[],[],[],[]];for(let t=0;t&lt;4;++t){(d=[])[0]=w[s][r][1][t],d[1]=w[s+1][r][1][t],d[2]=w[s][r+1][1][t],d[3]=w[s+1][r+1][1][t],d[4]=w[s][r][2][t]*n,d[5]=w[s+1][r][2][t]*n,d[6]=w[s][r+1][2][t]*o,d[7]=w[s+1][r+1][2][t]*o,d[8]=w[s][r][3][t]*c,d[9]=w[s+1][r][3][t]*x,d[10]=w[s][r+1][3][t]*c,d[11]=w[s+1][r+1][3][t]*x,d[12]=0,d[13]=0,d[14]=0,d[15]=0,u=f(d);for(let e=0;e&lt;9;++e){g[t][e]=[];for(let s=0;s&lt;9;++s)g[t][e][s]=p(u,e/8,s/8),g[t][e][s]&gt;255?g[t][e][s]=255:g[t][e][s]&lt;0&amp;&amp;(g[t][e][s]=0)}}h=[];for(let t=3*s,e=3*s+4;t&lt;e;++t)h.push(this.nodes[t].slice(3*r,3*r+4));l=y(h);for(let s=0;s&lt;8;++s)for(let r=0;r&lt;8;++r)(a=new m(l[s][r],[[[g[0][s][r],g[1][s][r],g[2][s][r],g[3][s][r]],[g[0][s][r+1],g[1][s][r+1],g[2][s][r+1],g[3][s][r+1]]],[[g[0][s+1][r],g[1][s+1][r],g[2][s+1][r],g[3][s+1][r]],[g[0][s+1][r+1],g[1][s+1][r+1],g[2][s+1][r+1],g[3][s+1][r+1]]]])).paint(t,e)}}}transform(t){if(t instanceof x)for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].add(t);else if(t instanceof g)for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].transform(t)}scale(t){for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].scale(t)}}document.querySelectorAll(&quot;rect,circle,ellipse,path,text&quot;).forEach((r,n)=&gt;{let o=r.getAttribute(&quot;id&quot;);o||(o=&quot;patchjs_shape&quot;+n,r.setAttribute(&quot;id&quot;,o));const i=r.style.fill.match(/^url\(\s*&quot;?\s*#([^\s&quot;]+)&quot;?\s*\)/),a=r.style.stroke.match(/^url\(\s*&quot;?\s*#([^\s&quot;]+)&quot;?\s*\)/);if(i&amp;&amp;i[1]){const a=document.getElementById(i[1]);if(a&amp;&amp;&quot;meshgradient&quot;===a.nodeName){const i=r.getBBox();let l=document.createElementNS(s,&quot;canvas&quot;);d(l,{width:i.width,height:i.height});const c=l.getContext(&quot;2d&quot;);let u=c.createImageData(i.width,i.height);const f=new b(a);&quot;objectBoundingBox&quot;===a.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;f.scale(new x(i.width,i.height));const p=a.getAttribute(&quot;gradientTransform&quot;);null!=p&amp;&amp;f.transform(h(p)),&quot;userSpaceOnUse&quot;===a.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;f.transform(new x(-i.x,-i.y)),f.paintMesh(u.data,l.width),c.putImageData(u,0,0);const y=document.createElementNS(t,&quot;image&quot;);d(y,{width:i.width,height:i.height,x:i.x,y:i.y});let g=l.toDataURL();y.setAttributeNS(e,&quot;xlink:href&quot;,g),r.parentNode.insertBefore(y,r),r.style.fill=&quot;none&quot;;const w=document.createElementNS(t,&quot;use&quot;);w.setAttributeNS(e,&quot;xlink:href&quot;,&quot;#&quot;+o);const m=&quot;patchjs_clip&quot;+n,M=document.createElementNS(t,&quot;clipPath&quot;);M.setAttribute(&quot;id&quot;,m),M.appendChild(w),r.parentElement.insertBefore(M,r),y.setAttribute(&quot;clip-path&quot;,&quot;url(#&quot;+m+&quot;)&quot;),u=null,l=null,g=null}}if(a&amp;&amp;a[1]){const o=document.getElementById(a[1]);if(o&amp;&amp;&quot;meshgradient&quot;===o.nodeName){const i=parseFloat(r.style.strokeWidth.slice(0,-2))*(parseFloat(r.style.strokeMiterlimit)||parseFloat(r.getAttribute(&quot;stroke-miterlimit&quot;))||1),a=r.getBBox(),l=Math.trunc(a.width+i),c=Math.trunc(a.height+i),u=Math.trunc(a.x-i/2),f=Math.trunc(a.y-i/2);let p=document.createElementNS(s,&quot;canvas&quot;);d(p,{width:l,height:c});const y=p.getContext(&quot;2d&quot;);let g=y.createImageData(l,c);const w=new b(o);&quot;objectBoundingBox&quot;===o.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;w.scale(new x(l,c));const m=o.getAttribute(&quot;gradientTransform&quot;);null!=m&amp;&amp;w.transform(h(m)),&quot;userSpaceOnUse&quot;===o.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;w.transform(new x(-u,-f)),w.paintMesh(g.data,p.width),y.putImageData(g,0,0);const M=document.createElementNS(t,&quot;image&quot;);d(M,{width:l,height:c,x:0,y:0});let S=p.toDataURL();M.setAttributeNS(e,&quot;xlink:href&quot;,S);const k=&quot;pattern_clip&quot;+n,A=document.createElementNS(t,&quot;pattern&quot;);d(A,{id:k,patternUnits:&quot;userSpaceOnUse&quot;,width:l,height:c,x:u,y:f}),A.appendChild(M),o.parentNode.appendChild(A),r.style.stroke=&quot;url(#&quot;+k+&quot;)&quot;,g=null,p=null,S=null}}})}();
</script><script
       id="mesh_polyfill-7"
       type="text/javascript">
!function(){const t=&quot;http://www.w3.org/2000/svg&quot;,e=&quot;http://www.w3.org/1999/xlink&quot;,s=&quot;http://www.w3.org/1999/xhtml&quot;,r=2;if(document.createElementNS(t,&quot;meshgradient&quot;).x)return;const n=(t,e,s,r)=&gt;{let n=new x(.5*(e.x+s.x),.5*(e.y+s.y)),o=new x(.5*(t.x+e.x),.5*(t.y+e.y)),i=new x(.5*(s.x+r.x),.5*(s.y+r.y)),a=new x(.5*(n.x+o.x),.5*(n.y+o.y)),h=new x(.5*(n.x+i.x),.5*(n.y+i.y)),l=new x(.5*(a.x+h.x),.5*(a.y+h.y));return[[t,o,a,l],[l,h,i,r]]},o=t=&gt;{let e=t[0].distSquared(t[1]),s=t[2].distSquared(t[3]),r=.25*t[0].distSquared(t[2]),n=.25*t[1].distSquared(t[3]),o=e&gt;s?e:s,i=r&gt;n?r:n;return 18*(o&gt;i?o:i)},i=(t,e)=&gt;Math.sqrt(t.distSquared(e)),a=(t,e)=&gt;t.scale(2/3).add(e.scale(1/3)),h=t=&gt;{let e,s,r,n,o,i,a,h=new g;return t.match(/(\w+\(\s*[^)]+\))+/g).forEach(t=&gt;{let l=t.match(/[\w.-]+/g),d=l.shift();switch(d){case&quot;translate&quot;:2===l.length?e=new g(1,0,0,1,l[0],l[1]):(console.error(&quot;mesh.js: translate does not have 2 arguments!&quot;),e=new g(1,0,0,1,0,0)),h=h.append(e);break;case&quot;scale&quot;:1===l.length?s=new g(l[0],0,0,l[0],0,0):2===l.length?s=new g(l[0],0,0,l[1],0,0):(console.error(&quot;mesh.js: scale does not have 1 or 2 arguments!&quot;),s=new g(1,0,0,1,0,0)),h=h.append(s);break;case&quot;rotate&quot;:if(3===l.length&amp;&amp;(e=new g(1,0,0,1,l[1],l[2]),h=h.append(e)),l[0]){r=l[0]*Math.PI/180;let t=Math.cos(r),e=Math.sin(r);Math.abs(t)&lt;1e-16&amp;&amp;(t=0),Math.abs(e)&lt;1e-16&amp;&amp;(e=0),a=new g(t,e,-e,t,0,0),h=h.append(a)}else console.error(&quot;math.js: No argument to rotate transform!&quot;);3===l.length&amp;&amp;(e=new g(1,0,0,1,-l[1],-l[2]),h=h.append(e));break;case&quot;skewX&quot;:l[0]?(r=l[0]*Math.PI/180,n=Math.tan(r),o=new g(1,0,n,1,0,0),h=h.append(o)):console.error(&quot;math.js: No argument to skewX transform!&quot;);break;case&quot;skewY&quot;:l[0]?(r=l[0]*Math.PI/180,n=Math.tan(r),i=new g(1,n,0,1,0,0),h=h.append(i)):console.error(&quot;math.js: No argument to skewY transform!&quot;);break;case&quot;matrix&quot;:6===l.length?h=h.append(new g(...l)):console.error(&quot;math.js: Incorrect number of arguments for matrix!&quot;);break;default:console.error(&quot;mesh.js: Unhandled transform type: &quot;+d)}}),h},l=t=&gt;{let e=[],s=t.split(/[ ,]+/);for(let t=0,r=s.length-1;t&lt;r;t+=2)e.push(new x(parseFloat(s[t]),parseFloat(s[t+1])));return e},d=(t,e)=&gt;{for(let s in e)t.setAttribute(s,e[s])},c=(t,e,s,r,n)=&gt;{let o,i,a=[0,0,0,0];for(let h=0;h&lt;3;++h)e[h]&lt;t[h]&amp;&amp;e[h]&lt;s[h]||t[h]&lt;e[h]&amp;&amp;s[h]&lt;e[h]?a[h]=0:(a[h]=.5*((e[h]-t[h])/r+(s[h]-e[h])/n),o=Math.abs(3*(e[h]-t[h])/r),i=Math.abs(3*(s[h]-e[h])/n),a[h]&gt;o?a[h]=o:a[h]&gt;i&amp;&amp;(a[h]=i));return a},u=[[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0],[-3,3,0,0,-2,-1,0,0,0,0,0,0,0,0,0,0],[2,-2,0,0,1,1,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0],[0,0,0,0,0,0,0,0,-3,3,0,0,-2,-1,0,0],[0,0,0,0,0,0,0,0,2,-2,0,0,1,1,0,0],[-3,0,3,0,0,0,0,0,-2,0,-1,0,0,0,0,0],[0,0,0,0,-3,0,3,0,0,0,0,0,-2,0,-1,0],[9,-9,-9,9,6,3,-6,-3,6,-6,3,-3,4,2,2,1],[-6,6,6,-6,-3,-3,3,3,-4,4,-2,2,-2,-2,-1,-1],[2,0,-2,0,0,0,0,0,1,0,1,0,0,0,0,0],[0,0,0,0,2,0,-2,0,0,0,0,0,1,0,1,0],[-6,6,6,-6,-4,-2,4,2,-3,3,-3,3,-2,-1,-2,-1],[4,-4,-4,4,2,2,-2,-2,2,-2,2,-2,1,1,1,1]],f=t=&gt;{let e=[];for(let s=0;s&lt;16;++s){e[s]=0;for(let r=0;r&lt;16;++r)e[s]+=u[s][r]*t[r]}return e},p=(t,e,s)=&gt;{const r=e*e,n=s*s,o=e*e*e,i=s*s*s;return t[0]+t[1]*e+t[2]*r+t[3]*o+t[4]*s+t[5]*s*e+t[6]*s*r+t[7]*s*o+t[8]*n+t[9]*n*e+t[10]*n*r+t[11]*n*o+t[12]*i+t[13]*i*e+t[14]*i*r+t[15]*i*o},y=t=&gt;{let e=[],s=[],r=[];for(let s=0;s&lt;4;++s)e[s]=[],e[s][0]=n(t[0][s],t[1][s],t[2][s],t[3][s]),e[s][1]=[],e[s][1].push(...n(...e[s][0][0])),e[s][1].push(...n(...e[s][0][1])),e[s][2]=[],e[s][2].push(...n(...e[s][1][0])),e[s][2].push(...n(...e[s][1][1])),e[s][2].push(...n(...e[s][1][2])),e[s][2].push(...n(...e[s][1][3]));for(let t=0;t&lt;8;++t){s[t]=[];for(let r=0;r&lt;4;++r)s[t][r]=[],s[t][r][0]=n(e[0][2][t][r],e[1][2][t][r],e[2][2][t][r],e[3][2][t][r]),s[t][r][1]=[],s[t][r][1].push(...n(...s[t][r][0][0])),s[t][r][1].push(...n(...s[t][r][0][1])),s[t][r][2]=[],s[t][r][2].push(...n(...s[t][r][1][0])),s[t][r][2].push(...n(...s[t][r][1][1])),s[t][r][2].push(...n(...s[t][r][1][2])),s[t][r][2].push(...n(...s[t][r][1][3]))}for(let t=0;t&lt;8;++t){r[t]=[];for(let e=0;e&lt;8;++e)r[t][e]=[],r[t][e][0]=s[t][0][2][e],r[t][e][1]=s[t][1][2][e],r[t][e][2]=s[t][2][2][e],r[t][e][3]=s[t][3][2][e]}return r};class x{constructor(t,e){this.x=t||0,this.y=e||0}toString(){return`(x=${this.x}, y=${this.y})`}clone(){return new x(this.x,this.y)}add(t){return new x(this.x+t.x,this.y+t.y)}scale(t){return void 0===t.x?new x(this.x*t,this.y*t):new x(this.x*t.x,this.y*t.y)}distSquared(t){let e=this.x-t.x,s=this.y-t.y;return e*e+s*s}transform(t){let e=this.x*t.a+this.y*t.c+t.e,s=this.x*t.b+this.y*t.d+t.f;return new x(e,s)}}class g{constructor(t,e,s,r,n,o){void 0===t?(this.a=1,this.b=0,this.c=0,this.d=1,this.e=0,this.f=0):(this.a=t,this.b=e,this.c=s,this.d=r,this.e=n,this.f=o)}toString(){return`affine: ${this.a} ${this.c} ${this.e} \n       ${this.b} ${this.d} ${this.f}`}append(t){t instanceof g||console.error(&quot;mesh.js: argument to Affine.append is not affine!&quot;);let e=this.a*t.a+this.c*t.b,s=this.b*t.a+this.d*t.b,r=this.a*t.c+this.c*t.d,n=this.b*t.c+this.d*t.d,o=this.a*t.e+this.c*t.f+this.e,i=this.b*t.e+this.d*t.f+this.f;return new g(e,s,r,n,o,i)}}class w{constructor(t,e){this.nodes=t,this.colors=e}paintCurve(t,e){if(o(this.nodes)&gt;r){const s=n(...this.nodes);let r=[[],[]],o=[[],[]];for(let t=0;t&lt;4;++t)r[0][t]=this.colors[0][t],r[1][t]=(this.colors[0][t]+this.colors[1][t])/2,o[0][t]=r[1][t],o[1][t]=this.colors[1][t];let i=new w(s[0],r),a=new w(s[1],o);i.paintCurve(t,e),a.paintCurve(t,e)}else{let s=Math.round(this.nodes[0].x);if(s&gt;=0&amp;&amp;s&lt;e){let r=4*(~~this.nodes[0].y*e+s);t[r]=Math.round(this.colors[0][0]),t[r+1]=Math.round(this.colors[0][1]),t[r+2]=Math.round(this.colors[0][2]),t[r+3]=Math.round(this.colors[0][3])}}}}class m{constructor(t,e){this.nodes=t,this.colors=e}split(){let t=[[],[],[],[]],e=[[],[],[],[]],s=[[[],[]],[[],[]]],r=[[[],[]],[[],[]]];for(let s=0;s&lt;4;++s){const r=n(this.nodes[0][s],this.nodes[1][s],this.nodes[2][s],this.nodes[3][s]);t[0][s]=r[0][0],t[1][s]=r[0][1],t[2][s]=r[0][2],t[3][s]=r[0][3],e[0][s]=r[1][0],e[1][s]=r[1][1],e[2][s]=r[1][2],e[3][s]=r[1][3]}for(let t=0;t&lt;4;++t)s[0][0][t]=this.colors[0][0][t],s[0][1][t]=this.colors[0][1][t],s[1][0][t]=(this.colors[0][0][t]+this.colors[1][0][t])/2,s[1][1][t]=(this.colors[0][1][t]+this.colors[1][1][t])/2,r[0][0][t]=s[1][0][t],r[0][1][t]=s[1][1][t],r[1][0][t]=this.colors[1][0][t],r[1][1][t]=this.colors[1][1][t];return[new m(t,s),new m(e,r)]}paint(t,e){let s,n=!1;for(let t=0;t&lt;4;++t)if((s=o([this.nodes[0][t],this.nodes[1][t],this.nodes[2][t],this.nodes[3][t]]))&gt;r){n=!0;break}if(n){let s=this.split();s[0].paint(t,e),s[1].paint(t,e)}else{new w([...this.nodes[0]],[...this.colors[0]]).paintCurve(t,e)}}}class b{constructor(t){this.readMesh(t),this.type=t.getAttribute(&quot;type&quot;)||&quot;bilinear&quot;}readMesh(t){let e=[[]],s=[[]],r=Number(t.getAttribute(&quot;x&quot;)),n=Number(t.getAttribute(&quot;y&quot;));e[0][0]=new x(r,n);let o=t.children;for(let t=0,r=o.length;t&lt;r;++t){e[3*t+1]=[],e[3*t+2]=[],e[3*t+3]=[],s[t+1]=[];let r=o[t].children;for(let n=0,o=r.length;n&lt;o;++n){let o=r[n].children;for(let r=0,i=o.length;r&lt;i;++r){let i=r;0!==t&amp;&amp;++i;let h,d=o[r].getAttribute(&quot;path&quot;),c=&quot;l&quot;;null!=d&amp;&amp;(c=(h=d.match(/\s*([lLcC])\s*(.*)/))[1]);let u=l(h[2]);switch(c){case&quot;l&quot;:0===i?(e[3*t][3*n+3]=u[0].add(e[3*t][3*n]),e[3*t][3*n+1]=a(e[3*t][3*n],e[3*t][3*n+3]),e[3*t][3*n+2]=a(e[3*t][3*n+3],e[3*t][3*n])):1===i?(e[3*t+3][3*n+3]=u[0].add(e[3*t][3*n+3]),e[3*t+1][3*n+3]=a(e[3*t][3*n+3],e[3*t+3][3*n+3]),e[3*t+2][3*n+3]=a(e[3*t+3][3*n+3],e[3*t][3*n+3])):2===i?(0===n&amp;&amp;(e[3*t+3][3*n+0]=u[0].add(e[3*t+3][3*n+3])),e[3*t+3][3*n+1]=a(e[3*t+3][3*n],e[3*t+3][3*n+3]),e[3*t+3][3*n+2]=a(e[3*t+3][3*n+3],e[3*t+3][3*n])):(e[3*t+1][3*n]=a(e[3*t][3*n],e[3*t+3][3*n]),e[3*t+2][3*n]=a(e[3*t+3][3*n],e[3*t][3*n]));break;case&quot;L&quot;:0===i?(e[3*t][3*n+3]=u[0],e[3*t][3*n+1]=a(e[3*t][3*n],e[3*t][3*n+3]),e[3*t][3*n+2]=a(e[3*t][3*n+3],e[3*t][3*n])):1===i?(e[3*t+3][3*n+3]=u[0],e[3*t+1][3*n+3]=a(e[3*t][3*n+3],e[3*t+3][3*n+3]),e[3*t+2][3*n+3]=a(e[3*t+3][3*n+3],e[3*t][3*n+3])):2===i?(0===n&amp;&amp;(e[3*t+3][3*n+0]=u[0]),e[3*t+3][3*n+1]=a(e[3*t+3][3*n],e[3*t+3][3*n+3]),e[3*t+3][3*n+2]=a(e[3*t+3][3*n+3],e[3*t+3][3*n])):(e[3*t+1][3*n]=a(e[3*t][3*n],e[3*t+3][3*n]),e[3*t+2][3*n]=a(e[3*t+3][3*n],e[3*t][3*n]));break;case&quot;c&quot;:0===i?(e[3*t][3*n+1]=u[0].add(e[3*t][3*n]),e[3*t][3*n+2]=u[1].add(e[3*t][3*n]),e[3*t][3*n+3]=u[2].add(e[3*t][3*n])):1===i?(e[3*t+1][3*n+3]=u[0].add(e[3*t][3*n+3]),e[3*t+2][3*n+3]=u[1].add(e[3*t][3*n+3]),e[3*t+3][3*n+3]=u[2].add(e[3*t][3*n+3])):2===i?(e[3*t+3][3*n+2]=u[0].add(e[3*t+3][3*n+3]),e[3*t+3][3*n+1]=u[1].add(e[3*t+3][3*n+3]),0===n&amp;&amp;(e[3*t+3][3*n+0]=u[2].add(e[3*t+3][3*n+3]))):(e[3*t+2][3*n]=u[0].add(e[3*t+3][3*n]),e[3*t+1][3*n]=u[1].add(e[3*t+3][3*n]));break;case&quot;C&quot;:0===i?(e[3*t][3*n+1]=u[0],e[3*t][3*n+2]=u[1],e[3*t][3*n+3]=u[2]):1===i?(e[3*t+1][3*n+3]=u[0],e[3*t+2][3*n+3]=u[1],e[3*t+3][3*n+3]=u[2]):2===i?(e[3*t+3][3*n+2]=u[0],e[3*t+3][3*n+1]=u[1],0===n&amp;&amp;(e[3*t+3][3*n+0]=u[2])):(e[3*t+2][3*n]=u[0],e[3*t+1][3*n]=u[1]);break;default:console.error(&quot;mesh.js: &quot;+c+&quot; invalid path type.&quot;)}if(0===t&amp;&amp;0===n||r&gt;0){let e=window.getComputedStyle(o[r]).stopColor.match(/^rgb\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)$/i),a=window.getComputedStyle(o[r]).stopOpacity,h=255;a&amp;&amp;(h=Math.floor(255*a)),e&amp;&amp;(0===i?(s[t][n]=[],s[t][n][0]=Math.floor(e[1]),s[t][n][1]=Math.floor(e[2]),s[t][n][2]=Math.floor(e[3]),s[t][n][3]=h):1===i?(s[t][n+1]=[],s[t][n+1][0]=Math.floor(e[1]),s[t][n+1][1]=Math.floor(e[2]),s[t][n+1][2]=Math.floor(e[3]),s[t][n+1][3]=h):2===i?(s[t+1][n+1]=[],s[t+1][n+1][0]=Math.floor(e[1]),s[t+1][n+1][1]=Math.floor(e[2]),s[t+1][n+1][2]=Math.floor(e[3]),s[t+1][n+1][3]=h):3===i&amp;&amp;(s[t+1][n]=[],s[t+1][n][0]=Math.floor(e[1]),s[t+1][n][1]=Math.floor(e[2]),s[t+1][n][2]=Math.floor(e[3]),s[t+1][n][3]=h))}}e[3*t+1][3*n+1]=new x,e[3*t+1][3*n+2]=new x,e[3*t+2][3*n+1]=new x,e[3*t+2][3*n+2]=new x,e[3*t+1][3*n+1].x=(-4*e[3*t][3*n].x+6*(e[3*t][3*n+1].x+e[3*t+1][3*n].x)+-2*(e[3*t][3*n+3].x+e[3*t+3][3*n].x)+3*(e[3*t+3][3*n+1].x+e[3*t+1][3*n+3].x)+-1*e[3*t+3][3*n+3].x)/9,e[3*t+1][3*n+2].x=(-4*e[3*t][3*n+3].x+6*(e[3*t][3*n+2].x+e[3*t+1][3*n+3].x)+-2*(e[3*t][3*n].x+e[3*t+3][3*n+3].x)+3*(e[3*t+3][3*n+2].x+e[3*t+1][3*n].x)+-1*e[3*t+3][3*n].x)/9,e[3*t+2][3*n+1].x=(-4*e[3*t+3][3*n].x+6*(e[3*t+3][3*n+1].x+e[3*t+2][3*n].x)+-2*(e[3*t+3][3*n+3].x+e[3*t][3*n].x)+3*(e[3*t][3*n+1].x+e[3*t+2][3*n+3].x)+-1*e[3*t][3*n+3].x)/9,e[3*t+2][3*n+2].x=(-4*e[3*t+3][3*n+3].x+6*(e[3*t+3][3*n+2].x+e[3*t+2][3*n+3].x)+-2*(e[3*t+3][3*n].x+e[3*t][3*n+3].x)+3*(e[3*t][3*n+2].x+e[3*t+2][3*n].x)+-1*e[3*t][3*n].x)/9,e[3*t+1][3*n+1].y=(-4*e[3*t][3*n].y+6*(e[3*t][3*n+1].y+e[3*t+1][3*n].y)+-2*(e[3*t][3*n+3].y+e[3*t+3][3*n].y)+3*(e[3*t+3][3*n+1].y+e[3*t+1][3*n+3].y)+-1*e[3*t+3][3*n+3].y)/9,e[3*t+1][3*n+2].y=(-4*e[3*t][3*n+3].y+6*(e[3*t][3*n+2].y+e[3*t+1][3*n+3].y)+-2*(e[3*t][3*n].y+e[3*t+3][3*n+3].y)+3*(e[3*t+3][3*n+2].y+e[3*t+1][3*n].y)+-1*e[3*t+3][3*n].y)/9,e[3*t+2][3*n+1].y=(-4*e[3*t+3][3*n].y+6*(e[3*t+3][3*n+1].y+e[3*t+2][3*n].y)+-2*(e[3*t+3][3*n+3].y+e[3*t][3*n].y)+3*(e[3*t][3*n+1].y+e[3*t+2][3*n+3].y)+-1*e[3*t][3*n+3].y)/9,e[3*t+2][3*n+2].y=(-4*e[3*t+3][3*n+3].y+6*(e[3*t+3][3*n+2].y+e[3*t+2][3*n+3].y)+-2*(e[3*t+3][3*n].y+e[3*t][3*n+3].y)+3*(e[3*t][3*n+2].y+e[3*t+2][3*n].y)+-1*e[3*t][3*n].y)/9}}this.nodes=e,this.colors=s}paintMesh(t,e){let s=(this.nodes.length-1)/3,r=(this.nodes[0].length-1)/3;if(&quot;bilinear&quot;===this.type||s&lt;2||r&lt;2){let n;for(let o=0;o&lt;s;++o)for(let s=0;s&lt;r;++s){let r=[];for(let t=3*o,e=3*o+4;t&lt;e;++t)r.push(this.nodes[t].slice(3*s,3*s+4));let i=[];i.push(this.colors[o].slice(s,s+2)),i.push(this.colors[o+1].slice(s,s+2)),(n=new m(r,i)).paint(t,e)}}else{let n,o,a,h,l,d,u;const x=s,g=r;s++,r++;let w=new Array(s);for(let t=0;t&lt;s;++t){w[t]=new Array(r);for(let e=0;e&lt;r;++e)w[t][e]=[],w[t][e][0]=this.nodes[3*t][3*e],w[t][e][1]=this.colors[t][e]}for(let t=0;t&lt;s;++t)for(let e=0;e&lt;r;++e)0!==t&amp;&amp;t!==x&amp;&amp;(n=i(w[t-1][e][0],w[t][e][0]),o=i(w[t+1][e][0],w[t][e][0]),w[t][e][2]=c(w[t-1][e][1],w[t][e][1],w[t+1][e][1],n,o)),0!==e&amp;&amp;e!==g&amp;&amp;(n=i(w[t][e-1][0],w[t][e][0]),o=i(w[t][e+1][0],w[t][e][0]),w[t][e][3]=c(w[t][e-1][1],w[t][e][1],w[t][e+1][1],n,o));for(let t=0;t&lt;r;++t){w[0][t][2]=[],w[x][t][2]=[];for(let e=0;e&lt;4;++e)n=i(w[1][t][0],w[0][t][0]),o=i(w[x][t][0],w[x-1][t][0]),w[0][t][2][e]=n&gt;0?2*(w[1][t][1][e]-w[0][t][1][e])/n-w[1][t][2][e]:0,w[x][t][2][e]=o&gt;0?2*(w[x][t][1][e]-w[x-1][t][1][e])/o-w[x-1][t][2][e]:0}for(let t=0;t&lt;s;++t){w[t][0][3]=[],w[t][g][3]=[];for(let e=0;e&lt;4;++e)n=i(w[t][1][0],w[t][0][0]),o=i(w[t][g][0],w[t][g-1][0]),w[t][0][3][e]=n&gt;0?2*(w[t][1][1][e]-w[t][0][1][e])/n-w[t][1][3][e]:0,w[t][g][3][e]=o&gt;0?2*(w[t][g][1][e]-w[t][g-1][1][e])/o-w[t][g-1][3][e]:0}for(let s=0;s&lt;x;++s)for(let r=0;r&lt;g;++r){let n=i(w[s][r][0],w[s+1][r][0]),o=i(w[s][r+1][0],w[s+1][r+1][0]),c=i(w[s][r][0],w[s][r+1][0]),x=i(w[s+1][r][0],w[s+1][r+1][0]),g=[[],[],[],[]];for(let t=0;t&lt;4;++t){(d=[])[0]=w[s][r][1][t],d[1]=w[s+1][r][1][t],d[2]=w[s][r+1][1][t],d[3]=w[s+1][r+1][1][t],d[4]=w[s][r][2][t]*n,d[5]=w[s+1][r][2][t]*n,d[6]=w[s][r+1][2][t]*o,d[7]=w[s+1][r+1][2][t]*o,d[8]=w[s][r][3][t]*c,d[9]=w[s+1][r][3][t]*x,d[10]=w[s][r+1][3][t]*c,d[11]=w[s+1][r+1][3][t]*x,d[12]=0,d[13]=0,d[14]=0,d[15]=0,u=f(d);for(let e=0;e&lt;9;++e){g[t][e]=[];for(let s=0;s&lt;9;++s)g[t][e][s]=p(u,e/8,s/8),g[t][e][s]&gt;255?g[t][e][s]=255:g[t][e][s]&lt;0&amp;&amp;(g[t][e][s]=0)}}h=[];for(let t=3*s,e=3*s+4;t&lt;e;++t)h.push(this.nodes[t].slice(3*r,3*r+4));l=y(h);for(let s=0;s&lt;8;++s)for(let r=0;r&lt;8;++r)(a=new m(l[s][r],[[[g[0][s][r],g[1][s][r],g[2][s][r],g[3][s][r]],[g[0][s][r+1],g[1][s][r+1],g[2][s][r+1],g[3][s][r+1]]],[[g[0][s+1][r],g[1][s+1][r],g[2][s+1][r],g[3][s+1][r]],[g[0][s+1][r+1],g[1][s+1][r+1],g[2][s+1][r+1],g[3][s+1][r+1]]]])).paint(t,e)}}}transform(t){if(t instanceof x)for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].add(t);else if(t instanceof g)for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].transform(t)}scale(t){for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].scale(t)}}document.querySelectorAll(&quot;rect,circle,ellipse,path,text&quot;).forEach((r,n)=&gt;{let o=r.getAttribute(&quot;id&quot;);o||(o=&quot;patchjs_shape&quot;+n,r.setAttribute(&quot;id&quot;,o));const i=r.style.fill.match(/^url\(\s*&quot;?\s*#([^\s&quot;]+)&quot;?\s*\)/),a=r.style.stroke.match(/^url\(\s*&quot;?\s*#([^\s&quot;]+)&quot;?\s*\)/);if(i&amp;&amp;i[1]){const a=document.getElementById(i[1]);if(a&amp;&amp;&quot;meshgradient&quot;===a.nodeName){const i=r.getBBox();let l=document.createElementNS(s,&quot;canvas&quot;);d(l,{width:i.width,height:i.height});const c=l.getContext(&quot;2d&quot;);let u=c.createImageData(i.width,i.height);const f=new b(a);&quot;objectBoundingBox&quot;===a.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;f.scale(new x(i.width,i.height));const p=a.getAttribute(&quot;gradientTransform&quot;);null!=p&amp;&amp;f.transform(h(p)),&quot;userSpaceOnUse&quot;===a.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;f.transform(new x(-i.x,-i.y)),f.paintMesh(u.data,l.width),c.putImageData(u,0,0);const y=document.createElementNS(t,&quot;image&quot;);d(y,{width:i.width,height:i.height,x:i.x,y:i.y});let g=l.toDataURL();y.setAttributeNS(e,&quot;xlink:href&quot;,g),r.parentNode.insertBefore(y,r),r.style.fill=&quot;none&quot;;const w=document.createElementNS(t,&quot;use&quot;);w.setAttributeNS(e,&quot;xlink:href&quot;,&quot;#&quot;+o);const m=&quot;patchjs_clip&quot;+n,M=document.createElementNS(t,&quot;clipPath&quot;);M.setAttribute(&quot;id&quot;,m),M.appendChild(w),r.parentElement.insertBefore(M,r),y.setAttribute(&quot;clip-path&quot;,&quot;url(#&quot;+m+&quot;)&quot;),u=null,l=null,g=null}}if(a&amp;&amp;a[1]){const o=document.getElementById(a[1]);if(o&amp;&amp;&quot;meshgradient&quot;===o.nodeName){const i=parseFloat(r.style.strokeWidth.slice(0,-2))*(parseFloat(r.style.strokeMiterlimit)||parseFloat(r.getAttribute(&quot;stroke-miterlimit&quot;))||1),a=r.getBBox(),l=Math.trunc(a.width+i),c=Math.trunc(a.height+i),u=Math.trunc(a.x-i/2),f=Math.trunc(a.y-i/2);let p=document.createElementNS(s,&quot;canvas&quot;);d(p,{width:l,height:c});const y=p.getContext(&quot;2d&quot;);let g=y.createImageData(l,c);const w=new b(o);&quot;objectBoundingBox&quot;===o.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;w.scale(new x(l,c));const m=o.getAttribute(&quot;gradientTransform&quot;);null!=m&amp;&amp;w.transform(h(m)),&quot;userSpaceOnUse&quot;===o.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;w.transform(new x(-u,-f)),w.paintMesh(g.data,p.width),y.putImageData(g,0,0);const M=document.createElementNS(t,&quot;image&quot;);d(M,{width:l,height:c,x:0,y:0});let S=p.toDataURL();M.setAttributeNS(e,&quot;xlink:href&quot;,S);const k=&quot;pattern_clip&quot;+n,A=document.createElementNS(t,&quot;pattern&quot;);d(A,{id:k,patternUnits:&quot;userSpaceOnUse&quot;,width:l,height:c,x:u,y:f}),A.appendChild(M),o.parentNode.appendChild(A),r.style.stroke=&quot;url(#&quot;+k+&quot;)&quot;,g=null,p=null,S=null}}})}();
</script><radialGradient
       xlink:href="#linearGradient1"
       id="radialGradient2"
       cx="1145.9915"
       cy="1176.9067"
       fx="1145.9915"
       fy="1176.9067"
       r="296.99146"
       gradientTransform="matrix(1,0,0,0.60239663,38.140299,-382.12246)"
       gradientUnits="userSpaceOnUse" /></defs><path
     id="path11244-48"
     style="fill:#dddddd;fill-opacity:1;stroke-width:4.859;filter:url(#filter50691)"
     d="m 890.33494,26.519706 c -4.02101,0.762144 -8.43038,5.071337 -8.17969,9.15625 0.2387,3.889455 4.9099,7.410881 8.79591,7.700356 2.78262,0.207282 5.7826,-2.0319 7.04586,-4.519898 1.3216,-2.602899 1.07338,-6.303259 -0.53195,-8.741418 -1.46376,-2.223147 -4.51493,-4.090977 -7.13013,-3.59529 z m -104.52735,0.283203 c -4.08365,0.220212 -9.03299,3.559714 -9.6266,7.605991 -0.4975,3.391189 2.782,6.993821 5.89714,8.423347 3.19717,1.467166 7.74642,1.139056 10.50095,-1.048869 2.43658,-1.935377 4.04654,-5.905385 3.00586,-8.837891 -1.28725,-3.627286 -5.93401,-6.349831 -9.77735,-6.142578 z m 72.26758,0.355469 c -3.72209,0.314987 -8.49418,0.412637 -10.65991,3.456118 -1.81143,2.545593 -1.71402,6.894388 0.19064,9.371004 1.87361,2.436243 5.80179,2.254606 8.86116,2.54774 3.79972,0.364071 8.1057,0.900799 11.40613,-1.016905 2.32553,-1.351241 4.74547,-3.941701 4.60237,-6.627489 -0.15117,-2.83734 -3.08634,-5.080449 -5.57849,-6.445202 -2.60645,-1.427344 -5.86081,-1.535853 -8.8219,-1.285266 z m -38.86719,0 c -3.72686,0.319418 -8.5066,0.415034 -10.67357,3.46393 -1.80851,2.544544 -1.70572,6.889408 0.19844,9.363192 1.87464,2.435443 5.80176,2.254938 8.86116,2.547717 3.80251,0.363894 8.12742,0.926267 11.41415,-1.020257 2.3594,-1.397329 4.77747,-4.098031 4.58068,-6.833098 -0.20194,-2.806712 -3.17284,-4.943345 -5.65609,-6.266924 -2.59286,-1.381999 -5.79733,-1.505461 -8.72477,-1.25456 z M 688.60056,46.240409 c -4.06905,0.174727 -8.98211,3.541897 -9.5918,7.568807 -0.5107,3.3731 2.71355,6.97572 5.79763,8.43416 3.13082,1.480539 7.57356,1.183973 10.35209,-0.883338 2.46481,-1.833896 4.31483,-5.641301 3.38935,-8.570801 -1.19588,-3.785414 -5.9811,-6.719137 -9.94727,-6.548828 z m 149.32813,0.332031 c -4.11788,0.06833 -9.10058,-0.266049 -12.08456,2.572522 -2.11961,2.016321 -3.42387,5.800957 -2.25353,8.482109 1.09862,2.516838 4.60736,3.218628 7.277,3.862415 5.04877,1.217517 10.68599,1.512558 15.57881,-0.228919 2.4711,-0.879527 5.57042,-2.328384 6.17173,-4.881486 0.6621,-2.811191 -1.3907,-6.085346 -3.68254,-7.842797 -2.95747,-2.267873 -7.28051,-2.025679 -11.00691,-1.963844 z m -116.69532,0.002 c -4.08509,0.07143 -9.02546,-0.256074 -11.98716,2.558427 -2.12455,2.018959 -3.44142,5.80731 -2.27085,8.494251 1.09704,2.518157 4.60873,3.218626 7.27896,3.862415 5.05073,1.217724 10.69345,1.5229 15.58469,-0.228825 2.47787,-0.887412 5.57934,-2.358592 6.17366,-4.922596 0.64955,-2.802252 -1.40579,-6.054453 -3.69229,-7.799855 -2.98333,-2.277326 -7.33439,-2.029431 -11.08701,-1.963817 z m 155.4961,0 c -4.0726,0.431388 -9.04809,-0.253286 -12.01424,2.570569 -2.11701,2.01545 -3.41125,5.790382 -2.25367,8.474365 1.06799,2.476257 4.49518,3.207744 7.11341,3.853766 5.07364,1.251872 10.73632,1.506267 15.67615,-0.19876 2.44389,-0.843532 5.49815,-2.208543 6.16497,-4.706445 0.73282,-2.745139 -1.1035,-6.053597 -3.29596,-7.860787 -2.69561,-2.221923 -6.78554,-1.776131 -10.26058,-2.133024 -0.37472,-0.03849 -0.75548,-0.03936 -1.13008,3.16e-4 z m 38.86328,0 c -4.08509,0.07163 -9.02547,-0.256078 -11.98717,2.558427 -2.12455,2.018959 -3.44129,5.807256 -2.27084,8.494251 1.09669,2.51766 4.60778,3.216889 7.27702,3.862255 5.01697,1.212998 10.6147,1.505605 15.48317,-0.208856 2.50153,-0.88093 5.65258,-2.321513 6.26735,-4.901389 0.66951,-2.809619 -1.39132,-6.086641 -3.68471,-7.842371 -2.97951,-2.281 -7.33301,-2.028099 -11.08482,-1.962317 z m 26.86662,2.570569 c -2.11701,2.01545 -3.41125,5.790382 -2.25367,8.474365 1.06799,2.476257 4.49514,3.207925 7.11341,3.853766 5.07687,1.252296 10.74648,1.515233 15.68584,-0.201059 2.45094,-0.851635 5.52116,-2.235364 6.16826,-4.748063 0.71496,-2.776184 -1.20118,-6.086453 -3.43337,-7.885253 -2.74754,-2.214091 -6.95208,-3.171226 -10.66046,-3.181851 -4.38261,-0.01256 -9.65386,0.86424 -12.62001,3.688095 z m 50.88338,-2.570569 c -4.05526,0.513351 -9.02966,-0.257096 -11.99303,2.558427 -2.12381,2.017854 -3.41815,5.794781 -2.2707,8.49027 1.03499,2.431309 4.37704,3.187007 6.93951,3.832163 5.11757,1.288455 10.83957,1.535541 15.83077,-0.178249 2.4521,-0.841945 5.5243,-2.202991 6.1907,-4.70847 0.7334,-2.757087 -1.1156,-6.092002 -3.3378,-7.881208 -2.976,-2.396205 -7.46129,-1.760882 -11.2657,-2.114886 -0.0156,-0.0014 -0.0313,-3.26e-4 -0.0469,0 -0.0156,3.26e-4 -0.0313,-1e-5 -0.0469,0.002 z m 38.86725,0 c -4.0922,0.07292 -9.0411,-0.250472 -12.0064,2.570569 -2.1168,2.013794 -3.4195,5.787008 -2.2598,8.468654 1.0794,2.495899 4.5422,3.220048 7.1837,3.865898 5.0827,1.242745 10.761,1.518314 15.6958,-0.221343 2.4433,-0.86133 5.5117,-2.270365 6.1219,-4.788139 0.6857,-2.829215 -1.3479,-6.154275 -3.6525,-7.932905 -2.97,-2.292215 -7.3316,-2.029575 -11.0827,-1.962734 z m -272.1817,0.002 c -4.09959,0.09629 -9.0799,-0.233965 -12.01861,2.626087 -2.09659,2.040473 -3.30971,5.854306 -2.10545,8.520574 1.11858,2.476573 4.58655,3.138892 7.23088,3.765125 5.06258,1.198927 10.71589,1.541707 15.60607,-0.234051 2.48871,-0.903719 5.61065,-2.416396 6.16813,-5.004753 0.61336,-2.847818 -1.57619,-6.079159 -3.91793,-7.811935 -2.97963,-2.204776 -7.25747,-1.948086 -10.96309,-1.861047 z m 39.74609,0.01758 c -3.70594,0.311292 -8.45416,0.39223 -10.62171,3.414246 -1.82893,2.549907 -1.7624,6.920828 0.14462,9.412875 1.86889,2.442226 5.8054,2.258438 8.86702,2.547741 3.83166,0.362066 8.18596,0.9069 11.49802,-1.053435 2.31213,-1.368496 4.68371,-4.001834 4.50658,-6.682756 -0.18725,-2.834062 -3.15202,-5.028401 -5.65206,-6.376282 -2.5917,-1.397302 -5.80842,-1.508844 -8.74247,-1.262389 z M 669.16502,65.675956 c -4.07818,0.167828 -8.99664,3.565183 -9.59927,7.602085 -0.50243,3.365632 2.72464,6.948869 5.80312,8.398989 3.13992,1.47906 7.58568,1.174823 10.37427,-0.891699 2.44324,-1.810599 4.29449,-5.564569 3.39258,-8.46875 -1.18432,-3.813562 -5.98085,-6.804818 -9.9707,-6.640625 z m 495.61728,0 c -4.0697,0.159938 -8.9801,3.542204 -9.5918,7.568807 -0.5116,3.367683 2.7028,6.966979 5.7803,8.427064 3.1309,1.485396 7.5681,1.184872 10.3598,-0.868192 2.4495,-1.801412 4.3274,-5.542946 3.436,-8.449945 -1.1738,-3.827929 -5.9835,-6.834965 -9.9843,-6.677734 z m -462.19541,0.355469 c -3.72823,0.317343 -8.51406,0.415604 -10.67532,3.47 -1.80658,2.553153 -1.68406,6.909433 0.23378,9.380104 1.89834,2.445545 5.85507,2.236068 8.93725,2.526851 3.73097,0.351992 7.94568,0.877402 11.19969,-0.981479 2.34414,-1.339108 4.82557,-3.89373 4.70694,-6.590789 -0.12576,-2.859222 -3.07742,-5.140891 -5.58412,-6.521985 -2.6016,-1.433382 -5.85858,-1.534624 -8.81822,-1.282702 z m 38.86914,0 c -3.71758,0.324313 -8.5059,0.39611 -10.65016,3.450236 -1.82153,2.594445 -1.66021,7.026339 0.31618,9.504842 1.98844,2.493609 6.07233,2.191001 9.25205,2.438718 3.72818,0.290445 7.9856,0.831968 11.15986,-1.144842 2.29035,-1.426346 4.54949,-4.17626 4.29316,-6.862236 -0.26721,-2.800034 -3.25329,-4.878257 -5.74772,-6.178029 -2.57407,-1.341269 -5.7318,-1.460943 -8.62337,-1.208689 z m 38.875,0 c -3.72818,0.317824 -8.51406,0.415604 -10.67532,3.47 -1.80658,2.553153 -1.68406,6.909433 0.23378,9.380104 1.89834,2.445545 5.85507,2.236068 8.93725,2.526851 3.73097,0.351992 7.94568,0.877402 11.19969,-0.981479 2.34414,-1.339108 4.82577,-3.893739 4.70694,-6.590789 -0.12605,-2.860879 -3.07993,-5.143544 -5.58838,-6.524926 -2.60054,-1.4321 -5.85589,-1.531933 -8.81396,-1.279761 z m 77.74414,0 c -3.72818,0.317824 -8.51406,0.415604 -10.67532,3.47 -1.80658,2.553153 -1.68406,6.909433 0.23378,9.380104 1.89834,2.445545 5.8551,2.235818 8.93725,2.526851 3.72835,0.35205 7.93676,0.872355 11.19208,-0.978981 2.33847,-1.329911 4.82367,-3.862349 4.71456,-6.550318 -0.11659,-2.872185 -3.07265,-5.177179 -5.58839,-6.567895 -2.59822,-1.436312 -5.85589,-1.531933 -8.81396,-1.279761 z m 38.87109,0 c -3.71491,0.312863 -8.49512,0.390859 -10.64255,3.438313 -1.82551,2.590607 -1.67708,7.019057 0.29099,9.503093 1.95976,2.473554 6.00065,2.188392 9.14589,2.446411 3.72427,0.30552 7.95034,0.825551 11.15693,-1.093126 2.28323,-1.366182 4.61163,-3.977285 4.44132,-6.632582 -0.18076,-2.818121 -3.09418,-5.029158 -5.57436,-6.379407 -2.60879,-1.420264 -5.85836,-1.531977 -8.81822,-1.282702 z m 116.61534,0 c -3.7182,0.324263 -8.5075,0.39565 -10.6522,3.450236 -1.8216,2.594395 -1.6602,7.02634 0.3162,9.504842 1.9884,2.493616 6.0723,2.191002 9.2521,2.438718 3.7282,0.290441 7.9856,0.831952 11.1598,-1.144842 2.2904,-1.426346 4.5493,-4.176232 4.2932,-6.862236 -0.2669,-2.799623 -3.2519,-4.878249 -5.7458,-6.178029 -2.5739,-1.341474 -5.7317,-1.46086 -8.6233,-1.208689 z m 38.873,0 c -3.7282,0.317343 -8.514,0.415606 -10.6753,3.47 -1.8066,2.553156 -1.6841,6.90949 0.2338,9.380104 1.8988,2.445982 5.8563,2.236561 8.9392,2.526851 3.7331,0.351516 7.9505,0.875809 11.2055,-0.985385 2.3414,-1.338774 4.8184,-3.89241 4.6992,-6.586883 -0.1265,-2.859207 -3.0775,-5.140891 -5.5842,-6.521985 -2.6016,-1.43337 -5.8586,-1.534623 -8.8182,-1.282702 z m 38.8711,0 c -3.7182,0.324268 -8.5074,0.395661 -10.6521,3.450236 -1.8216,2.594398 -1.6602,7.026339 0.3162,9.504842 1.9884,2.493596 6.0723,2.190999 9.252,2.438718 3.7282,0.290449 7.9856,0.831985 11.1599,-1.144842 2.2903,-1.426347 4.5492,-4.176249 4.2931,-6.862236 -0.2669,-2.7996 -3.2518,-4.878251 -5.7457,-6.178029 -2.574,-1.341498 -5.7318,-1.460867 -8.6234,-1.208689 z m 38.873,0 c -3.7282,0.317346 -8.514,0.415606 -10.6753,3.47 -1.8066,2.553156 -1.684,6.909437 0.2338,9.380104 1.8984,2.445554 5.8551,2.23607 8.9373,2.526851 3.7309,0.351985 7.9456,0.877378 11.1996,-0.981479 2.3442,-1.339108 4.8256,-3.893718 4.707,-6.590789 -0.1257,-2.859218 -3.0774,-5.140893 -5.5841,-6.521985 -2.6016,-1.433396 -5.8586,-1.534629 -8.8183,-1.282702 z m 194.3594,0 c -3.7149,0.312864 -8.4951,0.390869 -10.6425,3.438313 -1.8255,2.590609 -1.6771,7.019056 0.291,9.503093 1.9597,2.473533 6.0006,2.188389 9.1458,2.446411 3.7243,0.305528 7.9504,0.825565 11.157,-1.093126 2.2832,-1.366181 4.6116,-3.97729 4.4413,-6.632582 -0.1808,-2.818129 -3.0942,-5.029158 -5.5744,-6.379407 -2.6088,-1.420257 -5.8583,-1.531978 -8.8182,-1.282702 z m 116.6153,0 c -3.7181,0.323937 -8.5006,0.398744 -10.6522,3.448286 -1.819,2.578178 -1.6784,6.98257 0.2732,9.46187 1.9435,2.469019 5.9642,2.212562 9.0952,2.477375 3.7604,0.318047 8.0528,0.877331 11.2681,-1.098469 2.3223,-1.427087 4.6342,-4.187995 4.3848,-6.902344 -0.2573,-2.800527 -3.2519,-4.878249 -5.7458,-6.178029 -2.5739,-1.341474 -5.7317,-1.460619 -8.6233,-1.208689 z m 77.7441,0 c -3.7182,0.324268 -8.5074,0.395661 -10.6521,3.450236 -1.8216,2.594398 -1.6573,7.024 0.3162,9.504842 1.9653,2.470548 6.0052,2.18481 9.1521,2.435586 3.7606,0.29968 8.0563,0.85069 11.2598,-1.14171 2.2912,-1.425 4.5492,-4.176249 4.2931,-6.862236 -0.2669,-2.7996 -3.2518,-4.878251 -5.7457,-6.178029 -2.574,-1.341498 -5.7318,-1.460867 -8.6234,-1.208689 z m 38.873,0 c -3.7282,0.317346 -8.514,0.415606 -10.6753,3.47 -1.8066,2.553156 -1.684,6.909437 0.2338,9.380104 1.8984,2.445554 5.8551,2.23607 8.9373,2.526851 3.7309,0.351985 7.9456,0.877378 11.1996,-0.981479 2.3442,-1.339108 4.8256,-3.893718 4.707,-6.590789 -0.1257,-2.859218 -3.0774,-5.140893 -5.5841,-6.521985 -2.6016,-1.433396 -5.8586,-1.534629 -8.8183,-1.282702 z m 38.8711,0 c -3.7182,0.324211 -8.5074,0.395661 -10.6521,3.450236 -1.8216,2.594398 -1.6602,7.026339 0.3162,9.504842 1.9884,2.493596 6.0723,2.190999 9.252,2.438718 3.7282,0.290449 7.9856,0.831968 11.1599,-1.144842 2.2904,-1.426345 4.5495,-4.176253 4.2932,-6.862236 -0.2672,-2.80003 -3.2533,-4.878219 -5.7477,-6.178029 -2.5735,-1.341024 -5.7305,-1.460769 -8.6215,-1.208689 z m 38.8731,0 c -3.7285,0.313581 -8.514,0.415617 -10.6753,3.47 -1.8066,2.553145 -1.6841,6.909427 0.2337,9.380104 1.8983,2.445564 5.8551,2.236069 8.9373,2.526851 3.731,0.351989 7.9457,0.87741 11.1997,-0.981479 2.3441,-1.339109 4.818,-3.893416 4.7069,-6.590789 -0.1166,-2.832227 -3.0169,-5.113221 -5.4944,-6.490575 -2.6233,-1.458407 -5.917,-1.565653 -8.9079,-1.314112 z m -816.30867,0 c -3.71432,0.310583 -8.48176,0.397869 -10.64081,3.436157 -1.82111,2.562734 -1.71409,6.946904 0.2152,9.429218 1.91459,2.463395 5.90787,2.235503 9.0151,2.516661 3.74054,0.338463 7.96591,0.842916 11.22007,-1.03236 2.29263,-1.321177 4.70499,-3.830989 4.59278,-6.474676 -0.12179,-2.869307 -3.052,-5.184493 -5.56228,-6.579576 -2.60316,-1.446705 -5.87226,-1.543584 -8.84006,-1.295424 z m 116.61719,0 c -3.70348,0.306546 -8.45278,0.385803 -10.61463,3.408405 -1.83154,2.560774 -1.74916,6.950182 0.17325,9.443457 1.88947,2.450551 5.85213,2.237929 8.93318,2.525093 3.76329,0.350751 8.01521,0.866668 11.2933,-1.014688 2.3017,-1.320989 4.72599,-3.835742 4.61529,-6.487267 -0.11979,-2.869393 -3.05203,-5.184453 -5.56229,-6.579576 -2.60258,-1.446431 -5.87074,-1.54104 -8.8381,-1.295424 z m 38.87109,0 c -3.71603,0.314308 -8.49815,0.389961 -10.64646,3.438313 -1.82565,2.590509 -1.67708,7.019057 0.29099,9.503093 1.95976,2.473554 6.00062,2.188658 9.14589,2.446411 3.72687,0.305416 7.96185,0.834552 11.16446,-1.095771 2.2965,-1.384181 4.62672,-4.037521 4.43379,-6.711968 -0.20278,-2.810958 -3.14216,-4.978087 -5.62441,-6.312643 -2.59987,-1.397796 -5.82295,-1.516216 -8.76426,-1.267435 z m 388.72079,0 c -3.7035,0.306544 -8.4528,0.385781 -10.6147,3.408405 -1.8315,2.560777 -1.7491,6.950187 0.1733,9.443457 1.8895,2.450551 5.8521,2.237929 8.9332,2.525093 3.7633,0.35075 8.0152,0.866667 11.2933,-1.014688 2.3017,-1.320989 4.726,-3.83574 4.6153,-6.487267 -0.1198,-2.869395 -3.052,-5.184453 -5.5623,-6.579576 -2.6026,-1.44643 -5.8707,-1.541037 -8.8381,-1.295424 z m 38.8711,0 c -3.716,0.314305 -8.4982,0.38995 -10.6465,3.438313 -1.8256,2.590509 -1.6771,7.019059 0.291,9.503093 1.9598,2.473555 6.0007,2.188388 9.1459,2.446411 3.7255,0.305627 7.9588,0.835532 11.1607,-1.09347 2.2979,-1.384405 4.6302,-4.038482 4.4375,-6.714269 -0.2025,-2.810979 -3.1422,-4.978086 -5.6244,-6.312643 -2.5999,-1.397789 -5.8229,-1.516211 -8.7642,-1.267435 z m 77.7461,0 c -3.7299,0.319289 -8.5186,0.414255 -10.6812,3.47 -1.8068,2.553009 -1.6841,6.909507 0.2338,9.380104 1.8988,2.445953 5.856,2.240709 8.9392,2.526677 3.7719,0.349842 8.0586,0.903607 11.3178,-1.027024 2.3513,-1.392854 4.7637,-4.078557 4.5732,-6.804836 -0.1961,-2.806662 -3.156,-4.954998 -5.6365,-6.282687 -2.597,-1.390042 -5.8114,-1.513467 -8.7463,-1.262234 z M 1026.5186,89.44391 c -1.6945,2.662031 -1.4826,7.004221 0.5075,9.453101 1.9576,2.408889 5.8968,2.324159 9.0001,2.390339 3.408,0.0727 7.5876,0.22046 9.9865,-2.201239 2.1119,-2.13189 3.0874,-6.0734 1.8547,-8.809318 -1.5312,-3.398268 -6.0035,-5.275329 -9.7225,-5.523324 -4.1697,-0.278044 -9.3823,1.165109 -11.6263,4.690441 z m 200.0586,-3.99842 c -4.1119,0.07134 -9.1102,-0.265914 -12.0608,2.598823 -2.1191,2.057455 -3.3318,5.908898 -2.1215,8.603158 1.0859,2.4172 4.4576,3.08511 7.0343,3.703489 5.0924,1.22211 10.7652,1.5131 15.7096,-0.21289 2.4504,-0.855369 5.5311,-2.244389 6.1598,-4.762479 0.7023,-2.81277 -1.2868,-6.146444 -3.5726,-7.929702 -2.9769,-2.322397 -7.3738,-2.065891 -11.1488,-2.000399 z m -38.9531,0.002 c -4.0917,0.09176 -9.059,-0.238872 -11.9976,2.609833 -2.1043,2.039957 -3.3348,5.855408 -2.1348,8.529298 1.1123,2.47849 4.5788,3.14896 7.2218,3.777049 5.0686,1.2045 10.73,1.53831 15.6274,-0.23845 2.4825,-0.900649 5.5943,-2.406239 6.1564,-4.986599 0.6188,-2.84079 -1.5476,-6.07626 -3.8804,-7.811498 -2.9827,-2.218697 -7.2763,-1.962976 -10.9928,-1.879633 z m 77.7441,0 c -4.089,0.08435 -9.0422,-0.229615 -11.9899,2.605563 -2.0998,2.019604 -3.3542,5.792778 -2.187,8.462158 1.0811,2.47251 4.5085,3.1933 7.1297,3.834849 5.0752,1.24221 10.7358,1.49815 15.6737,-0.21009 2.439,-0.843739 5.5228,-2.199039 6.1508,-4.702249 0.7172,-2.85883 -1.3268,-6.246505 -3.6579,-8.050164 -2.9757,-2.30242 -7.3577,-2.01766 -11.1194,-1.940067 z m 26.9265,2.575734 c -2.1629,2.017548 -3.3746,5.905437 -2.1659,8.604997 1.0942,2.44377 4.5122,3.10328 7.1164,3.725519 5.0537,1.20752 10.6729,1.48342 15.5866,-0.20578 2.4434,-0.839949 5.4991,-2.191139 6.1751,-4.684849 0.7421,-2.73749 -1.0241,-6.108803 -3.2534,-7.862329 -2.9905,-2.35231 -7.4738,-1.800089 -11.2784,-1.757265 -4.1243,0.04642 -9.1643,-0.633763 -12.1804,2.179707 z M 1149.6123,85.46702 c -3.7116,0.325752 -8.4935,0.386616 -10.6369,3.434198 -1.8278,2.598863 -1.6697,7.042253 0.3108,9.526733 1.985,2.490089 6.0641,2.180149 9.2386,2.432009 3.6959,0.29323 7.9131,0.84738 11.068,-1.099969 2.3282,-1.43709 4.6505,-4.21423 4.3867,-6.9375 -0.2731,-2.819508 -3.3174,-4.880673 -5.8358,-6.17749 -2.5523,-1.314248 -5.6716,-1.428974 -8.5314,-1.177981 z m 194.3594,0 c -3.7156,0.32852 -8.5064,0.390999 -10.6465,3.446122 -1.8242,2.604129 -1.6488,7.051589 0.3399,9.532389 1.998,2.492469 6.0883,2.173709 9.2735,2.417179 3.7124,0.28377 7.9682,0.85416 11.1112,-1.141789 2.3253,-1.47667 4.5757,-4.34451 4.2602,-7.08095 -0.3197,-2.77254 -3.3453,-4.744386 -5.836,-6.003657 -2.553,-1.290793 -5.6526,-1.42125 -8.5023,-1.169294 z m 38.875,0 c -3.7034,0.309707 -8.448,0.392407 -10.6139,3.412293 -1.8293,2.550468 -1.7626,6.922098 0.1446,9.414828 1.8667,2.439819 5.7997,2.248989 8.8573,2.546529 3.7622,0.3661 8.0139,0.89814 11.298,-0.973409 2.3482,-1.33823 4.8346,-3.89534 4.7164,-6.59555 -0.1252,-2.860917 -3.0799,-5.143548 -5.5884,-6.52493 -2.6006,-1.432104 -5.8555,-1.527173 -8.814,-1.279761 z m 38.8672,0 c -3.715,0.328576 -8.5012,0.394016 -10.6445,3.446122 -1.8229,2.595919 -1.6605,7.030239 0.3164,9.510909 1.9833,2.488679 6.0576,2.189969 9.2302,2.438749 3.7339,0.29279 8.0157,0.86501 11.178,-1.141879 2.3257,-1.47598 4.5757,-4.34453 4.2601,-7.08095 -0.3197,-2.772485 -3.3454,-4.744222 -5.836,-6.003441 -2.5536,-1.291051 -5.6539,-1.421608 -8.5042,-1.16951 z m 38.877,0 c -3.7034,0.309291 -8.448,0.392407 -10.6139,3.412293 -1.8293,2.550468 -1.7627,6.922168 0.1446,9.414828 1.8672,2.440219 5.8005,2.254269 8.8592,2.546359 3.8084,0.36368 8.1323,0.91159 11.4314,-1.025489 2.3315,-1.36894 4.7313,-4.00269 4.5693,-6.70151 -0.1687,-2.811714 -3.0872,-5.015849 -5.5612,-6.362461 -2.6122,-1.421821 -5.8656,-1.53154 -8.8294,-1.28402 z m 116.6132,0 c -3.712,0.321155 -8.4977,0.383637 -10.6369,3.434198 -1.8285,2.607523 -1.6523,7.062063 0.3381,9.548223 1.9832,2.477159 6.0459,2.161929 9.2094,2.410489 3.6981,0.29056 7.9186,0.84876 11.0738,-1.101899 2.3279,-1.43918 4.6375,-4.22073 4.3789,-6.94531 -0.2644,-2.785914 -3.2506,-4.841765 -5.7337,-6.132373 -2.5775,-1.339673 -5.7356,-1.463714 -8.6296,-1.213328 z m 38.8946,0 c -3.7157,0.32387 -8.5034,0.379097 -10.6513,3.428407 -1.8289,2.596444 -1.669,7.035334 0.3056,9.522764 1.9603,2.469389 5.9957,2.187199 9.1384,2.440259 3.7536,0.30225 8.0426,0.85798 11.2404,-1.130579 2.3041,-1.43279 4.5811,-4.2035 4.3126,-6.90343 -0.2803,-2.818835 -3.3158,-4.88181 -5.8339,-6.17944 -2.5461,-1.31209 -5.6583,-1.426696 -8.5118,-1.177981 z m 38.8496,0 c -3.7119,0.322304 -8.4935,0.386628 -10.6369,3.434198 -1.8278,2.598853 -1.6698,7.042243 0.3107,9.526733 1.985,2.490119 6.0642,2.180369 9.2387,2.432009 3.6973,0.29307 7.9139,0.84294 11.0719,-1.101929 2.3217,-1.42982 4.6363,-4.18907 4.3867,-6.90429 -0.2576,-2.801869 -3.2543,-4.88004 -5.7497,-6.179986 -2.5735,-1.340663 -5.7305,-1.457756 -8.6214,-1.206735 z m 38.8711,0 c -3.7156,0.32841 -8.5015,0.394413 -10.6465,3.446122 -1.8229,2.593479 -1.6649,7.024249 0.3086,9.505049 1.9762,2.484189 6.0404,2.190819 9.2048,2.441399 3.7446,0.29652 8.0391,0.87312 11.2112,-1.138669 2.3262,-1.4753 4.5762,-4.34456 4.2602,-7.08095 -0.3203,-2.773393 -3.3482,-4.744337 -5.8399,-6.003679 -2.552,-1.289863 -5.65,-1.421029 -8.4984,-1.169272 z m -1049.53329,0 c -3.71302,0.309212 -8.4712,0.39794 -10.63886,3.428345 -1.82296,2.548516 -1.74463,6.912056 0.16177,9.398776 1.86943,2.438489 5.80056,2.253449 8.85919,2.546379 3.80233,0.36416 8.10118,0.88398 11.41392,-1.017629 2.29793,-1.31908 4.71407,-3.83361 4.60242,-6.48087 -0.12102,-2.869337 -3.05205,-5.184414 -5.56229,-6.579577 -2.60199,-1.44616 -5.86955,-1.542476 -8.83615,-1.295424 z m 38.86914,0 c -3.70639,0.307711 -8.45788,0.391388 -10.62149,3.416413 -1.82815,2.555998 -1.7488,6.935888 0.16815,9.425978 1.88897,2.453739 5.85385,2.247789 8.93704,2.535919 3.77036,0.35235 8.03123,0.86474 11.31427,-1.022439 2.29714,-1.32046 4.71407,-3.83361 4.60242,-6.48087 -0.12102,-2.869337 -3.05203,-5.184454 -5.56229,-6.579577 -2.60258,-1.446431 -5.8708,-1.541775 -8.8381,-1.295424 z m 388.72275,0 c -3.713,0.309209 -8.4712,0.397927 -10.6389,3.428345 -1.823,2.548516 -1.7446,6.912056 0.1618,9.398776 1.8694,2.438489 5.8006,2.253429 8.8592,2.546359 3.8023,0.36415 8.1012,0.88399 11.4139,-1.017609 2.2979,-1.31908 4.7141,-3.83362 4.6024,-6.48087 -0.121,-2.869347 -3.0521,-5.184413 -5.5623,-6.579577 -2.602,-1.446152 -5.8695,-1.542472 -8.8361,-1.295424 z m 38.8691,0 c -3.7064,0.307953 -8.4585,0.390918 -10.6215,3.416413 -1.8283,2.557408 -1.7463,6.939238 0.1723,9.429658 1.8888,2.451759 5.8513,2.244629 8.9329,2.532209 3.7704,0.35186 8.0313,0.86477 11.3143,-1.022409 2.2971,-1.32046 4.7139,-3.83361 4.6024,-6.48087 -0.1209,-2.869547 -3.0515,-5.185492 -5.5619,-6.580698 -2.6027,-1.446453 -5.8711,-1.540853 -8.8385,-1.294303 z m 388.7227,0 c -3.713,0.309209 -8.4712,0.397927 -10.6389,3.428345 -1.823,2.548516 -1.7446,6.912056 0.1618,9.398776 1.8694,2.438489 5.8006,2.253429 8.8592,2.546359 3.8023,0.36415 8.1012,0.88399 11.4139,-1.017609 2.2979,-1.31908 4.7141,-3.83362 4.6024,-6.48087 -0.121,-2.869347 -3.0521,-5.184413 -5.5623,-6.579577 -2.602,-1.446152 -5.8695,-1.542472 -8.8361,-1.295424 z m 38.8691,0 c -3.7064,0.307953 -8.4585,0.390918 -10.6215,3.416413 -1.8283,2.557408 -1.7463,6.939238 0.1723,9.429658 1.8888,2.451759 5.8513,2.244629 8.9329,2.532209 3.7704,0.35186 8.0313,0.86477 11.3143,-1.022409 2.2971,-1.32046 4.7139,-3.83361 4.6024,-6.48087 -0.1209,-2.869547 -3.0515,-5.185492 -5.5619,-6.580698 -2.6027,-1.446453 -5.8711,-1.540853 -8.8385,-1.294303 z m -252.6719,19.43554 c -3.7221,0.31477 -8.4942,0.41263 -10.6599,3.45612 -1.8114,2.5456 -1.714,6.89439 0.1907,9.37101 1.8736,2.43622 5.8017,2.25459 8.8611,2.54774 3.7972,0.36384 8.0988,0.8976 11.3986,-1.01617 2.3261,-1.34904 4.7519,-3.93317 4.6119,-6.61846 -0.1481,-2.83959 -3.0849,-5.08691 -5.5783,-6.45363 -2.6066,-1.42874 -5.8622,-1.5371 -8.8241,-1.28661 z m 427.5918,0 c -3.7221,0.31477 -8.4942,0.41264 -10.6599,3.45612 -1.8114,2.54559 -1.7141,6.89439 0.1906,9.37101 1.8736,2.43625 5.8018,2.2546 8.8612,2.54774 3.7972,0.36384 8.0988,0.8976 11.3986,-1.01617 2.3261,-1.34904 4.7519,-3.93317 4.6119,-6.61846 -0.1481,-2.83959 -3.0849,-5.08691 -5.5783,-6.45363 -2.6066,-1.42874 -5.8622,-1.5371 -8.8241,-1.28661 z m -1088.41019,0 c -3.71633,0.31609 -8.49576,0.39496 -10.64667,3.44202 -1.82218,2.58136 -1.6816,6.99227 0.27258,9.47521 1.93617,2.46006 5.94275,2.19708 9.06155,2.46863 3.70278,0.32239 7.90661,0.86941 11.10292,-1.02745 2.35752,-1.39908 4.7819,-4.09062 4.58853,-6.8252 -0.1986,-2.80853 -3.16836,-4.95089 -5.65214,-6.27683 -2.59261,-1.38404 -5.79843,-1.50545 -8.72677,-1.25638 z m 38.87305,0 c -3.7044,0.31242 -8.45036,0.39197 -10.6178,3.4123 -1.82991,2.54998 -1.76595,6.92171 0.14071,9.41483 1.86703,2.44129 5.80177,2.25475 8.86116,2.54774 3.80051,0.36396 8.12724,0.93389 11.40834,-1.01821 2.37228,-1.4114 4.79186,-4.14522 4.58259,-6.89767 -0.21198,-2.7881 -3.1747,-4.89478 -5.64492,-6.20491 -2.59722,-1.37749 -5.80058,-1.50115 -8.73008,-1.25408 z m 505.33404,0 c -3.7038,0.312 -8.4488,0.39243 -10.6158,3.4123 -1.8298,2.55003 -1.766,6.92171 0.1407,9.41483 1.867,2.44128 5.8017,2.25475 8.8611,2.54774 3.8005,0.36397 8.1273,0.9339 11.4084,-1.01821 2.3723,-1.4114 4.7927,-4.14528 4.5826,-6.89767 -0.2129,-2.78874 -3.1789,-4.89308 -5.65,-6.20312 -2.5966,-1.37661 -5.7984,-1.50257 -8.727,-1.25587 z m 38.873,0 c -3.6965,0.30885 -8.4312,0.38214 -10.5984,3.39255 -1.8376,2.55248 -1.785,6.93451 0.1233,9.43458 1.8647,2.44305 5.8018,2.25459 8.8612,2.54776 3.7991,0.36405 8.1181,0.92431 11.4043,-1.01648 2.3585,-1.39289 4.781,-4.083 4.5905,-6.81544 -0.1958,-2.80936 -3.1628,-4.95688 -5.6463,-6.28464 -2.5941,-1.38689 -5.8032,-1.50325 -8.7346,-1.25833 z m 38.8731,0 c -3.7283,0.30966 -8.5081,0.4146 -10.6755,3.46393 -1.8086,2.54449 -1.7058,6.88941 0.1984,9.3632 1.8746,2.43545 5.8018,2.25478 8.8612,2.54771 3.8017,0.36399 8.1,0.88279 11.4119,-1.01896 2.2982,-1.31966 4.7069,-3.83475 4.6024,-6.48283 -0.1121,-2.83979 -2.9897,-5.15088 -5.4683,-6.54143 -2.6248,-1.47256 -5.9308,-1.58073 -8.9301,-1.33162 z m 77.7441,0 c -3.7283,0.30966 -8.5087,0.41413 -10.6755,3.46393 -1.8084,2.54538 -1.7027,6.8912 0.2025,9.36495 1.8748,2.43428 5.8005,2.25335 8.8591,2.54599 3.8011,0.36368 8.0986,0.88248 11.41,-1.01899 2.2982,-1.31968 4.707,-3.83476 4.6024,-6.48283 -0.1121,-2.83981 -2.9898,-5.15088 -5.4684,-6.54143 -2.6248,-1.47255 -5.9308,-1.58073 -8.9301,-1.33162 z m 349.8477,0 c -3.728,0.31383 -8.5081,0.4146 -10.6755,3.46393 -1.8086,2.54449 -1.7057,6.88941 0.1984,9.3632 1.8746,2.43546 5.8018,2.25481 8.8612,2.54774 3.8017,0.364 8.1083,0.89726 11.4119,-1.01899 2.3202,-1.34584 4.7377,-3.92323 4.6005,-6.60197 -0.1453,-2.83656 -3.0717,-5.08783 -5.5604,-6.45653 -2.6085,-1.43456 -5.8696,-1.54711 -8.8361,-1.29738 z M 367.92087,123.98455 c -4.06017,0.18555 -8.96896,3.5081 -9.59501,7.52401 -0.52567,3.372 2.66557,7.01232 5.75126,8.47013 3.18983,1.50702 7.74153,1.18112 10.53936,-0.96789 2.43508,-1.87039 4.15214,-5.73306 3.17939,-8.6454 -1.24158,-3.71719 -5.96003,-6.55976 -9.875,-6.38085 z m -35.32812,0.33203 c -4.11788,0.0683 -9.09874,-0.26411 -12.08456,2.57252 -2.11828,2.01244 -3.42707,5.78927 -2.26174,8.46865 1.09613,2.52027 4.60657,3.2275 7.27745,3.87534 5.01726,1.21696 10.61694,1.50657 15.48682,-0.20753 2.50288,-0.88096 5.6558,-2.32136 6.27148,-4.90234 0.67014,-2.80929 -1.39069,-6.08535 -3.68253,-7.8428 -2.95747,-2.26788 -7.28052,-2.02568 -11.00692,-1.96384 z m -38.95117,0.002 c -4.11425,0.0748 -9.09561,-0.2402 -12.06635,2.60715 -2.09707,2.00997 -3.36651,5.77187 -2.19988,8.43207 1.1045,2.51853 4.61044,3.22846 7.2833,3.87555 5.03244,1.21834 10.65447,1.5211 15.53193,-0.21676 2.49465,-0.88886 5.61874,-2.3593 6.22432,-4.9374 0.65482,-2.78775 -1.37732,-6.03443 -3.64963,-7.77711 -2.98866,-2.29206 -7.35793,-2.05193 -11.12369,-1.9835 z m 310.97656,0 c -4.09219,0.0728 -9.04112,-0.25048 -12.00643,2.57057 -2.11677,2.01379 -3.42527,5.78952 -2.25979,8.46865 1.09636,2.52024 4.60599,3.22994 7.27741,3.87582 5.05249,1.22157 10.69759,1.51652 15.59247,-0.23277 2.47454,-0.88433 5.57497,-2.34577 6.17173,-4.90493 0.65403,-2.80476 -1.40031,-6.06433 -3.68862,-7.81307 -2.98206,-2.27891 -7.33422,-2.031 -11.08677,-1.96427 z m 39.66797,0.0195 c -3.73153,0.31975 -8.5178,0.4195 -10.68508,3.47391 -1.80463,2.54331 -1.69568,6.88316 0.20799,9.35321 1.87727,2.43579 5.8054,2.25844 8.86702,2.54774 3.83166,0.36207 8.19445,0.92119 11.49802,-1.05343 2.32912,-1.39217 4.69324,-4.08216 4.49291,-6.78823 -0.20756,-2.80382 -3.16062,-4.94601 -5.64016,-6.2713 -2.5962,-1.38764 -5.80767,-1.51323 -8.7407,-1.2619 z m 1049.54499,0 c -3.7055,0.30638 -8.4519,0.39151 -10.6198,3.41229 -1.83,2.54993 -1.7662,6.92187 0.1407,9.41483 1.8684,2.44266 5.8062,2.25089 8.8671,2.54788 3.7629,0.36509 8.0091,0.88369 11.2993,-0.97821 2.3277,-1.31722 4.8058,-3.82358 4.7092,-6.4964 -0.1039,-2.87381 -3.0428,-5.20074 -5.5545,-6.60106 -2.6019,-1.45062 -5.8731,-1.5448 -8.842,-1.29933 z m 38.8691,0 c -3.7201,0.32402 -8.5179,0.39001 -10.6582,3.45003 -1.8228,2.6061 -1.6361,7.05329 0.3535,9.53435 1.986,2.47652 6.048,2.16638 9.213,2.41171 3.7135,0.28785 7.9432,0.81985 11.1166,-1.13005 2.2899,-1.40703 4.586,-4.11006 4.3521,-6.78752 -0.2474,-2.8322 -3.2606,-4.953 -5.7786,-6.273 -2.5633,-1.34377 -5.7151,-1.45665 -8.5984,-1.20552 z m 15.1621,19.08203 c -4.0677,0.13349 -8.9699,3.53471 -9.5898,7.55709 -0.5173,3.3567 2.6737,6.94786 5.7329,8.42313 3.0849,1.48767 7.4497,1.21239 10.2461,-0.7649 2.4725,-1.74822 4.4867,-5.40299 3.6577,-8.31542 -1.1122,-3.90748 -5.9864,-7.03315 -10.0469,-6.8999 z m -1472.86721,0.35547 c -3.72818,0.31782 -8.51405,0.41561 -10.67531,3.47 -1.80659,2.55315 -1.68407,6.90944 0.23377,9.38011 1.89834,2.44555 5.85508,2.23607 8.93726,2.52685 3.73097,0.35199 7.94567,0.8774 11.19968,-0.98148 2.34414,-1.33911 4.82578,-3.89374 4.70695,-6.59079 -0.12605,-2.86088 -3.07994,-5.14355 -5.58839,-6.52493 -2.60054,-1.4321 -5.85589,-1.53193 -8.81396,-1.27976 z m 38.86914,0 c -3.71758,0.32431 -8.5059,0.39611 -10.65016,3.45024 -1.82153,2.59444 -1.66021,7.02634 0.31618,9.50484 1.98844,2.49361 6.07233,2.191 9.25205,2.43872 3.72818,0.29045 7.98561,0.83197 11.15987,-1.14484 2.29035,-1.42635 4.54949,-4.17626 4.29316,-6.86224 -0.26721,-2.80003 -3.25329,-4.87826 -5.74772,-6.17803 -2.57407,-1.34127 -5.7318,-1.46094 -8.62338,-1.20869 z m 38.875,0 c -3.72818,0.31782 -8.51405,0.41561 -10.67531,3.47 -1.80659,2.55315 -1.68407,6.90944 0.23377,9.38011 1.89834,2.44555 5.85508,2.23607 8.93726,2.52685 3.73097,0.35199 7.94567,0.8774 11.19968,-0.98148 2.34414,-1.33911 4.82578,-3.89374 4.70695,-6.59079 -0.12605,-2.86088 -3.07994,-5.14355 -5.58839,-6.52493 -2.60054,-1.4321 -5.85589,-1.53193 -8.81396,-1.27976 z m 233.23047,0 c -3.7182,0.32427 -8.50741,0.39567 -10.65211,3.45024 -1.8216,2.59439 -1.66022,7.02634 0.31617,9.50484 1.98844,2.49361 6.07233,2.191 9.25205,2.43872 3.72818,0.29045 7.98561,0.83197 11.15987,-1.14484 2.29035,-1.42635 4.54926,-4.17624 4.29316,-6.86224 -0.26693,-2.79961 -3.25183,-4.87825 -5.74576,-6.17803 -2.57396,-1.34149 -5.7318,-1.46087 -8.62338,-1.20869 z m 38.87305,0 c -3.72823,0.31734 -8.51406,0.4156 -10.67532,3.47 -1.80658,2.55315 -1.68406,6.90944 0.23378,9.38011 1.89834,2.44554 5.85507,2.23607 8.93725,2.52685 3.73097,0.35199 7.94568,0.8774 11.19969,-0.98148 2.34414,-1.33911 4.82556,-3.89373 4.70694,-6.59079 -0.12576,-2.85922 -3.07742,-5.1409 -5.58412,-6.52199 -2.6016,-1.43338 -5.85858,-1.53462 -8.81822,-1.2827 z m 1088.41605,0 c -3.7282,0.31783 -8.514,0.41561 -10.6753,3.47 -1.8066,2.55316 -1.684,6.90944 0.2338,9.38011 1.8983,2.44553 5.8551,2.23582 8.9372,2.52685 3.7284,0.35205 7.9368,0.87235 11.1921,-0.97898 2.3385,-1.32991 4.8237,-3.86234 4.7146,-6.55032 -0.1166,-2.87219 -3.0727,-5.17718 -5.5884,-6.5679 -2.5982,-1.43632 -5.8559,-1.53193 -8.814,-1.27976 z m -1321.64457,0 c -3.71432,0.31058 -8.48177,0.39787 -10.64081,3.43616 -1.82111,2.56274 -1.71395,6.9468 0.2152,9.42922 1.91368,2.46251 5.90523,2.23539 9.0112,2.51666 3.7418,0.33885 7.96866,0.84351 11.22397,-1.03236 2.29266,-1.32114 4.705,-3.83099 4.59279,-6.47468 -0.12179,-2.86931 -3.05201,-5.18449 -5.56229,-6.57957 -2.60317,-1.4467 -5.87226,-1.54359 -8.84006,-1.29543 z m 202.45311,23.41249 c -1.7367,2.63469 -1.48291,7.00443 0.50745,9.45314 1.96073,2.41225 5.90572,2.33526 9.01381,2.39212 3.44337,0.063 7.69855,0.20815 10.07642,-2.28314 2.10042,-2.2006 2.97143,-6.26943 1.60013,-8.98493 -1.55704,-3.0833 -6.00045,-5.10607 -9.6734,-5.31263 -4.14657,-0.23319 -9.37991,1.48208 -11.52441,4.73544 z m -310.97656,0 c -1.7357,2.62579 -1.4968,6.98376 0.48341,9.43043 1.95891,2.42036 5.91144,2.34409 9.02445,2.41213 3.41358,0.0746 7.61662,0.23291 10.00192,-2.21013 2.12384,-2.17525 3.09345,-6.22077 1.75433,-8.95009 -1.53862,-3.13594 -6.02263,-5.18873 -9.72559,-5.40889 -4.14903,-0.24668 -9.3888,1.47444 -11.53852,4.72655 z m -28.39061,-3.99647 c -4.06907,0.0766 -8.99297,-0.24227 -11.93612,2.56861 -2.11934,2.02409 -3.41266,5.8141 -2.24263,8.50102 1.08118,2.4829 4.53186,3.19164 7.16263,3.83414 5.03387,1.22939 10.63816,1.47476 15.54427,-0.193 2.4581,-0.83559 5.58064,-2.15697 6.23357,-4.66976 0.74119,-2.85246 -1.27742,-6.26162 -3.60049,-8.07524 -2.97769,-2.32468 -7.38423,-2.03684 -11.16123,-1.96577 z m 196.04104,-1.68166 c -3.03225,-0.31081 -6.28628,0.066 -9.04112,1.37059 -2.68779,1.27286 -5.56153,3.19925 -6.62379,5.97701 -0.80392,2.10223 -0.66023,4.93281 0.71554,6.71408 1.57925,2.04472 4.68719,2.41056 7.24937,2.7424 5.95423,0.77115 12.77461,1.23218 17.91443,-1.87101 1.56144,-0.94273 2.97215,-2.72855 3.03755,-4.55134 0.0953,-2.65618 -1.91433,-5.21127 -3.93969,-6.9324 -2.52243,-2.14354 -6.01935,-3.1118 -9.31229,-3.44933 z m 64.04019,4.30419 c -2.10235,2.05049 -3.3031,5.8828 -2.09206,8.5582 1.10759,2.44687 4.53078,3.10546 7.14364,3.72747 5.04902,1.20195 10.66502,1.48933 15.56892,-0.21038 2.45401,-0.85057 5.52126,-2.22784 6.18499,-4.73884 0.72366,-2.73773 -1.11751,-6.03144 -3.30962,-7.82406 -2.77081,-2.26586 -7.05104,-3.2353 -10.81475,-3.24518 -4.40635,-0.0116 -9.74481,0.86892 -12.68112,3.73279 z m 38.94095,-0.0448 c -2.12582,2.05459 -3.37372,5.90359 -2.16405,8.6012 1.09886,2.45051 4.52964,3.10542 7.14179,3.72928 5.01589,1.19794 10.59018,1.47751 15.4697,-0.19118 2.48348,-0.8493 5.60419,-2.20928 6.28429,-4.74433 0.73561,-2.74196 -1.1165,-6.04976 -3.31594,-7.84474 -2.79494,-2.28096 -7.06103,-3.22232 -10.82767,-3.23276 -4.37189,-0.0121 -9.65746,0.85006 -12.58812,3.68253 z m -142.67843,-2.55818 c -3.71561,0.32847 -8.50152,0.39442 -10.64647,3.44612 -1.82288,2.59348 -1.66528,7.02455 0.30858,9.50505 1.97725,2.48476 6.04317,2.18906 9.20874,2.43947 3.74323,0.2961 8.03617,0.87411 11.20728,-1.13674 2.32629,-1.47514 4.57574,-4.34451 4.26016,-7.08094 -0.31974,-2.7725 -3.34543,-4.74419 -5.83607,-6.00345 -2.553,-1.29079 -5.65257,-1.42143 -8.50222,-1.16951 z m 1321.65048,0 c -3.703,0.31444 -8.448,0.3924 -10.6139,3.41229 -1.8293,2.55047 -1.7627,6.92217 0.1446,9.41483 1.8672,2.44022 5.8005,2.25408 8.8592,2.54636 3.8077,0.36386 8.1304,0.91196 11.4294,-1.02386 2.3345,-1.36983 4.7503,-4.0059 4.5772,-6.70704 -0.1826,-2.84953 -3.1765,-5.05056 -5.6921,-6.40145 -2.5821,-1.38658 -5.7841,-1.48911 -8.7044,-1.24113 z m -1360.51571,0 c -3.70527,0.30189 -8.45099,0.39151 -10.6178,3.41229 -1.82939,2.55038 -1.76258,6.9221 0.14462,9.41483 1.86671,2.4398 5.79962,2.24931 8.85722,2.54653 3.76539,0.36603 8.01956,0.89501 11.30733,-0.97654 2.34139,-1.33282 4.81197,-3.8768 4.70902,-6.56899 -0.10795,-2.82272 -2.98413,-5.11037 -5.44893,-6.4903 -2.63248,-1.47381 -5.94446,-1.58282 -8.95146,-1.33782 z m -101.45313,19.08008 c -4.05711,0.20806 -8.96358,3.51664 -9.58134,7.53183 -0.52018,3.38098 2.68936,7.02568 5.78837,8.47403 3.21723,1.5036 7.81577,1.16674 10.60352,-1.03321 2.42435,-1.91317 4.04068,-5.84583 3.01758,-8.75976 -1.28395,-3.65689 -5.95748,-6.41139 -9.82813,-6.21289 z m 151.76569,2.94113 c -2.0621,2.04931 -3.35126,5.77035 -2.19961,8.43974 1.05576,2.44713 4.42615,3.19637 7.01194,3.84193 5.09835,1.27284 10.79515,1.52368 15.76339,-0.18801 2.45585,-0.84611 5.52736,-2.21614 6.1957,-4.7262 0.72947,-2.73962 -1.14313,-6.00027 -3.30178,-7.83816 -2.88474,-2.45608 -7.25565,-2.7046 -11.04427,-2.68523 -4.27324,0.0219 -9.39431,0.14367 -12.42537,3.15593 z m 85.73236,-2.5857 c -3.70981,0.3224 -8.48788,0.38701 -10.63105,3.43224 -1.8286,2.59824 -1.67519,7.04199 0.30488,9.52674 1.98906,2.49603 5.86793,2.81799 9.04997,3.06533 3.72156,0.28927 8.1875,0.21193 11.35042,-1.77041 2.302,-1.44276 4.55542,-4.2324 4.28122,-6.93528 -0.28264,-2.78601 -3.27119,-4.83045 -5.75863,-6.11668 -2.57019,-1.32902 -5.7142,-1.45245 -8.59681,-1.20194 z m -281.24379,0.47351 c -2.30792,2.88646 -3.36958,9.31312 -1.38125,12.30578 1.98833,2.99266 5.36126,2.24711 8.80173,2.58973 3.44047,0.34262 8.68162,0.67682 11.52571,-1.01269 2.84409,-1.68951 4.64377,-4.01255 4.58076,-6.8954 -0.063,-2.88285 -2.82762,-5.48701 -5.31643,-7.29038 -2.48881,-1.80338 -5.75796,-2.93565 -8.9593,-2.90324 -3.20134,0.0324 -6.94331,0.31975 -9.25122,3.2062 z m 242.37855,-0.47351 c -3.72667,0.31445 -8.50509,0.41548 -10.67162,3.46393 -1.80844,2.54459 -1.70571,6.8894 0.19844,9.36319 1.87464,2.43545 5.80178,2.25481 8.86117,2.54774 3.80173,0.364 8.09986,0.88253 11.41194,-1.01899 2.29784,-1.31923 4.71407,-3.83361 4.60242,-6.48087 -0.12102,-2.86934 -3.05201,-5.1845 -5.56229,-6.57958 -2.60317,-1.4467 -5.87245,-1.54582 -8.84006,-1.29542 z m 77.74415,0 c -3.72667,0.31445 -8.50509,0.41548 -10.67163,3.46393 -1.80844,2.54459 -1.70571,6.8894 0.19844,9.36319 1.87464,2.43545 5.80177,2.25483 8.86117,2.54774 3.79794,0.36361 8.09074,0.8797 11.40055,-1.01812 2.30067,-1.31919 4.7241,-3.83199 4.61381,-6.48174 -0.11943,-2.86941 -3.05201,-5.1845 -5.56229,-6.57958 -2.60316,-1.4467 -5.87244,-1.54582 -8.84005,-1.29542 z m 1205.03128,0 c -3.7267,0.31445 -8.5051,0.41549 -10.6716,3.46393 -1.8084,2.54459 -1.7058,6.8894 0.1984,9.36319 1.8746,2.43546 5.8018,2.25479 8.8612,2.54771 3.8017,0.364 8.0998,0.88254 11.4119,-1.01896 2.2979,-1.31923 4.7141,-3.8336 4.6025,-6.48087 -0.121,-2.86935 -3.052,-5.1845 -5.5623,-6.57958 -2.6032,-1.44671 -5.8725,-1.54583 -8.8401,-1.29542 z M 457.89939,201.44353 c -4.12172,0.40744 -8.61975,5.24835 -8.16602,9.36523 0.45199,4.10105 5.91243,8.07548 9.97109,7.33374 3.98891,-0.72899 7.30105,-6.21106 6.61694,-10.20791 -0.59797,-3.49358 -4.89481,-6.83973 -8.42201,-6.49106 z m -206.58398,0.2832 c -4.08055,0.1657 -9.01122,3.54995 -9.6188,7.58842 -0.50708,3.37045 2.72592,6.9615 5.8089,8.41489 3.13158,1.4763 7.56757,1.17492 10.34836,-0.88747 2.45305,-1.81932 4.30734,-5.59253 3.39904,-8.50841 -1.18305,-3.79789 -5.96289,-6.76882 -9.9375,-6.60743 z m -35.41211,0.33594 c -4.09334,0.43916 -9.11804,-0.26006 -12.07214,2.60726 -2.11205,2.05 -3.33621,5.89107 -2.12052,8.57162 1.12177,2.47346 4.59559,3.11695 7.23939,3.73879 5.03635,1.18459 10.62861,1.45866 15.51967,-0.22822 2.41107,-0.83155 5.42353,-2.16665 6.09327,-4.62758 0.75021,-2.75658 -1.05322,-6.10972 -3.25714,-7.92748 -2.78592,-2.29779 -7.02759,-1.77947 -10.62128,-2.13521 -0.25915,-0.0257 -0.52232,-0.027 -0.78125,8.2e-4 z m 272.89648,0.0195 c -3.67333,0.57566 -8.43984,0.4002 -10.61975,3.4123 -1.82719,2.52473 -1.80601,6.85707 0.0651,9.34942 1.82458,2.43038 5.71361,2.29682 8.73696,2.6054 3.86058,0.39403 8.24608,0.95024 11.5985,-1.0044 2.347,-1.36842 4.77194,-4.00806 4.61181,-6.72014 -0.16577,-2.80761 -3.08959,-5.00193 -5.55977,-6.3467 -2.61359,-1.42284 -5.86491,-1.07933 -8.83281,-1.29588 z m 38.86914,0 c -3.71649,0.31421 -8.47981,0.40628 -10.64667,3.44202 -1.81778,2.54669 -1.73334,6.90289 0.17154,9.3851 1.87109,2.43818 5.80181,2.25441 8.86116,2.54777 3.79584,0.36398 8.10958,0.92197 11.39471,-1.01421 2.3598,-1.39081 4.78624,-4.07498 4.60207,-6.80794 -0.18873,-2.80056 -3.13646,-4.95234 -5.60925,-6.28052 -2.60334,-1.3983 -5.82896,-1.52117 -8.77356,-1.27222 z m 1205.03128,0 c -3.7165,0.31421 -8.4798,0.4063 -10.6466,3.44202 -1.8178,2.54669 -1.7334,6.90288 0.1715,9.3851 1.8711,2.43819 5.8018,2.25441 8.8612,2.54777 3.7958,0.36398 8.1096,0.92198 11.3947,-1.01421 2.3598,-1.39081 4.7862,-4.07499 4.602,-6.80794 -0.1887,-2.80055 -3.1364,-4.95234 -5.6092,-6.28052 -2.6034,-1.39831 -5.829,-1.52117 -8.7736,-1.27222 z m 31.418,0.22461 c -3.2901,0.43864 -6.1257,3.82356 -7.0792,7.0029 -1.0487,3.49686 -0.4471,8.26955 2.2628,10.71585 2.3339,2.10687 6.8426,2.85486 9.3796,0.99763 3.971,-2.90696 4.9878,-9.9881 2.9477,-14.46662 -1.1925,-2.6178 -4.6595,-4.62991 -7.5109,-4.24976 z M 224.85036,225.4273 c -1.75969,2.60639 -1.61302,6.95916 0.33435,9.42848 1.91102,2.42322 5.83614,2.39271 8.92111,2.47578 3.50155,0.0943 7.82807,0.25769 10.26232,-2.26108 2.10643,-2.17957 2.97921,-6.21658 1.65245,-8.94188 -1.45881,-2.99655 -2.8971,-4.02198 -8.15925,-5.45112 -5.26215,-1.42915 -10.84496,1.54158 -13.01098,4.74982 z m -27.59355,-3.90953 c -3.70533,0.31111 -8.45264,0.39268 -10.61975,3.41425 -1.82886,2.54996 -1.76549,6.92319 0.14462,9.41287 1.89126,2.46511 5.8717,2.2599 8.96498,2.55182 3.75638,0.3545 8.01218,0.88853 11.2743,-1.00744 2.33965,-1.35982 4.78355,-3.9666 4.63038,-6.66838 -0.16162,-2.85098 -3.14004,-5.07766 -5.65004,-6.43932 -2.58872,-1.40436 -5.8097,-1.51021 -8.74449,-1.2638 z m 1554.88089,0 c -3.7128,0.3136 -8.4719,0.3991 -10.6388,3.4303 -1.8222,2.54903 -1.7413,6.91245 0.1658,9.39858 1.8709,2.43889 5.8031,2.25357 8.863,2.54598 3.8013,0.36326 8.1245,0.92541 11.4102,-1.02028 2.359,-1.39693 4.7759,-4.0965 4.5807,-6.83114 -0.2,-2.80196 -3.1623,-4.93836 -5.6402,-6.26155 -2.5967,-1.38663 -5.8074,-1.50965 -8.7407,-1.26189 z m 4.6817,28.28125 c 0.5203,4.05646 5.8859,7.92028 9.9161,7.22502 3.9246,-0.67706 7.3456,-5.92822 6.7409,-9.86467 -0.5678,-3.69631 -5.1006,-7.34342 -8.818,-6.93606 -4.1005,0.44934 -8.3638,5.48418 -7.839,9.57571 z M 182.30955,240.90644 c -3.89332,-0.15362 -8.81779,0.77889 -10.97463,4.02381 -1.7356,2.61118 -1.5238,6.9468 0.43361,9.39611 1.91824,2.4003 5.81629,2.36013 8.88775,2.44489 3.47688,0.0959 7.76201,0.27396 10.19819,-2.20856 2.12431,-2.16473 3.13971,-6.2275 1.75793,-8.9274 -1.72156,-3.36381 -6.52704,-4.57987 -10.30285,-4.72885 z m 1537.50315,2.65183 c -2.0322,2.11946 -3.3044,5.88106 -2.0942,8.55635 1.1072,2.44741 4.5305,3.10746 7.1438,3.72914 5.0643,1.20476 10.6956,1.4829 15.6153,-0.21857 2.4191,-0.83665 5.4251,-2.19124 6.1042,-4.65922 0.7452,-2.70816 -1.0714,-5.91919 -3.1395,-7.81978 -2.7706,-2.54618 -7.0304,-3.27915 -10.7932,-3.30797 -4.4547,-0.0341 -9.7532,0.50447 -12.8364,3.72005 z M 216.69041,240.95524 c -3.71278,0.30999 -8.47552,0.39752 -10.63712,3.43204 -1.82215,2.55798 -1.72507,6.93507 0.19574,9.41982 1.89292,2.44867 5.85334,2.23922 8.93514,2.52492 3.77127,0.34962 8.03308,0.86193 11.3158,-1.02711 2.29344,-1.31976 4.70499,-3.83098 4.59278,-6.47467 -0.12179,-2.86931 -3.05201,-5.1845 -5.56229,-6.57958 -2.60316,-1.4467 -5.87222,-1.54321 -8.84005,-1.29542 z M 1718.708,260.03532 c -4.0476,0.21666 -8.9475,3.49186 -9.5746,7.49644 -0.5299,3.38346 2.667,7.04595 5.766,8.50356 3.2137,1.51153 7.8245,1.19121 10.6055,-1.01758 2.4469,-1.94348 4.0405,-5.94577 2.9844,-8.88672 -1.2984,-3.6157 -5.945,-6.30105 -9.7813,-6.0957 z m -1521.45705,0.35547 c -3.70298,0.31444 -8.44797,0.3924 -10.61389,3.41229 -1.82925,2.55048 -1.76257,6.9221 0.14462,9.41483 1.86753,2.4409 5.80171,2.25544 8.86116,2.54772 3.80711,0.3637 8.12905,0.91052 11.42742,-1.02522 2.33437,-1.36998 4.75024,-4.00591 4.57718,-6.70705 -0.18256,-2.84952 -3.17646,-5.05056 -5.69206,-6.40144 -2.58208,-1.38658 -5.78412,-1.48911 -8.70443,-1.24113 z m 1554.88675,0 c -3.713,0.30921 -8.4711,0.39796 -10.6388,3.42834 -1.823,2.54851 -1.7446,6.91198 0.1617,9.39878 1.8698,2.43919 5.8018,2.25482 8.8612,2.54774 3.8017,0.364 8.0998,0.88251 11.4119,-1.01899 2.2979,-1.31923 4.7141,-3.8336 4.6025,-6.48087 -0.121,-2.86935 -3.0521,-5.18442 -5.5623,-6.57958 -2.602,-1.44617 -5.8696,-1.54248 -8.8362,-1.29542 z m -50.3496,18.79687 c -4.024,0.74608 -8.4159,5.07047 -8.1797,9.15625 0.2233,3.86244 4.8229,7.38686 8.6785,7.70701 2.801,0.23258 5.8435,-1.98959 7.1418,-4.4824 1.3373,-2.56773 1.1354,-6.24159 -0.4339,-8.67448 -1.4643,-2.27003 -4.5507,-4.19883 -7.2067,-3.70638 z M 177.03025,279.8068 c -4.09159,0.0713 -9.0397,-0.25427 -12.00564,2.5652 -2.1191,2.01444 -3.42463,5.79025 -2.26449,8.47402 1.07867,2.49529 4.54152,3.21688 7.18178,3.86421 5.04526,1.23698 10.682,1.52363 15.5828,-0.19887 2.50177,-0.8793 5.65179,-2.31877 6.26901,-4.89774 0.67139,-2.80531 -1.37971,-6.08191 -3.66843,-7.83755 -2.9803,-2.28614 -7.33945,-2.0347 -11.09503,-1.96927 z m 1555.66995,0.0195 c -3.7163,0.3161 -8.4951,0.39543 -10.6466,3.44202 -1.8224,2.58047 -1.6847,6.99053 0.2685,9.47345 1.9365,2.46168 5.9454,2.19864 9.0656,2.47039 3.7009,0.32232 7.902,0.86791 11.0972,-1.02713 2.3589,-1.39904 4.7869,-4.08974 4.5942,-6.82552 -0.1978,-2.80857 -3.1683,-4.95089 -5.6521,-6.27683 -2.5926,-1.38405 -5.7984,-1.50546 -8.7268,-1.25638 z M 162.874,299.21306 c -3.88719,-0.12416 -8.79568,0.77472 -10.95764,4.00761 -1.73976,2.60155 -1.55782,6.92949 0.38766,9.38101 1.91906,2.41823 5.83861,2.39786 8.92483,2.47452 3.53016,0.0877 7.91882,0.2536 10.33656,-2.32017 2.09877,-2.23421 2.91668,-6.38956 1.44974,-9.08115 -1.76733,-3.24276 -6.44993,-4.34392 -10.14115,-4.46182 z m 31.02213,-0.18393 c -2.91702,0.73793 -6.4838,1.60207 -7.98498,4.20975 -1.5549,2.70099 -1.54904,6.89613 0.38261,9.3419 1.89779,2.4029 5.78096,2.3932 8.84131,2.49226 3.50249,0.11337 7.83821,0.31969 10.2819,-2.19201 2.14893,-2.20874 2.99183,-6.30334 1.67872,-9.0912 -1.33463,-2.83354 -5.21742,-3.64665 -8.21058,-4.56922 -1.67697,-0.29094 -3.45597,-0.30975 -4.98898,-0.19148 z m 1519.36267,0.23273 c -3.7187,0.31876 -8.5134,0.39137 -10.6523,3.45003 -1.8226,2.60625 -1.6361,7.05328 0.3535,9.53434 1.986,2.47652 6.0483,2.16321 9.213,2.41169 3.6846,0.28929 7.8713,0.8144 11.0332,-1.09942 2.3048,-1.39509 4.6426,-4.06747 4.4397,-6.754 -0.2124,-2.81272 -3.1692,-4.9645 -5.6576,-6.29289 -2.5931,-1.38432 -5.8007,-1.5008 -8.7295,-1.24975 z m -32.2717,22.01288 c -2.1447,1.98991 -3.3594,5.81772 -2.1897,8.49936 1.0618,2.43447 4.4289,3.15602 7.0075,3.7924 5.1028,1.25933 10.7942,1.51193 15.7664,-0.19136 2.4251,-0.83076 5.4525,-2.16963 6.1318,-4.64145 0.7525,-2.73827 -0.9851,-6.12769 -3.2111,-7.89106 -2.975,-2.35676 -7.4536,-1.80552 -11.2487,-1.76424 -4.1503,0.0451 -9.2137,-0.62664 -12.2562,2.19635 z m -1513.78559,0.83688 c -1.82552,2.52272 -1.80915,6.85338 0.0631,9.34162 1.84885,2.45715 5.78729,2.30514 8.84665,2.61523 3.79552,0.38471 8.0838,0.90405 11.4032,-0.97626 2.33105,-1.32045 4.80896,-3.83887 4.70523,-6.51593 -0.11157,-2.87946 -0.5452,-3.51746 -7.50514,-8.17166 -6.95995,-4.6542 -15.33547,0.69779 -17.51304,3.70699 z m 23.44007,15.38263 c -4.02531,0.63665 -8.2952,5.00215 -8.19141,9.07617 0.0932,3.65956 4.14749,7.19805 7.76367,7.76758 2.88284,0.45404 6.23231,-1.52421 7.79297,-3.99023 1.50836,-2.38339 1.63468,-5.99402 0.26139,-8.45771 -1.42863,-2.56297 -4.72839,-4.8542 -7.62662,-4.39581 z m 1507.84972,9.33152 c 0.1655,3.69785 4.4826,7.10025 8.1588,7.53309 2.8361,0.33392 6.0186,-1.73262 7.472,-4.19073 1.4296,-2.4178 1.6313,-6.09125 0.07,-8.42619 -1.6239,-2.42852 -5.2795,-3.93471 -8.1268,-3.28114 -3.6662,0.84152 -7.7422,4.60727 -7.574,8.36497 z M 158.37595,338.13493 c -3.71561,0.32847 -8.50152,0.39442 -10.64647,3.44612 -1.82288,2.59348 -1.66528,7.02455 0.30858,9.50505 1.97725,2.48476 6.04317,2.18906 9.20874,2.43947 3.74323,0.2961 8.03617,0.87412 11.20728,-1.13674 2.32629,-1.47514 4.57575,-4.34452 4.26016,-7.08095 -0.31975,-2.7725 -3.34543,-4.74418 -5.83607,-6.00344 -2.553,-1.29079 -5.65257,-1.42143 -8.50222,-1.16951 z m 1516.00985,0 c -3.7103,0.312 -8.4569,0.40566 -10.6311,3.42834 -1.8202,2.53055 -1.7696,6.86387 0.1096,9.35095 1.8284,2.41983 5.7053,2.28395 8.723,2.58774 3.8739,0.38999 8.2775,0.94732 11.6354,-1.02327 2.3283,-1.36634 4.7189,-4.00276 4.5537,-6.69728 -0.1727,-2.81696 -3.1005,-5.02019 -5.5804,-6.36748 -2.6075,-1.41664 -5.8531,-1.52766 -8.8102,-1.279 z M 164.9639,360.15615 c -2.0984,2.00997 -3.36433,5.77012 -2.20378,8.43402 1.08597,2.49271 4.54281,3.21718 7.18376,3.86395 5.05518,1.23801 10.6966,1.50449 15.61235,-0.20517 2.45935,-0.85534 5.53908,-2.24489 6.18886,-4.76636 0.71245,-2.76464 -1.19123,-6.06403 -9.55176,-9.29072 -8.36052,-3.22668 -14.25652,-0.88336 -17.22943,1.96428 z m 1477.1442,-0.008 c -2.0274,2.09159 -3.3704,5.78638 -2.2049,8.45593 1.0863,2.48824 4.5403,3.20469 7.1774,3.85075 5.0213,1.23018 10.6147,1.48263 15.5083,-0.18468 2.4705,-0.84173 5.5826,-2.18517 6.2575,-4.70633 0.7435,-2.77747 -1.2366,-6.02041 -3.3813,-7.93548 -2.7828,-2.48482 -6.9947,-3.19166 -10.7254,-3.19826 -4.3891,-0.008 -9.5768,0.56645 -12.6316,3.71807 z m 44.266,-2.35261 c -3.2896,0.43877 -6.1256,3.82213 -7.0792,7.00095 -1.0492,3.49738 -0.4475,8.27102 2.2628,10.7178 2.3338,2.10691 6.843,2.85545 9.3796,0.99763 3.9715,-2.90879 4.9842,-9.99331 2.9418,-14.47247 -1.1923,-2.61494 -4.6563,-4.62387 -7.505,-4.24391 z M 165.98337,376.37517 c -3.83571,1.34328 -8.28018,5.35106 -7.78337,9.3847 0.50294,4.08348 5.8421,7.54539 9.94939,7.30475 2.98467,-0.17487 5.96513,-3.18629 6.56065,-6.11617 0.70189,-3.45322 -1.56043,-7.44491 -4.30479,-9.65531 -1.1724,-0.94429 -3.0011,-1.41553 -4.42188,-0.91797 z m 1504.15243,0.27734 c -4.0733,0.18285 -8.9965,3.53773 -9.6094,7.56881 -0.5123,3.36907 2.7082,6.96851 5.7881,8.42707 3.1315,1.48302 7.5846,1.20117 10.3578,-0.87606 2.4813,-1.85858 4.3098,-5.72262 3.3582,-8.67319 -1.2082,-3.74649 -5.9622,-6.62316 -9.8947,-6.44663 z m -1472.88485,0.35352 c -3.71829,0.32381 -8.51337,0.39137 -10.65232,3.45003 -1.82257,2.60625 -1.63613,7.05328 0.35349,9.53434 1.98598,2.47652 6.04834,2.16208 9.21298,2.41172 3.67776,0.29012 7.87327,0.8464 11.0138,-1.08934 2.35178,-1.44957 4.69911,-4.25149 4.43493,-7.00146 -0.26711,-2.78051 -3.26844,-4.81349 -5.74988,-6.09606 -2.57548,-1.33118 -5.72477,-1.46075 -8.613,-1.20923 z m 1438.26375,0 c -3.6631,0.57228 -8.4147,0.39209 -10.5926,3.39255 -1.8346,2.52748 -1.8249,6.86996 0.048,9.36917 1.8232,2.43294 5.7166,2.29334 8.7408,2.60547 3.8244,0.39472 8.1512,0.93239 11.4936,-0.96781 2.3474,-1.33456 4.8369,-3.89141 4.7128,-6.58883 -0.1328,-2.88595 -3.1331,-5.17091 -5.6681,-6.55666 -2.5808,-1.41081 -5.8004,-1.04438 -8.7342,-1.25389 -1e-4,-1e-5 -2e-4,-2e-5 -3e-4,0 z m 15.168,19.08203 c -4.08,0.22128 -9.0143,3.57648 -9.6016,7.62001 -0.4921,3.38864 2.7854,6.98284 5.8975,8.41103 3.1904,1.46409 7.7245,1.13653 10.4794,-1.03885 2.4366,-1.924 4.0718,-5.87352 3.043,-8.80274 -1.282,-3.65022 -5.9552,-6.39897 -9.8183,-6.18945 z M 182.31931,396.3947 c -3.89704,-0.13561 -8.82539,0.77665 -10.98439,4.02381 -1.73598,2.61093 -1.52726,6.94958 0.43361,9.39611 1.94258,2.42372 5.88631,2.3741 8.9916,2.44609 3.46639,0.0804 7.75535,0.24229 10.15293,-2.26249 2.11642,-2.21104 3.03661,-6.33654 1.60352,-9.04102 -1.74356,-3.2904 -6.47571,-4.43299 -10.19727,-4.5625 z m 1432.89849,0.0293 c -4.0811,0.0913 -9.0226,-0.23445 -11.9692,2.59064 -2.106,2.01913 -3.3786,5.79576 -2.21,8.46902 1.0874,2.48735 4.5429,3.20065 7.1807,3.84203 5.0913,1.23795 10.7857,1.54612 15.7173,-0.22396 2.4627,-0.88391 5.5577,-2.35135 6.1283,-4.90486 0.6403,-2.86551 -1.5277,-6.15081 -3.8801,-7.90792 -2.9709,-2.21908 -7.2598,-1.94785 -10.967,-1.86495 z m -1398.52349,0.0176 c -3.71285,0.31355 -8.47133,0.39955 -10.63885,3.4303 -1.82237,2.54814 -1.74436,6.91071 0.16176,9.39682 1.87115,2.4405 5.80572,2.25515 8.86703,2.54774 3.80186,0.36337 8.12876,0.93024 11.41199,-1.02081 2.36468,-1.4052 4.77849,-4.12458 4.57502,-6.86773 -0.20701,-2.79084 -3.16426,-4.90877 -5.63448,-6.22393 -2.59898,-1.38372 -5.80853,-1.51016 -8.74247,-1.26239 z m 1407.47659,23.41637 c -1.7375,2.6513 -1.4568,7.0468 0.5589,9.49332 2.0071,2.43611 6.0155,2.32469 9.1718,2.35487 3.4103,0.0326 7.6422,0.15033 9.9568,-2.35441 2.0822,-2.2532 2.8494,-6.38877 1.4058,-9.09587 -1.6381,-3.07184 -6.4523,-3.59209 -10.0079,-3.70706 -3.8543,-0.12463 -8.9495,0.0499 -11.0854,3.30915 z m -1426.91409,-3.9789 c -3.70512,0.31116 -8.4525,0.39107 -10.61975,3.41229 -1.82946,2.55033 -1.76584,6.9246 0.14462,9.41483 1.88999,2.46354 5.86773,2.25966 8.9591,2.55043 3.7642,0.35406 8.04105,0.90533 11.29677,-1.01687 2.36059,-1.39372 4.79017,-4.0809 4.60207,-6.81576 -0.19306,-2.80688 -3.15597,-4.955 -5.63651,-6.28269 -2.59703,-1.39004 -5.811,-1.50874 -8.7463,-1.26223 z m 38.8711,0 c -3.71212,0.30504 -8.47007,0.39748 -10.63495,3.42834 -1.82313,2.5524 -1.74004,6.92313 0.17368,9.40832 1.89081,2.45544 5.85815,2.24725 8.94328,2.54104 3.72863,0.35506 7.93549,0.87094 11.19405,-0.97582 2.33659,-1.32424 4.81768,-3.84275 4.72433,-6.52688 -0.0988,-2.84116 -2.98931,-5.15355 -5.46861,-6.54459 -2.62515,-1.47287 -5.93179,-1.57694 -8.93178,-1.33041 z m 1360.51959,0 c -3.7121,0.3052 -8.4708,0.397 -10.635,3.42834 -1.8229,2.55329 -1.7369,6.92488 0.1778,9.41008 1.8905,2.45381 5.8555,2.24573 8.9392,2.53928 3.7287,0.35495 7.9355,0.87096 11.1941,-0.97582 2.3366,-1.32424 4.8175,-3.84275 4.7243,-6.52688 -0.099,-2.84128 -2.9889,-5.15424 -5.4683,-6.54534 -2.6252,-1.4729 -5.932,-1.57632 -8.9321,-1.32966 z m 19.0664,19.38672 c -3.8941,-0.13786 -8.8304,0.77219 -10.9746,4.02576 -1.7364,2.63489 -1.4812,7.00457 0.5094,9.4531 1.961,2.41207 5.9057,2.33393 9.0138,2.39222 3.4366,0.0645 7.6818,0.21331 10.0588,-2.26952 2.109,-2.2029 3.045,-6.306 1.6231,-9.00391 -1.7432,-3.30747 -6.4941,-4.46537 -10.2305,-4.59765 z m -51.3534,2.6307 c -2.0307,2.1012 -3.3505,5.81331 -2.1804,8.49097 1.0663,2.44008 4.4427,3.15962 7.0279,3.79826 5.0601,1.25004 10.704,1.51338 15.6357,-0.17364 2.4869,-0.8507 5.6092,-2.2203 6.2862,-4.75996 0.7306,-2.7409 -1.2132,-5.94102 -3.3271,-7.83246 -2.8013,-2.50649 -7.0449,-3.22237 -10.8038,-3.23221 -4.3905,-0.0115 -9.5873,0.55202 -12.6385,3.70904 z m -1347.67009,-2.5819 c -3.72667,0.31445 -8.50509,0.41548 -10.67163,3.46393 -1.80844,2.54459 -1.70571,6.88941 0.19844,9.3632 1.87464,2.43545 5.80178,2.25481 8.86117,2.54774 3.80173,0.364 8.09987,0.88253 11.41194,-1.01899 2.29784,-1.31923 4.71407,-3.83362 4.60242,-6.48088 -0.12102,-2.86934 -3.05201,-5.18449 -5.56229,-6.57957 -2.60316,-1.4467 -5.87244,-1.54583 -8.84005,-1.29543 z m 38.87304,0 c -3.67208,0.57566 -8.43994,0.39883 -10.61584,3.4123 -1.82714,2.53045 -1.79591,6.87205 0.0846,9.36309 1.84284,2.44115 5.75821,2.28994 8.80173,2.59362 3.83825,0.38297 8.18096,0.90508 11.52749,-1.01313 2.29876,-1.31763 4.71407,-3.83362 4.60242,-6.48088 -0.12102,-2.86934 -3.05203,-5.18445 -5.56228,-6.57957 -2.60258,-1.44643 -5.86848,-1.07895 -8.83811,-1.29543 z m 1306.70125,19.38672 c -3.8938,-0.14728 -8.8258,0.77523 -10.9746,4.02577 -1.7357,2.62574 -1.499,6.98401 0.4814,9.43048 1.9636,2.42569 5.9258,2.35186 9.046,2.414 3.429,0.0683 7.656,0.21159 10.039,-2.25501 2.1062,-2.1801 3.0821,-6.24553 1.6862,-8.93634 -1.7334,-3.34143 -6.5164,-4.53662 -10.278,-4.6789 z m -1326.13289,0.0488 c -3.67333,0.57566 -8.43983,0.40019 -10.61975,3.41229 -1.8272,2.52473 -1.80601,6.85708 0.0651,9.34943 1.82458,2.43038 5.71352,2.29777 8.73696,2.6054 3.86727,0.39349 8.26122,0.94758 11.61758,-1.0134 2.34007,-1.3672 4.75982,-4.00415 4.59273,-6.70919 -0.17494,-2.83199 -3.13984,-5.03019 -5.63619,-6.37889 -2.59467,-1.40181 -5.81485,-1.05416 -8.75639,-1.26564 z m 38.86914,0 c -3.71637,0.31556 -8.47981,0.40628 -10.64667,3.44202 -1.81778,2.54669 -1.73334,6.90289 0.17154,9.3851 1.87109,2.43818 5.80181,2.25441 8.86116,2.54777 3.79584,0.36398 8.10971,0.92219 11.39471,-1.01421 2.36017,-1.39124 4.78947,-4.07661 4.60207,-6.8099 -0.19267,-2.81005 -3.15927,-4.96074 -5.64259,-6.28989 -2.59522,-1.38904 -5.80721,-1.50993 -8.74022,-1.26089 z m 1321.65045,0 c -3.7055,0.30611 -8.4398,0.40022 -10.6197,3.41229 -1.8272,2.52472 -1.8061,6.85707 0.065,9.34943 1.8246,2.4304 5.7135,2.29777 8.737,2.6054 3.8673,0.39349 8.2612,0.94759 11.6176,-1.0134 2.3401,-1.3672 4.7525,-4.00372 4.5927,-6.70919 -0.1656,-2.80322 -3.0788,-4.9984 -5.5441,-6.34289 -2.6173,-1.42739 -5.8774,-1.54708 -8.8485,-1.30164 z m -52.8672,19.08203 c -4.0691,0.17473 -8.9826,3.54183 -9.5918,7.56881 -0.5103,3.37307 2.7154,6.9743 5.7995,8.43255 3.1303,1.48009 7.5721,1.18498 10.3502,-0.88173 2.465,-1.83372 4.3149,-5.64129 3.3894,-8.5708 -1.1959,-3.78542 -5.9811,-6.71914 -9.9473,-6.54883 z m -1288.21684,0.35352 c -3.71204,0.30416 -8.46759,0.39743 -10.63517,3.42618 -1.82398,2.54865 -1.74828,6.91331 0.15808,9.40094 1.8702,2.44045 5.80449,2.25405 8.86506,2.54788 3.794,0.36424 8.08091,0.88198 11.38963,-1.00996 2.29907,-1.31462 4.71676,-3.81807 4.61888,-6.46465 -0.10529,-2.84693 -2.9855,-5.17153 -5.46861,-6.56803 -2.62261,-1.47496 -5.92901,-1.57809 -8.92787,-1.33236 z m 38.87109,0 c -3.68318,0.57974 -8.46515,0.41103 -10.64471,3.43616 -1.81722,2.52221 -1.77822,6.84239 0.092,9.32556 1.82946,2.42905 5.71751,2.2976 8.74282,2.6054 3.86281,0.39301 8.26071,0.96351 11.60436,-1.01026 2.3624,-1.39453 4.78118,-4.09705 4.58641,-6.83342 -0.19944,-2.80199 -3.16223,-4.93836 -5.64015,-6.26155 -2.59674,-1.38664 -5.80449,-1.05103 -8.74071,-1.26189 z m 1282.77545,0 c -3.7152,0.31444 -8.4779,0.40189 -10.6447,3.43616 -1.8198,2.54835 -1.735,6.90872 0.1717,9.39272 1.8716,2.43827 5.8027,2.25691 8.8629,2.54598 3.8317,0.36195 8.1952,0.92229 11.4981,-1.05344 2.331,-1.39433 4.6954,-4.08936 4.4929,-6.79798 -0.2094,-2.80127 -3.1623,-4.93836 -5.6402,-6.26155 -2.5967,-1.38663 -5.8074,-1.51015 -8.7407,-1.26189 z M 265.19671,496.32668 c -1.49931,0.9807 -1.94318,2.90668 -2.1347,4.57441 -0.21249,2.50576 0.55269,5.46426 2.90017,6.75549 2.50425,1.31184 5.42115,1.05121 8.14453,1.41795 3.45853,0.3381 7.20284,0.72801 10.3927,-0.96396 2.18271,-1.1757 4.16795,-3.0882 4.81006,-5.54549 0.40685,-1.91719 -0.57924,-3.82133 -1.96269,-5.09756 -1.19843,-1.16354 -2.59758,-2.17615 -4.15067,-2.79506 -2.46189,-0.59736 -5.36086,-1.46371 -9.28173,-1.25879 -3.92087,0.20492 -6.27195,1.73523 -8.71767,2.91301 z m 48.66166,-2.70352 c -3.71094,0.32291 -8.48848,0.39244 -10.63279,3.43831 -1.82478,2.59199 -1.67584,7.02378 0.29686,9.50505 1.98618,2.49821 6.07491,2.19373 9.25627,2.44851 3.68968,0.29549 7.89661,0.84276 11.05037,-1.095 2.32756,-1.43012 4.65408,-4.1896 4.40625,-6.91015 -0.25517,-2.80116 -3.25323,-4.87837 -5.74772,-6.17803 -2.57585,-1.34204 -5.73568,-1.46047 -8.62924,-1.20869 z m 1233.29833,3.41229 c -1.8255,2.52271 -1.8092,6.85336 0.063,9.34161 1.8488,2.45715 5.7873,2.30484 8.8466,2.61524 3.7955,0.38509 8.0889,0.91502 11.4033,-0.97399 2.3443,-1.33611 4.8219,-3.8928 4.7032,-6.58851 -0.1259,-2.85971 -3.077,-5.14254 -5.5841,-6.52394 -2.6033,-1.43439 -5.8396,-2.18764 -8.8536,-1.95958 -3.7696,0.28523 -8.4008,1.07998 -10.5784,4.08917 z M 295.66438,528.49266 c -4.05919,1.22279 -9.00551,0.57565 -12.60979,-1.65625 -2.0586,-1.27475 -4.02312,-3.60468 -4.05653,-6.02577 -0.0324,-2.3483 1.82626,-4.63543 3.77177,-5.95094 3.15237,-2.13158 7.53288,-3.00139 11.22509,-2.08016 4.25994,1.06289 10.21011,3.81324 10.30565,8.20274 0.083,3.81412 -4.98331,6.40999 -8.63619,7.51038 z m 30.27491,0.39335 c 3.0047,1.2187 7.08754,0.89184 9.66818,-1.07127 2.42543,-1.84504 4.39392,-5.60918 3.39544,-8.4884 -1.42229,-4.10133 -6.99864,-7.19193 -11.28422,-6.50084 -3.85998,0.62246 -7.73243,4.84417 -7.80783,8.75329 -0.0609,3.15707 3.1023,6.12039 6.02843,7.30722 z M 1572.9385,512.7033 c -4.0695,0.16389 -8.9686,3.54396 -9.5918,7.5688 -0.5178,3.3438 2.6423,6.94188 5.6939,8.40365 3.1573,1.51242 7.65,1.21922 10.4675,-0.85875 2.4493,-1.80643 4.3027,-5.5663 3.4011,-8.47308 -1.183,-3.81397 -5.9807,-6.80131 -9.9707,-6.64062 z m -34.5996,0.35351 c -3.7064,0.30795 -8.4582,0.39116 -10.6215,3.41642 -1.8282,2.55671 -1.7474,6.93741 0.1702,9.42783 1.8864,2.44991 5.8451,2.24437 8.9236,2.53248 3.774,0.3532 8.0392,0.86782 11.3257,-1.02086 2.2973,-1.3202 4.7139,-3.83361 4.6024,-6.48087 -0.1209,-2.86955 -3.0515,-5.18548 -5.5619,-6.58069 -2.6027,-1.44645 -5.8711,-1.54086 -8.8385,-1.29431 z m -1224.46685,19.4375 c -3.70381,0.312 -8.44886,0.39241 -10.61585,3.41229 -1.82984,2.55003 -1.76595,6.92171 0.14071,9.41483 1.86703,2.44129 5.80177,2.25475 8.86116,2.54774 3.80051,0.36396 8.12724,0.9339 11.40834,-1.0182 2.37228,-1.4114 4.79267,-4.14528 4.58259,-6.89767 -0.21285,-2.78874 -3.17893,-4.89309 -5.64999,-6.20313 -2.59662,-1.3766 -5.79838,-1.50256 -8.72696,-1.25586 z m 1243.90435,0 c -3.7238,0.31805 -8.4991,0.41154 -10.6661,3.45655 -1.8115,2.54539 -1.7136,6.8941 0.191,9.37057 1.8736,2.4362 5.8017,2.25459 8.8611,2.54777 3.7991,0.36407 8.1182,0.92433 11.4044,-1.01648 2.3585,-1.39289 4.7817,-4.08304 4.5905,-6.81544 -0.1967,-2.81152 -3.1682,-4.95856 -5.6541,-6.28659 -2.5922,-1.38482 -5.7985,-1.50648 -8.7268,-1.25638 z M 299.88962,551.57634 c -4.08675,0.20041 -9.02393,3.58383 -9.61328,7.63282 -0.49151,3.37683 2.77194,6.95665 5.87006,8.38711 3.1758,1.46633 7.67753,1.1416 10.44658,-0.99573 2.43167,-1.87693 4.14559,-5.74045 3.16969,-8.6531 -1.24435,-3.71383 -5.96101,-6.56294 -9.87305,-6.3711 z m 1242.95518,0.30274 c -3.8966,-0.13469 -8.8288,0.77103 -10.9844,4.01992 -1.7371,2.61817 -1.5131,6.96641 0.4558,9.41507 1.9412,2.41422 5.8727,2.36089 8.9697,2.43182 3.4634,0.0793 7.7502,0.24603 10.1448,-2.25744 2.1203,-2.21666 3.0364,-6.35339 1.5977,-9.0625 -1.7436,-3.28327 -6.4683,-4.41845 -10.1836,-4.54687 z m -1209.54307,0.0488 c -3.70733,0.32018 -8.47358,0.38842 -10.62519,3.42444 -1.83038,2.58275 -1.7088,7.00386 0.24629,9.49353 1.94031,2.47085 5.96455,2.20788 9.09511,2.4715 3.76191,0.31678 8.05603,0.87679 11.27208,-1.1004 2.32098,-1.42691 4.63047,-4.18733 4.38085,-6.90039 -0.25766,-2.80048 -3.25198,-4.87797 -5.74576,-6.17803 -2.57389,-1.34182 -5.7315,-1.46041 -8.62338,-1.21065 z m 1243.91217,0 c -3.7315,0.32002 -8.5178,0.4195 -10.6851,3.47392 -1.8046,2.54331 -1.6957,6.88316 0.208,9.35321 1.8773,2.43579 5.8057,2.25512 8.867,2.54774 3.8006,0.36329 8.13,0.93662 11.4083,-1.02028 2.3738,-1.417 4.7857,-4.16444 4.5707,-6.92067 -0.2165,-2.77654 -3.1688,-4.86938 -5.6296,-6.17352 -2.6006,-1.37826 -5.8068,-1.51189 -8.7393,-1.2604 z m 15.1602,19.08594 c -4.0668,0.14862 -8.9698,3.53317 -9.5899,7.55514 -0.5175,3.35667 2.6737,6.94781 5.7329,8.42313 3.0844,1.48747 7.4577,1.22552 10.2444,-0.76448 2.494,-1.78101 4.4868,-5.50979 3.6228,-8.45016 -1.1352,-3.86368 -5.9859,-6.9107 -10.0102,-6.76363 z m -1278.50987,0.35156 c -3.71304,0.32251 -8.49316,0.39271 -10.63865,3.44027 -1.82477,2.592 -1.67277,7.02134 0.29686,9.50505 1.96373,2.47627 6.00968,2.19388 9.15991,2.44733 3.75305,0.30194 8.03906,0.85145 11.23851,-1.13351 2.29795,-1.42567 4.5691,-4.1782 4.31447,-6.87046 -0.26484,-2.80026 -3.25343,-4.87798 -5.74772,-6.17803 -2.574,-1.3416 -5.73162,-1.46182 -8.62338,-1.21065 z m 1243.90627,0 c -3.7036,0.30916 -8.448,0.39404 -10.6138,3.41425 -1.8287,2.55011 -1.7623,6.92076 0.1446,9.41288 1.8684,2.44179 5.8048,2.25077 8.865,2.54788 3.7642,0.36545 8.0187,0.89654 11.3034,-0.97789 2.3436,-1.33739 4.8219,-3.8928 4.7032,-6.58852 -0.1259,-2.85971 -3.0772,-5.14215 -5.5841,-6.52394 -2.6014,-1.43392 -5.8581,-1.53176 -8.8183,-1.28466 z m -1258.84572,19.3887 c -3.89631,-0.11527 -8.84046,0.76839 -10.97855,4.0277 -1.73726,2.64828 -1.46138,7.03993 0.55093,9.48575 2.00746,2.43994 6.02012,2.35994 9.17974,2.36244 3.52744,0.003 7.92075,0.0256 10.25255,-2.62123 1.96568,-2.23121 2.57521,-6.2689 1.10275,-8.85232 -1.81971,-3.19267 -6.43418,-4.29367 -10.10742,-4.40234 z m 33.5625,0.0293 c -1.81115,-0.0572 -3.63938,0.0106 -7.59517,1.33523 -3.9558,1.32463 -5.89606,4.36123 -6.194,6.97607 -0.33336,2.92566 1.24021,8.51496 14.13251,8.39709 12.89229,-0.11788 14.60439,-6.47885 14.21867,-9.20472 -0.39201,-2.77029 -3.10988,-5.24296 -5.63949,-6.43847 -2.70809,-1.27986 -5.92872,-0.97071 -8.92252,-1.0652 z m 1244.71682,0.0195 c -3.7116,0.32536 -8.4977,0.38364 -10.6369,3.4342 -1.8285,2.60753 -1.6523,7.06207 0.3381,9.54823 1.9832,2.47716 6.0459,2.16192 9.2094,2.41048 3.6981,0.29056 7.9185,0.84857 11.0738,-1.10189 2.3275,-1.43874 4.6445,-4.22001 4.3789,-6.94336 -0.2746,-2.81512 -3.3135,-4.87237 -5.8281,-6.16731 -2.5535,-1.31493 -5.674,-1.43116 -8.5352,-1.18035 z M 303.34271,623.01775 c 1.84385,2.43993 5.75851,2.28666 8.80173,2.58972 3.83772,0.38218 8.21013,0.95735 11.52571,-1.01269 2.37195,-1.40936 4.78782,-4.14425 4.57881,-6.89539 -0.21175,-2.78724 -5.90456,-7.89006 -17.72986,-6.19942 -11.82531,1.69063 -9.05812,9.02772 -7.17639,11.51778 z M 1586.028,613.65487 c -1.6812,2.62961 -1.7917,6.8728 0.09,9.36288 1.8438,2.43994 5.7585,2.28666 8.8017,2.58972 3.8365,0.38206 8.2069,0.95614 11.522,-1.01236 2.3733,-1.40929 4.7931,-4.14341 4.5845,-6.89572 -0.2113,-2.78772 -3.1687,-4.90347 -5.643,-6.20491 -3.3283,-1.75062 -7.4565,-2.06496 -11.1782,-1.52556 -2.9589,0.42883 -6.5665,1.16699 -8.177,3.68595 z m -1.2203,15.38827 c -4.0175,0.49172 -8.2661,5.2974 -7.7872,9.31641 0.4887,4.10185 5.8958,8.11701 9.9594,7.37475 4.006,-0.73174 7.3585,-6.26802 6.614,-10.27167 -0.6632,-3.56603 -5.1859,-6.86015 -8.7862,-6.41949 z M 286.27743,629.3322 c -2.84457,1.12753 -5.64711,3.06665 -6.73143,6.0528 -0.82109,2.09343 -1.00221,4.81375 0.67758,6.54652 1.97937,1.84198 4.78508,2.19815 7.29833,2.84684 5.90505,1.29105 12.42452,1.20247 17.8118,-1.82007 1.74776,-0.94191 3.34779,-2.66446 3.19084,-4.78353 -0.15925,-2.77049 -1.91281,-5.27695 -4.13671,-6.83891 -2.82578,-1.74595 -2.18263,-1.43093 -5.46213,-2.4088 -3.27949,-0.97788 -10.32435,-0.4919 -12.64828,0.40515 z m 1329.79977,0.34177 c -3.7073,0.32024 -8.4785,0.38497 -10.6252,3.42443 -1.8313,2.59282 -1.6923,7.02972 0.2775,9.51893 1.9613,2.47839 6.01,2.19347 9.1603,2.44725 3.7554,0.30252 8.0468,0.85829 11.2459,-1.13171 2.3016,-1.43169 4.5675,-4.19958 4.3067,-6.89757 -0.2698,-2.7913 -3.2521,-4.85649 -5.7399,-6.15069 -2.5756,-1.33988 -5.7328,-1.4605 -8.6253,-1.21064 z m -13.9844,19.08203 c -4.0781,0.16893 -8.9951,3.56542 -9.5993,7.60209 -0.5032,3.36155 2.7159,6.9433 5.7898,8.39388 3.1428,1.48306 7.5953,1.18208 10.3876,-0.8866 2.4454,-1.8117 4.2965,-5.57046 3.3926,-8.47656 -1.1855,-3.81167 -5.9823,-6.79802 -9.9707,-6.63281 z m -1292.49419,0.002 c -4.06926,0.15995 -8.98192,3.54039 -9.5918,7.56686 -0.51091,3.37307 2.71366,6.97547 5.79762,8.43416 3.13061,1.48075 7.56411,1.17294 10.35194,-0.88165 2.44516,-1.80205 4.31833,-5.53996 3.42661,-8.44359 -1.17532,-3.82711 -5.98394,-6.83302 -9.98437,-6.67578 z m 1325.92189,0.34961 c -3.7053,0.31111 -8.4526,0.39269 -10.6197,3.41425 -1.8289,2.54995 -1.7623,6.92075 0.1446,9.41287 1.8684,2.44182 5.8046,2.2534 8.8651,2.54791 3.7886,0.36457 8.0824,0.90721 11.3742,-1.00352 2.3404,-1.35851 4.7836,-3.9666 4.6304,-6.66838 -0.1616,-2.85099 -3.1401,-5.07766 -5.6501,-6.43932 -2.5887,-1.40436 -5.8097,-1.51022 -8.7445,-1.26381 z m -1360.51955,0.002 c -3.70533,0.31111 -8.45264,0.39267 -10.61975,3.41424 -1.82886,2.54996 -1.7623,6.92076 0.14462,9.41288 1.86843,2.44181 5.80455,2.25339 8.86506,2.5479 3.78863,0.36457 8.08245,0.90721 11.37422,-1.00352 2.34041,-1.35851 4.78355,-3.9666 4.63038,-6.66838 -0.16162,-2.85098 -3.14004,-5.07766 -5.65004,-6.43932 -2.58872,-1.40436 -5.8097,-1.51021 -8.74449,-1.2638 z m -13.99219,19.08203 c -4.06966,0.15995 -8.98315,3.54174 -9.59179,7.5688 -0.51012,3.37522 2.71911,6.97771 5.80543,8.43612 3.12835,1.47827 7.55722,1.16975 10.34248,-0.8831 2.44539,-1.80235 4.31967,-5.53999 3.42826,-8.44409 -1.17489,-3.82763 -5.98358,-6.83497 -9.98438,-6.67773 z m 1360.51964,0 c -4.0697,0.15994 -8.9832,3.54173 -9.5918,7.5688 -0.5101,3.37522 2.7191,6.97771 5.8054,8.43612 3.1284,1.47828 7.5572,1.16976 10.3425,-0.8831 2.4454,-1.80236 4.3196,-5.54 3.4282,-8.44409 -1.1749,-3.8276 -5.9835,-6.83496 -9.9843,-6.67773 z m -1327.09971,0.35351 c -3.71481,0.31932 -8.49806,0.39209 -10.64277,3.44201 -1.82423,2.59418 -1.6686,7.02818 0.30683,9.50916 1.98567,2.49385 6.06872,2.1886 9.24647,2.44174 3.69715,0.29451 7.91329,0.84204 11.07189,-1.10189 2.32103,-1.42845 4.63094,-4.18386 4.38867,-6.89844 -0.24803,-2.77915 -3.20264,-4.85756 -5.67269,-6.15525 -2.59263,-1.36209 -5.78051,-1.48815 -8.6984,-1.23733 z m 1360.51961,0 c -3.7144,0.32361 -8.4981,0.39209 -10.6428,3.44201 -1.8242,2.59417 -1.6689,7.02843 0.3068,9.50916 1.9871,2.49503 6.0725,2.19184 9.2524,2.44078 3.7232,0.29147 7.9736,0.83362 11.1459,-1.13713 2.2943,-1.42529 4.5642,-4.1734 4.3088,-6.86224 -0.2667,-2.80714 -3.2656,-4.88724 -5.7669,-6.18894 -2.569,-1.33689 -5.7191,-1.455 -8.6042,-1.20364 z m -25.9141,23.41444 c -1.6915,2.66316 -1.484,7.00266 0.5054,9.45134 1.9582,2.41029 5.8993,2.3254 9.0041,2.39211 3.4058,0.0732 7.5904,0.22986 9.9807,-2.19734 2.1225,-2.15531 3.0735,-6.14075 1.8151,-8.89153 -1.5462,-3.37981 -6.0146,-5.22259 -9.724,-5.45601 -4.1582,-0.26167 -9.3475,1.18449 -11.5813,4.70143 z M 274.99509,687.98263 c -3.70453,0.31506 -8.45389,0.39297 -10.61758,3.41642 -1.82772,2.55397 -1.75222,6.93064 0.16206,9.42038 1.88631,2.45336 5.84881,2.25085 8.93001,2.53949 3.78051,0.35415 8.06996,0.89504 11.34482,-1.02667 2.33243,-1.36869 4.74948,-3.99828 4.57913,-6.69727 -0.17995,-2.85114 -3.17223,-5.05765 -5.68842,-6.41049 -2.58303,-1.38878 -5.78787,-1.49038 -8.71002,-1.24186 z m 1399.39851,0 c -3.7134,0.30505 -8.4629,0.4039 -10.6389,3.42835 -1.8209,2.53088 -1.7696,6.86503 0.1096,9.3529 1.8249,2.41594 5.695,2.28072 8.7073,2.58578 3.8675,0.39167 8.2446,0.92054 11.618,-1.01116 2.2993,-1.31666 4.7063,-3.8333 4.6024,-6.48087 -0.1115,-2.84081 -2.9889,-5.15419 -5.4683,-6.54533 -2.6246,-1.47262 -5.9307,-1.57607 -8.9301,-1.32967 z m 15.1543,19.08203 c -4.0479,0.15927 -8.9322,3.4918 -9.5688,7.49254 -0.5351,3.36317 2.6234,7.00688 5.6918,8.48403 3.15,1.51643 7.6412,1.21342 10.4524,-0.86494 2.4529,-1.81349 4.3041,-5.58638 3.3953,-8.49835 -1.1882,-3.80707 -5.9856,-6.77008 -9.9707,-6.61328 z m -1440.46884,4.33046 c -1.73509,2.6091 -1.52538,6.94166 0.4297,9.39025 1.91534,2.39882 5.80948,2.36225 8.87798,2.44688 3.48393,0.0961 7.77769,0.27025 10.21773,-2.21837 2.1195,-2.1617 3.07651,-6.18961 1.75163,-8.91173 -1.51797,-3.11884 -5.45999,-4.7448 -9.43836,-5.05623 -5.50191,-0.60871 -9.67961,1.10255 -11.83868,4.3492 z m 45.35939,-3.97697 c -3.72794,0.31408 -8.50811,0.41459 -10.67553,3.46393 -1.80858,2.54449 -1.70571,6.8894 0.19844,9.36319 1.87464,2.43545 5.80178,2.25481 8.86117,2.54774 3.80173,0.364 8.10773,0.89617 11.41194,-1.01899 2.3184,-1.34378 4.73554,-3.91631 4.60047,-6.59259 -0.14329,-2.83921 -3.06943,-5.0962 -5.55992,-6.46702 -2.60807,-1.43554 -5.87003,-1.54619 -8.83657,-1.29626 z m 1360.51955,0 c -3.7279,0.31408 -8.5087,0.41413 -10.6755,3.46393 -1.8084,2.54539 -1.7027,6.8912 0.2025,9.36495 1.8748,2.43428 5.8005,2.2531 8.8591,2.54598 3.7972,0.36361 8.0971,0.89469 11.3986,-1.01616 2.3233,-1.34466 4.7504,-3.91799 4.6157,-6.59894 -0.1426,-2.8392 -3.0729,-5.09347 -5.5638,-6.4635 -2.6085,-1.43474 -5.8701,-1.54619 -8.8366,-1.29626 z M 274.99509,726.85369 c -3.71877,0.31828 -8.51337,0.39137 -10.65232,3.45003 -1.82257,2.60625 -1.63623,7.05335 0.35349,9.53434 1.98646,2.47692 6.04915,2.16876 9.21494,2.41149 3.72856,0.28588 7.97476,0.80807 11.15916,-1.1524 2.26374,-1.39367 4.51841,-4.06451 4.30364,-6.71417 -0.22715,-2.80233 -3.15613,-4.95026 -5.63584,-6.27528 -2.59672,-1.38754 -5.80961,-1.50508 -8.74307,-1.25401 z m 77.74414,0 c -3.71877,0.31828 -8.51337,0.39137 -10.65232,3.45003 -1.82257,2.60625 -1.63622,7.05335 0.3535,9.53434 1.98646,2.47692 6.04914,2.16876 9.21493,2.41149 3.72856,0.28588 7.97476,0.80807 11.15916,-1.1524 2.26374,-1.39367 4.51841,-4.06451 4.30364,-6.71417 -0.22715,-2.80233 -3.15613,-4.95026 -5.63584,-6.27528 -2.59672,-1.38754 -5.80961,-1.50508 -8.74307,-1.25401 z m -38.86523,0 c -3.70523,0.30235 -8.45036,0.39196 -10.6178,3.41229 -1.82991,2.54998 -1.76615,6.92187 0.14071,9.41483 1.86837,2.44264 5.80612,2.25089 8.86702,2.54788 3.76287,0.3651 8.00912,0.8837 11.29937,-0.97822 2.3277,-1.31722 4.79883,-3.82334 4.70914,-6.49639 -0.0955,-2.84727 -2.98547,-5.17157 -5.46861,-6.56803 -2.62319,-1.47523 -5.93024,-1.57713 -8.92983,-1.33236 z m 77.74414,0 c -3.73153,0.31975 -8.5178,0.4195 -10.68508,3.47391 -1.80463,2.54331 -1.69568,6.88316 0.20799,9.35321 1.87727,2.43579 5.8054,2.25844 8.86702,2.54774 3.83166,0.36206 8.19445,0.92118 11.49802,-1.05344 2.32912,-1.39217 4.69324,-4.08216 4.49291,-6.78822 -0.20756,-2.80383 -3.16062,-4.94602 -5.64016,-6.27131 -2.5962,-1.38764 -5.80768,-1.51322 -8.7407,-1.26189 z m 1282.77546,0 c -3.7323,0.31127 -8.5178,0.41949 -10.6851,3.47391 -1.8046,2.54331 -1.6957,6.88315 0.208,9.35321 1.8773,2.43581 5.8061,2.25115 8.867,2.54788 3.763,0.36478 8.0098,0.88309 11.2994,-0.98017 2.3282,-1.31874 4.7987,-3.82807 4.7072,-6.50226 -0.097,-2.84664 -2.989,-5.16769 -5.4723,-6.56274 -2.6221,-1.47306 -5.927,-1.57979 -8.9242,-1.32983 z m -13.9942,19.08203 c -4.0697,0.15663 -8.9751,3.54263 -9.5917,7.56836 -0.5141,3.35597 2.6816,6.94091 5.7408,8.41333 3.0855,1.48508 7.4624,1.22869 10.2441,-0.76822 2.5012,-1.79553 4.48,-5.55551 3.6006,-8.50623 -1.1459,-3.84486 -5.9848,-6.86154 -9.9938,-6.70724 z M 410.26462,746.2697 c -4.11191,0.073 -9.09282,-0.24571 -12.06025,2.60166 -2.10456,2.01941 -3.37341,5.80115 -2.19662,8.46993 1.10573,2.50763 4.60329,3.20335 7.26805,3.84356 5.05395,1.21421 10.68645,1.48747 15.59154,-0.23206 2.43043,-0.85201 5.48261,-2.23508 6.10627,-4.73387 0.70416,-2.82131 -1.28211,-6.1684 -3.57427,-7.95771 -2.97213,-2.32011 -7.36484,-2.0584 -11.13472,-1.99151 z m 1283.55088,0.0195 c -3.7116,0.32286 -8.4858,0.39501 -10.6348,3.43832 -1.8242,2.5833 -1.6872,6.99912 0.2695,9.48356 1.942,2.46571 5.9598,2.2019 9.0873,2.46567 3.7532,0.31653 8.0355,0.87774 11.2467,-1.09067 2.3291,-1.42768 4.6539,-4.18958 4.4063,-6.91016 -0.2549,-2.80074 -3.2518,-4.87837 -5.7458,-6.17803 -2.5757,-1.34225 -5.7356,-1.46039 -8.6292,-1.20869 z m -1399.39072,0.002 c -3.71542,0.31402 -8.49836,0.3937 -10.64256,3.44417 -1.82257,2.5929 -1.6622,7.02097 0.30858,9.50309 1.95935,2.46773 5.99206,2.18318 9.13253,2.44046 3.72484,0.30515 7.95148,0.82588 11.15856,-1.09303 2.28325,-1.36615 4.61164,-3.97728 4.44133,-6.63258 -0.18076,-2.81812 -3.09411,-5.02928 -5.57436,-6.37941 -2.61055,-1.42106 -5.86237,-1.53301 -8.82408,-1.2827 z m 38.87305,0 c -3.71933,0.31351 -8.50674,0.39784 -10.65212,3.45219 -1.81755,2.58762 -1.65476,7.00396 0.31032,9.4814 1.96005,2.47109 5.99504,2.19444 9.1384,2.45413 3.72328,0.3076 7.9477,0.82539 11.15465,-1.09108 2.28276,-1.36417 4.61125,-3.97064 4.44523,-6.62477 -0.17591,-2.81226 -3.07534,-5.02681 -5.5481,-6.37781 -2.61587,-1.42919 -5.87808,-1.54443 -8.84838,-1.29406 z m 38.87109,0 c -3.70177,0.30665 -8.44316,0.39394 -10.60803,3.41229 -1.82848,2.54934 -1.7633,6.91892 0.14283,9.41073 1.86892,2.44317 5.80676,2.25698 8.86881,2.54989 3.80182,0.36367 8.11041,0.89894 11.41194,-1.02095 2.32245,-1.35054 4.73608,-3.93903 4.59461,-6.62189 -0.14902,-2.82598 -3.0662,-5.06482 -5.54644,-6.42745 -2.61732,-1.43795 -5.88761,-1.54916 -8.86372,-1.30262 z m 19.44141,19.4375 c -3.71034,0.31148 -8.45622,0.40613 -10.63105,3.42834 -1.82037,2.52963 -1.77586,6.86452 0.10566,9.349 1.8514,2.44471 5.77501,2.29216 8.82681,2.59344 3.843,0.37939 8.20888,0.92551 11.53924,-1.02931 2.3236,-1.36388 4.71342,-3.98989 4.55192,-6.67936 -0.16927,-2.81884 -3.09418,-5.02916 -5.57436,-6.37941 -2.60879,-1.42026 -5.85829,-1.53119 -8.81822,-1.2827 z m 38.87304,0 c -3.70506,0.30875 -8.4555,0.39182 -10.61758,3.41641 -1.82819,2.55751 -1.7464,6.93929 0.17225,9.42966 1.88926,2.45223 5.85241,2.24762 8.9349,2.53223 3.79493,0.35039 8.09709,0.87673 11.38484,-1.0507 2.29815,-1.34728 4.67378,-3.92546 4.52794,-6.58542 -0.1555,-2.83613 -3.07656,-5.085 -5.56655,-6.45167 -2.60932,-1.43216 -5.86957,-1.53769 -8.8358,-1.29051 z m 1166.15633,0 c -3.7157,0.32808 -8.5076,0.39014 -10.6465,3.44612 -1.8239,2.60601 -1.6451,7.05702 0.3477,9.5363 2.0155,2.50758 6.1357,2.17699 9.3439,2.41747 3.6858,0.27628 7.9056,0.83014 11.0291,-1.14599 2.3171,-1.46593 4.5746,-4.30385 4.2725,-7.02905 -0.3087,-2.78477 -3.3356,-4.78217 -5.8332,-6.05197 -2.5536,-1.29826 -5.66,-1.42484 -8.5135,-1.17288 z m 77.7461,0 c -3.7103,0.31242 -8.4569,0.40566 -10.6311,3.42834 -1.8202,2.53055 -1.7696,6.86387 0.1096,9.35095 1.8284,2.41983 5.7053,2.28395 8.723,2.58774 3.8739,0.38999 8.2775,0.94732 11.6354,-1.02327 2.3283,-1.36634 4.7196,-4.0028 4.5537,-6.69728 -0.1736,-2.81949 -3.1059,-5.023 -5.5885,-6.37066 -2.6056,-1.41439 -5.8479,-1.52458 -8.8021,-1.27582 z m -38.8653,0 c -3.7051,0.31116 -8.4525,0.39108 -10.6197,3.41229 -1.8295,2.55033 -1.7659,6.9246 0.1446,9.41483 1.89,2.46355 5.8677,2.25966 8.9591,2.55043 3.7655,0.35418 8.0422,0.903 11.3006,-1.01719 2.3538,-1.3871 4.7796,-4.0593 4.5977,-6.78534 -0.1879,-2.81461 -3.1506,-4.97862 -5.636,-6.31279 -2.5953,-1.39318 -5.811,-1.50874 -8.7463,-1.26223 z M 445.64353,784.80876 c -4.05504,0.21061 -8.95805,3.5166 -9.57549,7.52988 -0.5201,3.38062 2.68853,7.02417 5.78643,8.47403 3.2102,1.50242 7.79984,1.17197 10.58398,-1.02148 2.43352,-1.91721 4.06016,-5.8623 3.03321,-8.78516 -1.28383,-3.65398 -5.96038,-6.39816 -9.82813,-6.19727 z m 963.23217,2.93269 c -2.0245,2.09437 -3.3678,5.7852 -2.205,8.45596 1.0794,2.47929 4.5146,3.20477 7.1406,3.84968 5.0578,1.24211 10.7036,1.50942 15.6231,-0.20038 2.4671,-0.85745 5.5682,-2.24816 6.2083,-4.78032 0.7074,-2.79821 -1.3529,-6.00882 -3.526,-7.90825 -2.8022,-2.44924 -6.9924,-3.14833 -10.714,-3.14125 -4.3564,0.008 -9.4993,0.59239 -12.527,3.72456 z m 38.8391,0.0208 c -2.0911,2.00886 -3.3405,5.76471 -2.1792,8.42169 1.0889,2.49139 4.5427,3.2173 7.1837,3.86386 5.0621,1.23928 10.7166,1.52046 15.6333,-0.20777 2.4671,-0.8672 5.5461,-2.29105 6.1845,-4.82703 0.6927,-2.75198 -1.2169,-6.01667 -3.4314,-7.79134 -2.7873,-2.23372 -6.9982,-3.19661 -10.7309,-3.20135 -4.4005,-0.006 -9.6849,0.8838 -12.66,3.74194 z m 38.9015,-0.0162 c -2.1006,2.01214 -3.3552,5.77255 -2.2035,8.44365 1.055,2.44684 4.425,3.19573 7.01,3.84195 5.0879,1.2719 10.7665,1.50651 15.7325,-0.17986 2.4379,-0.82788 5.4929,-2.15189 6.1801,-4.63313 0.7613,-2.74859 -1.0402,-6.09579 -3.23,-7.92313 -2.6749,-2.23213 -6.9659,-3.23647 -10.692,-3.2621 -4.4415,-0.0306 -9.8249,0.86555 -12.7971,3.71262 z m 38.8427,0.0162 c -2.0911,2.00886 -3.3406,5.7647 -2.1793,8.42169 1.0889,2.49142 4.5428,3.21731 7.1838,3.86386 5.062,1.23926 10.7172,1.52233 15.6332,-0.20777 2.4695,-0.8691 5.5505,-2.29781 6.1876,-4.83708 0.6899,-2.74994 -1.2213,-6.00917 -3.4344,-7.78129 -2.7882,-2.23263 -6.9982,-3.1966 -10.731,-3.20133 -4.4004,-0.006 -9.6848,0.88382 -12.6599,3.74192 z m 38.905,-0.0208 c -2.1036,2.01492 -3.3769,5.78917 -2.205,8.45593 1.1049,2.51434 4.6092,3.21622 7.279,3.86025 5.0376,1.21519 10.6579,1.50307 15.5448,-0.22095 2.4617,-0.86843 5.5339,-2.29416 6.1668,-4.82662 0.6896,-2.75904 -1.233,-6.02558 -3.4546,-7.80103 -2.7831,-2.22414 -6.9812,-3.18127 -10.704,-3.18671 -4.3878,-0.006 -9.6567,0.87404 -12.627,3.71913 z M 411.05369,785.1623 c -3.7044,0.31242 -8.45036,0.39196 -10.6178,3.41229 -1.82991,2.54998 -1.76595,6.92171 0.14071,9.41483 1.86703,2.44129 5.80177,2.25475 8.86116,2.54774 3.80177,0.36408 8.13015,0.93459 11.41212,-1.01853 2.37098,-1.41099 4.78807,-4.14427 4.57881,-6.89539 -0.21211,-2.78857 -3.17437,-4.89631 -5.64492,-6.20686 -2.59711,-1.37769 -5.80058,-1.50114 -8.73008,-1.25408 z m 1205.02351,0.002 c -3.7073,0.32018 -8.4785,0.38497 -10.6252,3.42444 -1.8313,2.59282 -1.6923,7.02971 0.2775,9.51892 1.9604,2.4773 6.0074,2.19216 9.1563,2.44619 3.754,0.30285 8.0412,0.85582 11.2421,-1.12869 2.2999,-1.42586 4.5729,-4.18013 4.3184,-6.87414 -0.2645,-2.79935 -3.2523,-4.87643 -5.7457,-6.17607 -2.574,-1.34162 -5.7315,-1.46041 -8.6234,-1.21065 z m 38.8808,0 c -3.7283,0.30966 -8.5087,0.41413 -10.6755,3.46393 -1.8084,2.54539 -1.7027,6.8912 0.2025,9.36495 1.8748,2.43428 5.8005,2.25311 8.8591,2.54599 3.7972,0.36361 8.0895,0.88152 11.3986,-1.01617 2.3015,-1.31987 4.7172,-3.83456 4.6138,-6.48565 -0.1107,-2.83984 -2.9897,-5.15088 -5.4683,-6.54143 -2.6248,-1.47258 -5.9309,-1.58073 -8.9302,-1.33162 z m -213.8046,19.4336 c -3.708,0.32019 -8.4831,0.38236 -10.6272,3.42443 -1.8319,2.59902 -1.6828,7.04643 0.2971,9.53455 1.9846,2.49405 6.0685,2.18947 9.2462,2.43674 3.7295,0.29021 7.9887,0.8314 11.1637,-1.14677 2.289,-1.42616 4.5454,-4.17553 4.2893,-6.86028 -0.267,-2.79916 -3.2505,-4.87801 -5.7438,-6.17803 -2.5744,-1.34229 -5.7328,-1.46042 -8.6253,-1.21064 z m 38.873,0 c -3.7187,0.31876 -8.5134,0.39137 -10.6523,3.45003 -1.8226,2.60625 -1.6361,7.05329 0.3535,9.53434 1.986,2.47651 6.0482,2.16395 9.213,2.41163 3.6939,0.28909 7.8927,0.81448 11.0603,-1.10768 2.2931,-1.39146 4.6106,-4.05711 4.4083,-6.73168 -0.213,-2.8152 -3.1637,-4.97547 -5.6533,-6.30689 -2.5921,-1.38624 -5.8007,-1.5008 -8.7295,-1.24975 z m 77.7441,0 c -3.7188,0.31806 -8.5134,0.39137 -10.6523,3.45003 -1.8226,2.60625 -1.6361,7.05328 0.3535,9.53434 1.986,2.47651 6.0479,2.1677 9.213,2.41166 3.7236,0.287 7.9616,0.80947 11.1454,-1.14272 2.2665,-1.38974 4.5322,-4.05212 4.3233,-6.70253 -0.2213,-2.80774 -3.1529,-4.96573 -5.6358,-6.29517 -2.5968,-1.3904 -5.8122,-1.50663 -8.7471,-1.25561 z m -1127.27931,0 c -3.69759,0.30357 -8.42075,0.39034 -10.60044,3.39255 -1.83486,2.52725 -1.81591,6.86304 0.0477,9.36917 1.76247,2.37011 5.53592,2.2787 8.47266,2.59375 3.94369,0.42307 8.40948,0.96959 11.85767,-0.99043 2.30243,-1.30874 4.72365,-3.81833 4.61889,-6.46465 -0.11375,-2.87344 -3.04276,-5.20074 -5.55447,-6.60106 -2.60194,-1.45062 -5.87301,-1.54308 -8.84201,-1.29933 z m 932.92781,0 c -3.7055,0.30638 -8.4522,0.39128 -10.6198,3.41229 -1.8297,2.55013 -1.7644,6.92201 0.1427,9.41483 1.8682,2.44201 5.8048,2.25108 8.8651,2.54788 3.7642,0.36507 8.0122,0.88304 11.3032,-0.98017 2.3263,-1.31704 4.8022,-3.82292 4.7053,-6.49444 -0.1043,-2.8738 -3.0428,-5.20074 -5.5545,-6.60106 -2.6019,-1.45062 -5.8731,-1.5448 -8.842,-1.29933 z m 38.8711,0 c -3.7315,0.31997 -8.5178,0.41949 -10.6851,3.47391 -1.8046,2.54331 -1.6957,6.88316 0.208,9.35321 1.8773,2.43579 5.8057,2.2551 8.867,2.54774 3.8019,0.36343 8.129,0.9309 11.4121,-1.02048 2.3663,-1.40649 4.7817,-4.12879 4.5769,-6.87391 -0.2082,-2.79042 -3.1674,-4.90555 -5.6378,-6.21958 -2.5991,-1.38245 -5.808,-1.5124 -8.7411,-1.26089 z m 116.6172,0 c -3.7055,0.30638 -8.4519,0.39151 -10.6198,3.41229 -1.83,2.54993 -1.7662,6.92187 0.1407,9.41483 1.8684,2.44264 5.8061,2.25089 8.867,2.54788 3.7629,0.3651 8.0091,0.88372 11.2994,-0.97821 2.3277,-1.31722 4.8057,-3.8236 4.7091,-6.4964 -0.1039,-2.87379 -3.0427,-5.20074 -5.5544,-6.60106 -2.6019,-1.45063 -5.8731,-1.5448 -8.842,-1.29933 z m 77.7441,0 c -3.7055,0.30679 -8.4518,0.39153 -10.6197,3.41229 -1.83,2.54993 -1.7662,6.92187 0.1407,9.41483 1.8684,2.44264 5.8058,2.25417 8.867,2.54788 3.7946,0.36407 8.0837,0.88433 11.3913,-1.01078 2.3025,-1.31925 4.7271,-3.83392 4.6172,-6.48532 -0.119,-2.87013 -3.0513,-5.18667 -5.5619,-6.58265 -2.6013,-1.44643 -5.8684,-1.54184 -8.8346,-1.29625 z m -179.2012,19.08398 c -4.0689,0.16862 -8.9819,3.54038 -9.5918,7.56686 -0.5109,3.37308 2.7141,6.97468 5.7977,8.43416 3.1266,1.47985 7.5606,1.18333 10.3405,-0.87529 2.4608,-1.82227 4.3234,-5.60652 3.4108,-8.52937 -1.1866,-3.80037 -5.9793,-6.76121 -9.9572,-6.59636 z m -86.3319,2.94124 c -2.1473,2.01302 -3.3302,5.88835 -2.1205,8.57163 1.1037,2.44831 4.5293,3.10704 7.1418,3.72919 5.0539,1.20352 10.6701,1.47312 15.5841,-0.21276 2.4224,-0.83107 5.4485,-2.16432 6.1287,-4.63333 0.7549,-2.73984 -0.9809,-6.1339 -3.2081,-7.89918 -2.9755,-2.35843 -7.4566,-1.80602 -11.2532,-1.7632 -4.1563,0.0469 -9.2403,-0.63515 -12.2728,2.20765 z m -881.19938,-2.58965 c -3.70363,0.30915 -8.44718,0.39469 -10.61389,3.41425 -1.82867,2.54846 -1.7663,6.9171 0.13876,9.40897 1.86875,2.44438 5.80845,2.25433 8.87092,2.55179 3.76425,0.36562 8.01881,0.89502 11.30352,-0.97953 2.34313,-1.3372 4.82153,-3.89164 4.70303,-6.58688 -0.12573,-2.85972 -3.07724,-5.14215 -5.58412,-6.52394 -2.60142,-1.4339 -5.85808,-1.53175 -8.81822,-1.28466 z m 932.92778,0 c -3.7036,0.30963 -8.4472,0.39468 -10.6139,3.41425 -1.8287,2.54846 -1.7663,6.91711 0.1388,9.40897 1.8688,2.44437 5.8084,2.25433 8.8709,2.55179 3.7642,0.36563 8.0188,0.895 11.3035,-0.97953 2.3432,-1.3372 4.8218,-3.89163 4.7031,-6.58688 -0.126,-2.86138 -3.0798,-5.1448 -5.5884,-6.52688 -2.6004,-1.43262 -5.8554,-1.52906 -8.814,-1.28172 z M 435.93259,843.1155 c -4.06966,0.15994 -8.98316,3.54174 -9.5918,7.56881 -0.51012,3.37522 2.71948,6.97694 5.80544,8.43612 3.12549,1.47787 7.55056,1.1725 10.33467,-0.87725 2.44858,-1.80272 4.3275,-5.54293 3.43607,-8.44994 -1.17383,-3.82795 -5.98358,-6.83498 -9.98438,-6.67774 z m 916.13871,4.32851 c -1.737,2.63528 -1.4817,7.00606 0.5094,9.45505 1.9614,2.41252 5.9071,2.33553 9.0158,2.39219 3.4421,0.0627 7.6949,0.20658 10.0725,-2.28317 2.1,-2.19897 2.9742,-6.26477 1.6048,-8.97953 -1.5567,-3.08594 -6.0021,-5.11012 -9.6768,-5.31762 -4.1467,-0.23415 -9.3814,1.47987 -11.5257,4.73308 z m -882.71878,-3.97502 c -3.71197,0.32126 -8.49319,0.38684 -10.63691,3.4342 -1.8277,2.59813 -1.67081,7.04044 0.30878,9.52478 1.9846,2.49063 6.06403,2.18172 9.23866,2.43393 3.6965,0.29367 7.91535,0.84915 11.06993,-1.09994 2.32886,-1.43891 4.64068,-4.21996 4.38282,-6.94531 -0.26365,-2.78656 -3.25011,-4.84375 -5.73357,-6.13481 -2.57737,-1.33988 -5.73569,-1.46332 -8.62971,-1.21285 z m 855.18368,0 c -3.7119,0.32151 -8.4935,0.38663 -10.6369,3.4342 -1.8278,2.59886 -1.6698,7.04226 0.3107,9.52674 1.985,2.49012 6.0642,2.18014 9.2387,2.432 3.6959,0.29322 7.913,0.84735 11.0679,-1.09997 2.3282,-1.43708 4.6431,-4.2135 4.3868,-6.9375 -0.2626,-2.7908 -3.2543,-4.85146 -5.7415,-6.14437 -2.5762,-1.33917 -5.7331,-1.46164 -8.6257,-1.2111 z m -840.01376,19.08203 c -4.07582,0.16323 -8.99334,3.55773 -9.59766,7.5918 -0.50453,3.36794 2.72444,6.95358 5.80377,8.40798 3.12826,1.47751 7.55606,1.17889 10.34219,-0.8721 2.44994,-1.80351 4.3271,-5.54763 3.43412,-8.4558 -1.1748,-3.82595 -5.98337,-6.83204 -9.98242,-6.67188 z m -34.60352,0.35352 c -3.66296,0.57195 -8.41675,0.38893 -10.59262,3.3906 -1.83527,2.53181 -1.81932,6.88264 0.0614,9.38088 1.84055,2.44489 5.76076,2.29295 8.80591,2.59656 3.8441,0.38327 8.21143,0.93443 11.54465,-1.01842 2.33538,-1.36824 4.74988,-4.00588 4.57718,-6.70704 -0.18213,-2.84857 -3.17388,-5.04995 -5.68842,-6.40073 -2.58297,-1.38754 -5.78336,-1.03435 -8.70807,-1.24185 z m 310.97266,0 c -3.70901,0.33141 -8.48788,0.38701 -10.63105,3.43224 -1.8286,2.59824 -1.67519,7.04199 0.30488,9.52674 1.98906,2.49603 6.07815,2.18732 9.26018,2.43471 3.72285,0.28944 7.99187,0.8619 11.14411,-1.13979 2.32665,-1.47744 4.58732,-4.35018 4.2595,-7.08672 -0.33665,-2.81031 -3.43662,-4.77549 -5.96953,-6.03864 -2.51878,-1.2561 -5.56464,-1.37904 -8.36809,-1.12854 z m 533.61472,3.39471 c -1.8336,2.52727 -1.8217,6.86857 0.051,9.36701 1.8227,2.43174 5.7134,2.29817 8.7369,2.60538 3.8706,0.39329 8.2697,0.94805 11.6273,-1.01748 2.3359,-1.36742 4.7499,-4.00587 4.5772,-6.70704 -0.1821,-2.84858 -3.1739,-5.04995 -5.6885,-6.40073 -2.5829,-1.38752 -6.0808,-1.70054 -9.1558,-1.41569 -3.5705,0.33073 -7.97,0.56652 -10.1481,3.56855 z m -572.47605,-3.39471 c -3.72793,0.31424 -8.50811,0.41459 -10.67553,3.46393 -1.80858,2.54449 -1.70571,6.8894 0.19844,9.36319 1.87464,2.43545 5.80177,2.25481 8.86116,2.54774 3.80173,0.364 8.09987,0.88254 11.41195,-1.01899 2.29784,-1.31923 4.71407,-3.83361 4.60242,-6.48087 -0.12102,-2.86934 -3.05205,-5.18442 -5.56229,-6.57958 -2.60199,-1.44616 -5.8698,-1.54546 -8.83615,-1.29542 z m 611.11955,4.25724 c -1.5784,2.69256 -1.7917,6.8728 0.09,9.36288 1.8438,2.43996 5.7586,2.28667 8.8018,2.58973 3.8364,0.38205 8.2069,0.95611 11.5219,-1.01237 2.3733,-1.40929 4.5022,-4.13674 4.5845,-6.89572 0.076,-2.55414 -1.841,-5.05416 -3.8561,-6.62532 -2.9433,-2.29471 -7.0484,-3.51179 -10.7579,-3.1021 -3.922,0.43317 -8.3887,2.27883 -10.3842,5.6829 z m -42.0062,14.82479 c -4.0824,0.21217 -9.017,3.55767 -9.6247,7.60013 -0.5059,3.36555 2.7125,6.96874 5.7985,8.40377 3.2175,1.49616 7.8091,1.1733 10.5957,-1.02343 2.4303,-1.91589 4.0492,-5.85688 3.0254,-8.77735 -1.2785,-3.64705 -5.9355,-6.4037 -9.7949,-6.20312 z m -821.78132,0.35351 c -3.73163,0.31855 -8.5178,0.41951 -10.68508,3.47392 -1.80462,2.54331 -1.69554,6.88305 0.20799,9.35321 1.87637,2.43491 5.80308,2.25501 8.86312,2.54774 3.80188,0.36369 8.12547,0.92497 11.4122,-1.02028 2.35872,-1.39601 4.7747,-4.0931 4.58263,-6.82724 -0.19636,-2.79513 -3.14458,-4.9331 -5.61465,-6.256 -2.60285,-1.39401 -5.82427,-1.52249 -8.76621,-1.27135 z m 194.36133,0 c -3.67333,0.57566 -8.43984,0.4002 -10.61975,3.4123 -1.82719,2.52473 -1.80601,6.85707 0.0651,9.34942 1.82458,2.43038 5.71361,2.29682 8.73696,2.6054 3.86058,0.39403 8.24594,0.95002 11.5985,-1.00439 2.34663,-1.36799 4.7775,-4.00698 4.61181,-6.71819 -0.17308,-2.83211 -3.13983,-5.0302 -5.63619,-6.3789 -2.59466,-1.40181 -5.81485,-1.05416 -8.75639,-1.26564 z m 38.86914,0 c -3.71649,0.31421 -8.47981,0.40628 -10.64667,3.44202 -1.81778,2.54669 -1.73335,6.90289 0.17153,9.38511 1.87109,2.43818 5.80182,2.2544 8.86117,2.54776 3.79584,0.36398 8.10971,0.9222 11.39471,-1.0142 2.36017,-1.39124 4.78667,-4.07642 4.60207,-6.8099 -0.1891,-2.80005 -3.13679,-4.95081 -5.60925,-6.27857 -2.60345,-1.3981 -5.82896,-1.52117 -8.77356,-1.27222 z m 38.87305,0 c -3.67271,0.57566 -8.43833,0.40064 -10.6178,3.4123 -1.82713,2.52477 -1.80601,6.85707 0.0651,9.34942 1.82458,2.43038 5.71361,2.29682 8.73696,2.6054 3.86058,0.39403 8.24594,0.95002 11.5985,-1.00439 2.34663,-1.36799 4.7704,-4.00656 4.61181,-6.71819 -0.16395,-2.80314 -3.07935,-4.99742 -5.54453,-6.34179 -2.61782,-1.42762 -5.87617,-1.08504 -8.85,-1.30275 z m 38.87109,0 c -3.71649,0.31421 -8.47981,0.40628 -10.64667,3.44202 -1.81778,2.54669 -1.73334,6.90289 0.17154,9.38511 1.87109,2.43818 5.80181,2.2544 8.86116,2.54776 3.79584,0.36398 8.10971,0.9222 11.39471,-1.0142 2.36017,-1.39124 4.78667,-4.07642 4.60207,-6.8099 -0.1891,-2.80005 -3.13679,-4.95081 -5.60925,-6.27857 -2.60345,-1.3981 -5.82896,-1.52117 -8.77356,-1.27222 z m 38.87305,0 c -3.72768,0.31711 -8.50811,0.41459 -10.67553,3.46393 -1.80858,2.5445 -1.70572,6.88941 0.19844,9.3632 1.87464,2.43544 5.80176,2.25493 8.86116,2.54771 3.80251,0.36389 8.12684,0.9253 11.41415,-1.02025 2.35874,-1.39599 4.77471,-4.0931 4.58264,-6.82724 -0.19636,-2.79513 -3.14458,-4.9331 -5.61465,-6.256 -2.60285,-1.39401 -5.8242,-1.52163 -8.76621,-1.27135 z m 38.87304,0 c -3.71704,0.31501 -8.48132,0.40583 -10.64862,3.44202 -1.81785,2.54664 -1.73334,6.9029 0.17154,9.38511 1.87109,2.43818 5.80184,2.25408 8.86116,2.54774 3.7964,0.36441 8.10395,0.91225 11.3967,-1.01214 2.34513,-1.37057 4.7775,-4.00699 4.6118,-6.71819 -0.17308,-2.83211 -3.13983,-5.0302 -5.63619,-6.3789 -2.59466,-1.40181 -5.8178,-1.51468 -8.75639,-1.26564 z m 38.8711,0 c -3.73163,0.31855 -8.5178,0.41951 -10.68508,3.47392 -1.80462,2.54331 -1.69547,6.883 0.20799,9.35321 1.87591,2.43446 5.80176,2.25493 8.86116,2.54771 3.80251,0.36389 8.12684,0.9253 11.41415,-1.02025 2.35874,-1.39599 4.77471,-4.0931 4.58264,-6.82724 -0.19636,-2.79513 -3.14458,-4.9331 -5.61465,-6.256 -2.60285,-1.39401 -5.82427,-1.52249 -8.76621,-1.27135 z m 427.59182,0 c -3.7315,0.31953 -8.5184,0.41906 -10.685,3.47392 -1.8044,2.54419 -1.6925,6.88478 0.212,9.35496 1.8761,2.4333 5.8005,2.25347 8.8591,2.54596 3.8019,0.36357 8.1324,0.93672 11.4122,-1.02025 2.3739,-1.41648 4.7859,-4.16253 4.5727,-6.91872 -0.2145,-2.77306 -3.1596,-4.86694 -5.6163,-6.17089 -2.6044,-1.38234 -5.8169,-1.51654 -8.7547,-1.26498 z m -713.68948,19.08399 c -4.06857,0.18562 -8.98211,3.5419 -9.5918,7.56881 -0.5107,3.3731 2.71367,6.97545 5.79763,8.43416 3.12949,1.48025 7.57751,1.19427 10.3483,-0.8812 2.48069,-1.85817 4.31343,-5.71944 3.36205,-8.66928 -1.21047,-3.75319 -5.97671,-6.63222 -9.91618,-6.45249 z m 379.00195,0 c -4.06905,0.17473 -8.98211,3.5419 -9.5918,7.56881 -0.5107,3.3731 2.71355,6.97572 5.79763,8.43416 3.13082,1.48054 7.57357,1.18397 10.3521,-0.88334 2.46481,-1.8339 4.3148,-5.6413 3.38934,-8.5708 -1.19588,-3.78541 -5.9811,-6.71914 -9.94727,-6.54883 z m -358.43548,2.94308 c -2.02526,2.08416 -3.35222,5.77257 -2.19375,8.43779 1.07466,2.47239 4.49403,3.20622 7.11147,3.85168 5.07755,1.25212 10.74256,1.50018 15.68769,-0.2013 2.42987,-0.83605 5.46505,-2.18483 6.13733,-4.665 0.74412,-2.74521 -1.14859,-5.97672 -3.25558,-7.88735 -2.76801,-2.51005 -6.99297,-3.22601 -10.72952,-3.24613 -4.42868,-0.0238 -9.67125,0.53416 -12.75764,3.71031 z m 310.95031,0.0154 c -2.03051,2.12106 -3.30444,5.88106 -2.0942,8.55635 1.10715,2.4474 4.53037,3.10807 7.14376,3.72914 5.07663,1.20645 10.7209,1.47886 15.65241,-0.22638 2.39843,-0.82934 5.38592,-2.16764 6.05452,-4.61575 0.74955,-2.74454 -1.11325,-5.98902 -3.21509,-7.90645 -2.76848,-2.52558 -7.0108,-3.24304 -10.75815,-3.2634 -4.43838,-0.0241 -9.71398,0.52034 -12.78325,3.72649 z m -453.57342,-2.60693 c -3.71168,0.30848 -8.46727,0.39765 -10.63516,3.42618 -1.82424,2.54845 -1.75004,6.91317 0.15612,9.40094 1.8704,2.44109 5.80612,2.25089 8.86702,2.54788 3.76287,0.3651 8.00912,0.88371 11.29937,-0.97821 2.3277,-1.31722 4.8065,-3.82362 4.70913,-6.4964 -0.10477,-2.87595 -3.04823,-5.20243 -5.56228,-6.60301 -2.60006,-1.4485 -5.86811,-1.5439 -8.8342,-1.29738 z m 272.09375,0.002 c -3.71469,0.32303 -8.49729,0.39435 -10.64277,3.44397 -1.82363,2.59214 -1.66905,7.02059 0.30097,9.5033 1.96396,2.47507 6.00843,2.19324 9.15796,2.44533 3.76185,0.30111 8.05951,0.85014 11.26373,-1.14364 2.28984,-1.42482 4.54561,-4.17556 4.28925,-6.86028 -0.26732,-2.79958 -3.25199,-4.87797 -5.74577,-6.17803 -2.57389,-1.34182 -5.73164,-1.46211 -8.62337,-1.21065 z m 544.21487,-0.002 c -3.7053,0.31111 -8.4526,0.39269 -10.6197,3.41425 -1.8289,2.54995 -1.7655,6.92319 0.1446,9.41287 1.8913,2.46512 5.8717,2.2599 8.965,2.55182 3.7564,0.3545 8.0122,0.88852 11.2743,-1.00744 2.3397,-1.35982 4.7836,-3.96659 4.6304,-6.66837 -0.1616,-2.85099 -3.1401,-5.07767 -5.6501,-6.43933 -2.5887,-1.40436 -5.8097,-1.51021 -8.7445,-1.2638 z m -621.94924,0.002 c -3.70666,0.30251 -8.45416,0.39223 -10.62171,3.41425 -1.82893,2.54991 -1.76231,6.92076 0.14462,9.41288 1.86843,2.44181 5.80449,2.25405 8.86506,2.54788 3.79399,0.36424 8.0809,0.88197 11.38962,-1.00997 2.29908,-1.31462 4.71677,-3.81807 4.61889,-6.46465 -0.10529,-2.84692 -2.9855,-5.17152 -5.46861,-6.56802 -2.62261,-1.47496 -5.92893,-1.57712 -8.92787,-1.33237 z m 38.87109,0 c -3.68318,0.57974 -8.46515,0.41103 -10.64472,3.43616 -1.81722,2.52221 -1.7748,6.83982 0.092,9.32556 1.80673,2.40576 5.65028,2.29128 8.64289,2.60153 3.89495,0.40379 8.3219,0.96673 11.70428,-1.00638 2.34433,-1.36756 4.76207,-4.00897 4.60009,-6.71819 -0.16779,-2.80633 -3.09082,-4.99787 -5.5602,-6.34167 -2.61431,-1.42267 -5.86589,-1.08027 -8.83433,-1.29701 z m 77.74414,0 c -3.70594,0.31129 -8.45416,0.39223 -10.62171,3.41425 -1.82893,2.54991 -1.7624,6.92083 0.14462,9.41288 1.86889,2.44223 5.8054,2.25844 8.86702,2.54774 3.83166,0.36206 8.19385,0.92017 11.49802,-1.05344 2.32837,-1.39075 4.6936,-4.07725 4.4948,-6.78206 -0.2062,-2.80536 -3.15978,-4.95044 -5.64028,-6.27698 -2.59641,-1.38853 -5.80842,-1.50884 -8.74247,-1.26239 z m 38.87305,0 c -3.71204,0.30416 -8.46728,0.39765 -10.63517,3.42618 -1.82424,2.54845 -1.75004,6.91318 0.15613,9.40095 1.8704,2.44109 5.80611,2.25089 8.86701,2.54788 3.76287,0.3651 8.00912,0.8837 11.29937,-0.97822 2.3277,-1.31722 4.79883,-3.82335 4.70914,-6.4964 -0.0955,-2.84727 -2.9855,-5.17152 -5.46861,-6.56802 -2.62261,-1.47496 -5.92901,-1.57809 -8.92787,-1.33237 z m 38.86914,0 c -3.70533,0.31111 -8.45264,0.39268 -10.61975,3.41425 -1.82886,2.54996 -1.76231,6.92076 0.14461,9.41288 1.86843,2.44181 5.80456,2.25339 8.86507,2.5479 3.78863,0.36457 8.08244,0.90721 11.37421,-1.00352 2.34041,-1.35851 4.78355,-3.9666 4.63039,-6.66838 -0.16162,-2.85098 -3.14004,-5.07766 -5.65004,-6.43932 -2.58872,-1.40437 -5.8097,-1.51022 -8.74449,-1.26381 z m 38.875,0 c -3.71168,0.30848 -8.46728,0.39765 -10.63517,3.42618 -1.82424,2.54845 -1.75004,6.91318 0.15613,9.40095 1.8704,2.44109 5.80611,2.25089 8.86701,2.54788 3.76287,0.3651 8.00912,0.8837 11.29937,-0.97822 2.3277,-1.31722 4.80651,-3.82362 4.70914,-6.4964 -0.10477,-2.87595 -3.04824,-5.20243 -5.56229,-6.60301 -2.60006,-1.44849 -5.8681,-1.54389 -8.83419,-1.29738 z m -441.58594,19.08194 c -4.06012,0.16193 -8.95356,3.51952 -9.5833,7.53378 -0.52595,3.35269 2.63338,6.97188 5.69268,8.44083 3.15264,1.51376 7.64281,1.21631 10.45631,-0.86091 2.45277,-1.81089 4.30689,-5.57948 3.40111,-8.49066 -1.18507,-3.8088 -5.98107,-6.782 -9.9668,-6.62304 z m 111.16406,0.35351 c -3.7182,0.32427 -8.50741,0.39567 -10.65211,3.45024 -1.8216,2.59439 -1.66022,7.02634 0.31617,9.50484 1.98844,2.49361 6.07233,2.191 9.25205,2.43872 3.72818,0.29045 7.98561,0.83197 11.15987,-1.14484 2.29035,-1.42635 4.54926,-4.17624 4.29316,-6.86224 -0.26693,-2.79961 -3.25183,-4.87825 -5.74576,-6.17803 -2.57396,-1.34149 -5.7318,-1.46087 -8.62338,-1.20869 z m 38.87305,0 c -3.72823,0.31734 -8.51406,0.4156 -10.67532,3.47 -1.80658,2.55315 -1.68406,6.90944 0.23378,9.38011 1.89834,2.44554 5.85507,2.23607 8.93725,2.52685 3.73097,0.35199 7.94568,0.8774 11.19969,-0.98148 2.34414,-1.33911 4.82556,-3.89373 4.70694,-6.59079 -0.12576,-2.85922 -3.07742,-5.1409 -5.58412,-6.52199 -2.6016,-1.43338 -5.85858,-1.53462 -8.81822,-1.2827 z m 388.71885,0 c -3.7182,0.32426 -8.5075,0.39565 -10.6522,3.45024 -1.8216,2.59439 -1.6602,7.02634 0.3162,9.50484 1.9884,2.49362 6.0723,2.191 9.2521,2.43872 3.7282,0.29044 7.9856,0.83195 11.1598,-1.14484 2.2904,-1.42635 4.5493,-4.17623 4.2932,-6.86224 -0.2669,-2.79962 -3.2519,-4.87825 -5.7458,-6.17803 -2.5739,-1.34147 -5.7317,-1.46086 -8.6233,-1.20869 z m 272.1054,0 c -3.7282,0.31783 -8.514,0.41561 -10.6753,3.47 -1.8066,2.55316 -1.684,6.90944 0.2338,9.38011 1.8983,2.44553 5.8551,2.23582 8.9372,2.52685 3.7284,0.35205 7.9368,0.87235 11.1921,-0.97898 2.3385,-1.32991 4.8237,-3.86234 4.7146,-6.55032 -0.1166,-2.87219 -3.0727,-5.17718 -5.5884,-6.5679 -2.5982,-1.43632 -5.8559,-1.53193 -8.814,-1.27976 z m -777.43558,0 c -3.71199,0.30931 -8.49007,0.38357 -10.63565,3.42841 -1.82856,2.59496 -1.67447,7.03133 0.29776,9.51886 1.95606,2.46714 5.9868,2.18283 9.12472,2.44046 3.72344,0.3057 7.9477,0.82539 11.15466,-1.09108 2.28276,-1.36417 4.61122,-3.97064 4.44523,-6.62477 -0.17582,-2.81135 -3.07444,-5.02485 -5.54615,-6.37586 -2.61344,-1.42848 -5.8725,-1.54334 -8.84057,-1.29602 z m 427.5918,0 c -3.70348,0.30655 -8.45278,0.38581 -10.61463,3.40841 -1.83154,2.56077 -1.74916,6.95018 0.17325,9.44345 1.88947,2.45055 5.85213,2.23794 8.93318,2.5251 3.76329,0.35075 8.01521,0.86667 11.2933,-1.01469 2.3017,-1.32099 4.72599,-3.83574 4.61529,-6.48727 -0.11979,-2.86939 -3.05203,-5.18445 -5.56229,-6.57957 -2.60258,-1.44643 -5.87074,-1.54105 -8.8381,-1.29543 z m 38.87109,0 c -3.71603,0.31431 -8.49815,0.38996 -10.64646,3.43831 -1.82565,2.59051 -1.67708,7.01906 0.29099,9.5031 1.95976,2.47355 6.00067,2.1881 9.14589,2.44641 3.72294,0.30576 7.95282,0.83578 11.15323,-1.09066 2.3003,-1.38464 4.63712,-4.03908 4.44502,-6.71708 -0.20164,-2.81104 -3.14216,-4.97808 -5.62441,-6.31264 -2.59987,-1.3978 -5.82295,-1.51622 -8.76426,-1.26744 z m 92.90829,19.08399 c -4.0435,0.16271 -8.9287,3.47352 -9.571,7.46904 -0.5414,3.36807 2.6162,7.02441 5.6882,8.50752 3.1435,1.51761 7.6326,1.22191 10.4369,-0.85675 2.4685,-1.82978 4.3182,-5.64082 3.3931,-8.57099 -1.1952,-3.78562 -5.9806,-6.70843 -9.9472,-6.54882 z m -581.73377,1.96489 c -2.29787,1.35409 -5.17654,3.33581 -5.29329,6.00042 -0.13575,3.09808 2.77378,6.04884 5.5206,7.48812 3.37421,1.76801 7.79948,1.51563 11.42299,0.34034 2.67372,-0.86722 5.97581,-2.42857 6.67672,-5.15062 0.78941,-3.06574 -1.27266,-6.78245 -3.78294,-8.7113 -2.2879,-1.75798 -5.67609,-1.38465 -8.55974,-1.28677 -2.04154,0.0693 -4.22446,0.28275 -5.98434,1.31981 z m 811.45907,-0.004 c -2.2228,1.47854 -5.184,3.33561 -5.3018,6.0026 -0.1368,3.09866 2.7725,6.05315 5.5213,7.48992 3.4086,1.78164 7.8851,1.53531 11.5341,0.31956 2.6683,-0.88903 5.9476,-2.51199 6.6088,-5.24571 0.7441,-3.07665 -1.4132,-6.71461 -3.9177,-8.65028 -2.3056,-1.78194 -5.7347,-1.04304 -8.477,-1.23571 -2.7424,-0.19267 -4.5131,0.35201 -5.9677,1.31962 z m -743.63939,0.97429 c -2.02484,2.08835 -3.35536,5.77261 -2.20351,8.44364 1.05537,2.4473 4.4265,3.19497 7.01194,3.84194 5.06832,1.26827 10.72805,1.51692 15.67285,-0.16989 2.48413,-0.84741 5.60409,-2.2093 6.28429,-4.74432 0.73587,-2.74249 -1.20083,-5.95218 -3.316,-7.8466 -2.80963,-2.51639 -7.0716,-3.22691 -10.84336,-3.23386 -4.38017,-0.008 -9.55714,0.56439 -12.60621,3.70909 z m 38.86719,0.004 c -2.02056,2.09005 -3.34936,5.77056 -2.19765,8.43974 1.05565,2.44656 4.42514,3.19495 7.00999,3.84194 5.06887,1.26873 10.72993,1.51872 15.6748,-0.16989 2.48583,-0.84888 5.60557,-2.21508 6.28624,-4.75214 0.73409,-2.73616 -1.19211,-5.94184 -3.30374,-7.83035 -2.83909,-2.5391 -7.14774,-3.24487 -10.95661,-3.24348 -4.35087,0.002 -9.48893,0.58609 -12.51303,3.71418 z m 401.56635,-2.58569 c -3.71502,0.32813 -8.50609,0.3906 -10.64452,3.44612 -1.82386,2.60605 -1.64512,7.05701 0.34764,9.5363 2.01551,2.50759 6.13571,2.177 9.3439,2.41748 3.68584,0.27629 7.90563,0.83014 11.02913,-1.14599 2.3171,-1.46593 4.5749,-4.30387 4.2726,-7.02905 -0.3091,-2.7852 -3.3371,-4.78218 -5.8352,-6.05197 -2.5537,-1.29805 -5.66001,-1.42493 -8.51355,-1.17289 z m 38.87705,0 c -3.7037,0.30549 -8.448,0.3924 -10.6139,3.41229 -1.8293,2.55047 -1.7658,6.92453 0.1446,9.41483 1.8895,2.46312 5.8667,2.25595 8.9571,2.55059 3.7306,0.35568 7.9431,0.87392 11.1997,-0.98028 2.3409,-1.33284 4.8189,-3.87167 4.7148,-6.56344 -0.1099,-2.83999 -3.012,-5.13614 -5.4945,-6.51988 -2.6216,-1.46129 -5.9166,-1.56083 -8.9078,-1.31411 z m 233.2285,0 c -3.7157,0.32808 -8.5076,0.39015 -10.6465,3.44612 -1.8239,2.606 -1.6423,7.05469 0.3476,9.5363 1.9923,2.48461 6.0686,2.17101 9.244,2.41463 3.7183,0.28528 7.9764,0.84881 11.1291,-1.14314 2.318,-1.46457 4.5746,-4.30385 4.2725,-7.02905 -0.3087,-2.78477 -3.3356,-4.78217 -5.8332,-6.05197 -2.5536,-1.29826 -5.66,-1.42485 -8.5135,-1.17289 z m -738.55868,0 c -3.70512,0.31116 -8.4525,0.39107 -10.61975,3.41229 -1.82946,2.55033 -1.76584,6.9246 0.14462,9.41483 1.88999,2.46355 5.86773,2.25967 8.9591,2.55044 3.7642,0.35406 8.04105,0.90533 11.29677,-1.01688 2.36059,-1.39372 4.79017,-4.0809 4.60207,-6.81576 -0.19306,-2.80687 -3.15597,-4.95499 -5.63651,-6.28268 -2.59703,-1.39004 -5.811,-1.50875 -8.7463,-1.26224 z m 727.08598,18.79688 c -3.883,1.32141 -8.5064,5.12149 -8.1617,9.20863 0.3392,4.02137 5.4014,7.73121 9.4345,7.58736 3.2823,-0.11707 6.6679,-3.46842 7.2188,-6.70629 0.5949,-3.49646 -2.1119,-7.30113 -4.9617,-9.41242 -0.9627,-0.71321 -2.3957,-1.06326 -3.5299,-0.67728 z m -235.7422,0.28515 c -4.0658,0.16209 -8.9635,3.53261 -9.5898,7.55318 -0.5214,3.34669 2.638,6.95242 5.6919,8.41732 3.1559,1.51384 7.6481,1.21997 10.4656,-0.8568 2.4502,-1.80602 4.3063,-5.56569 3.405,-8.47307 -1.1826,-3.81468 -5.9821,-6.79972 -9.9727,-6.64063 z m -517.26567,4.33046 c -1.73637,2.6335 -1.48164,7.00113 0.50713,9.44962 1.95777,2.41032 5.89777,2.3349 9.00241,2.39567 3.43649,0.0673 7.67591,0.21541 10.06079,-2.25973 2.10539,-2.18507 3.01104,-6.23085 1.66375,-8.94967 -1.52867,-3.08484 -5.98609,-5.14392 -9.66351,-5.36262 -4.15892,-0.24733 -9.42432,1.47159 -11.57057,4.72673 z m 550.68757,-3.97697 c -3.6944,0.31166 -8.4267,0.38346 -10.5926,3.39255 -1.8374,2.55263 -1.785,6.9345 0.1233,9.43457 1.8647,2.44305 5.8018,2.25496 8.8612,2.54774 3.8031,0.36395 8.1199,0.91136 11.416,-1.02048 2.3381,-1.37038 4.7608,-4.00714 4.5886,-6.7118 -0.1814,-2.84961 -3.1765,-5.05056 -5.6921,-6.40145 -2.5821,-1.38658 -5.784,-1.4875 -8.7044,-1.24113 z m 233.2324,0 c -3.7221,0.31478 -8.4942,0.41263 -10.6599,3.45612 -1.8114,2.5456 -1.714,6.89439 0.1907,9.371 1.8736,2.43622 5.8017,2.2546 8.8611,2.54774 3.7972,0.36384 8.0988,0.8976 11.3986,-1.01617 2.3261,-1.34903 4.7519,-3.93317 4.6119,-6.61846 -0.1481,-2.83959 -3.0849,-5.0869 -5.5783,-6.45362 -2.6066,-1.42874 -5.8622,-1.5371 -8.8241,-1.28661 z m -738.56448,0 c -3.72667,0.31445 -8.50509,0.41548 -10.67163,3.46393 -1.80844,2.54459 -1.70571,6.8894 0.19844,9.36319 1.87464,2.43545 5.80177,2.25483 8.86117,2.54774 3.79794,0.36361 8.09074,0.8797 11.40055,-1.01812 2.30067,-1.31919 4.7241,-3.83199 4.61381,-6.48174 -0.11943,-2.86941 -3.05201,-5.1845 -5.56229,-6.57958 -2.60316,-1.4467 -5.87244,-1.54582 -8.84005,-1.29542 z m 38.87109,0 c -3.70471,0.31294 -8.44279,0.40094 -10.61759,3.41641 -1.82609,2.53196 -1.78131,6.86776 0.0922,9.36484 1.78401,2.37779 5.5806,2.26893 8.53711,2.57812 3.92227,0.41018 8.39507,1.00641 11.78838,-1.00304 2.37434,-1.40604 4.78976,-4.14389 4.58076,-6.89539 -0.21175,-2.78768 -3.17331,-4.89466 -5.64297,-6.20491 -2.59939,-1.37908 -5.80576,-1.50371 -8.73789,-1.25603 z m 494.71839,3.41641 c -1.4601,2.75924 -1.7815,6.86774 0.092,9.36484 1.784,2.3778 5.5806,2.26893 8.5371,2.57812 3.921,0.41005 8.392,1.00547 11.7846,-1.00272 2.3753,-1.40601 4.7932,-4.14338 4.5846,-6.89571 -0.2112,-2.78773 -3.118,-5.00481 -5.643,-6.20491 -4.4895,-2.1338 -10.0949,-2.12234 -14.8903,-0.81331 -1.7251,0.47092 -3.6286,1.39314 -4.465,2.97369 z m -8.816,16.01914 c -3.7308,0.32047 -8.5163,0.41995 -10.6831,3.47391 -1.8046,2.54336 -1.6957,6.88317 0.208,9.35326 1.8773,2.4358 5.8057,2.2551 8.867,2.5477 3.8019,0.3634 8.1303,0.9331 11.4121,-1.0204 2.368,-1.4096 4.7814,-4.13973 4.573,-6.88768 -0.2115,-2.78822 -3.1714,-4.8974 -5.641,-6.20881 -2.5984,-1.37979 -5.8048,-1.50977 -8.736,-1.25798 z m 38.875,0 c -3.7219,0.31073 -8.5167,0.39149 -10.6601,3.45003 -1.8225,2.60052 -1.6473,7.0406 0.3359,9.52074 1.9864,2.4841 6.0578,2.1745 9.2286,2.4253 3.6844,0.2914 7.8621,0.8009 11.0332,-1.0974 2.2813,-1.3656 4.6089,-3.96916 4.4452,-6.62289 -0.173,-2.80479 -3.0588,-5.01849 -5.523,-6.36925 -2.6177,-1.43492 -5.8849,-1.55489 -8.8598,-1.30653 z m 155.4883,0 c -3.7283,0.30944 -8.5084,0.41436 -10.6755,3.46393 -1.8087,2.54519 -1.7046,6.89114 0.2005,9.36504 1.8754,2.4354 5.8036,2.2489 8.863,2.5461 3.7563,0.3649 7.9939,0.8826 11.2802,-0.9731 2.3334,-1.3176 4.8152,-3.8233 4.7283,-6.50158 -0.092,-2.84534 -2.9796,-5.17052 -5.4605,-6.56682 -2.6245,-1.47714 -5.9347,-1.58267 -8.936,-1.33357 z m -146.6114,32.19148 c 2.0369,2.3036 5.7873,2.3048 8.8466,2.6152 3.7955,0.3851 8.0889,0.915 11.4033,-0.974 2.3443,-1.3361 4.8219,-3.8928 4.7032,-6.5885 -0.1259,-2.8597 -3.1288,-5.0525 -5.5841,-6.5239 -2.6059,-1.56171 -5.8686,-2.15561 -8.9004,-1.96151 -4.2363,0.2712 -10.9271,1.1931 -11.9856,4.30411 -1.0585,3.1111 -0.5262,6.8178 1.517,9.1286 z m 49.42,-12.75591 c -3.7131,0.3225 -8.4932,0.3927 -10.6387,3.44031 -1.8248,2.592 -1.6756,7.0236 0.2969,9.505 1.9856,2.4979 6.0735,2.1947 9.2543,2.4496 3.6903,0.2957 7.898,0.8421 11.0523,-1.0961 2.3275,-1.4302 4.6541,-4.1896 4.4063,-6.9101 -0.2552,-2.8011 -3.2534,-4.8779 -5.7477,-6.178 -2.574,-1.34161 -5.7316,-1.46191 -8.6234,-1.21071 z m 29.9354,1.16301 c -1.5894,1.1769 -2.629,3.2273 -2.8759,5.1896 -0.3023,2.4025 0.1325,5.3085 1.8373,7.0281 1.6872,1.7018 4.5605,1.5898 6.9395,1.8784 3.7905,0.4599 7.9023,1.145 11.4519,-0.262 2.3051,-0.9137 4.6648,-2.6488 5.5339,-4.9711 0.596,-1.5927 0.2108,-3.5821 -0.6246,-5.0634 -1.0205,-1.8096 -3.0015,-3.0065 -4.8985,-3.8535 -2.9027,-1.29611 -6.2155,-1.70301 -9.3939,-1.64471 -2.7158,0.05 -5.7868,0.082 -7.9697,1.69861 z m -102.8104,-1.16301 c -3.7132,0.3091 -8.4717,0.3993 -10.6389,3.43031 -1.8221,2.5483 -1.7425,6.9108 0.1638,9.3968 1.8709,2.4399 5.8045,2.254 8.865,2.5479 3.7941,0.3644 8.0952,0.9072 11.3899,-1.0093 2.3361,-1.3589 4.7626,-3.9679 4.6147,-6.6665 -0.1547,-2.8218 -3.0794,-5.045 -5.5584,-6.4018 -2.6114,-1.42931 -5.8694,-1.54441 -8.8361,-1.29741 z m 150.6289,0 c -3.7129,0.3135 -8.4717,0.3993 -10.6389,3.43031 -1.8221,2.5483 -1.7425,6.9108 0.1638,9.3968 1.8709,2.4398 5.8043,2.2552 8.865,2.5478 3.8018,0.3635 8.1365,0.9432 11.412,-1.0208 2.3807,-1.4275 4.7878,-4.2002 4.5621,-6.9669 -0.2253,-2.762 -3.171,-4.8309 -5.6215,-6.1248 -2.6037,-1.37481 -5.8086,-1.51021 -8.7425,-1.26241 z m 12.8027,18.79881 c -4.0511,0.6376 -8.0198,5.1104 -8.1582,9.209 -0.101,2.9914 2.6336,6.2048 5.4873,7.1075 3.2485,1.0276 7.642,-0.3602 9.763,-3.0266 1.8143,-2.2808 1.9944,-6.1367 0.6442,-8.7194 -1.3877,-2.6543 -4.7775,-5.0362 -7.7363,-4.5705 z m -109.9922,0.6387 c -3.7119,0.3215 -8.4935,0.3866 -10.6369,3.4342 -1.8278,2.5989 -1.6697,7.0423 0.3108,9.5268 1.985,2.4901 6.0641,2.1801 9.2386,2.432 3.6959,0.2932 7.9131,0.8474 11.068,-1.1 2.3282,-1.4371 4.643,-4.2135 4.3867,-6.9375 -0.2626,-2.7908 -3.2543,-4.8515 -5.7414,-6.1444 -2.5762,-1.3392 -5.7332,-1.4616 -8.6258,-1.2111 z m 38.8731,0 c -3.7205,0.3241 -8.5227,0.3903 -10.658,3.4542 -1.8208,2.6126 -1.6174,7.0677 0.3826,9.5458 2.0055,2.485 6.0912,2.1566 9.2755,2.3959 3.6966,0.2778 7.9186,0.8235 11.0623,-1.1409 2.3003,-1.4374 4.563,-4.2097 4.2989,-6.9093 -0.2724,-2.7848 -3.249,-4.8422 -5.7316,-6.1328 -2.5774,-1.3399 -5.7358,-1.465 -8.6297,-1.2129 z m 38.8711,0 c -3.7116,0.3253 -8.4938,0.3864 -10.6369,3.4342 -1.828,2.5996 -1.6686,7.044 0.3127,9.5287 1.9844,2.4887 6.0613,2.1827 9.2347,2.4301 3.724,0.2903 7.9785,0.8385 11.148,-1.138 2.302,-1.4356 4.5754,-4.2079 4.3048,-6.9073 -0.2821,-2.8144 -3.3135,-4.8724 -5.8282,-6.1673 -2.5534,-1.3149 -5.674,-1.4312 -8.5351,-1.1804 z m -19.4336,19.4356 c -3.7216,0.3207 -8.497,0.4106 -10.6599,3.4561 -1.8117,2.551 -1.7053,6.909 0.2084,9.3844 1.8921,2.4476 5.8475,2.2482 8.9277,2.5362 3.7787,0.3534 8.0735,0.9066 11.3393,-1.0268 2.3536,-1.3934 4.7735,-4.0807 4.579,-6.8089 -0.2012,-2.8221 -3.1904,-4.9709 -5.6881,-6.2999 -2.5879,-1.377 -5.7858,-1.4928 -8.7064,-1.2411 z" /><path
     style="display:inline;fill:none;fill-opacity:1;stroke:none;stroke-width:22.3741;stroke-linecap:butt;stroke-linejoin:bevel;stroke-dasharray:none;stroke-opacity:1;paint-order:stroke fill markers;filter:url(#filter50691)"
     d="m 1364.1694,199.70017 c 183.7212,281.30428 -216.2412,125.41249 -77.3527,343.05433 325.0581,509.3744 -422.80464,293.07195 -135.3087,181.66613"
     id="path1185-5" /><path
     id="path1528-1"
     style="display:inline;fill:none;stroke:#000000;stroke-width:13.592;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:40.776, 40.776;filter:url(#filter50691)"
     d="M 1113.7059,545.87426 A 328.19431,203.33778 0 0 1 785.51162,749.21204 328.19431,203.33778 0 0 1 457.31732,545.87426 328.19431,203.33778 0 0 1 785.51162,342.53648 328.19431,203.33778 0 0 1 1113.7059,545.87426 Z" /><path
     id="path1790-6"
     style="display:inline;fill:#4d4d4d;stroke-width:13.592;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:40.776, 40.776;filter:url(#filter50691)"
     d="M 963.87754,522.09209 A 178.36647,79.670357 0 0 1 785.51107,601.76245 178.36647,79.670357 0 0 1 607.1446,522.09209 178.36647,79.670357 0 0 1 785.51107,442.42174 178.36647,79.670357 0 0 1 963.87754,522.09209 Z" /><metadata
     id="metadata11846"><rdf:RDF><cc:Work
         rdf:about=""><dc:title>spacetime</dc:title><cc:license
           rdf:resource="http://creativecommons.org/licenses/by-nc-sa/4.0/" /></cc:Work><cc:License
         rdf:about="http://creativecommons.org/licenses/by-nc-sa/4.0/"><cc:permits
           rdf:resource="http://creativecommons.org/ns#Reproduction" /><cc:permits
           rdf:resource="http://creativecommons.org/ns#Distribution" /><cc:requires
           rdf:resource="http://creativecommons.org/ns#Notice" /><cc:requires
           rdf:resource="http://creativecommons.org/ns#Attribution" /><cc:prohibits
           rdf:resource="http://creativecommons.org/ns#CommercialUse" /><cc:permits
           rdf:resource="http://creativecommons.org/ns#DerivativeWorks" /><cc:requires
           rdf:resource="http://creativecommons.org/ns#ShareAlike" /></cc:License></rdf:RDF></metadata><script
     id="mesh_polyfill-6"
     type="text/javascript">
!function(){const t=&quot;http://www.w3.org/2000/svg&quot;,e=&quot;http://www.w3.org/1999/xlink&quot;,s=&quot;http://www.w3.org/1999/xhtml&quot;,r=2;if(document.createElementNS(t,&quot;meshgradient&quot;).x)return;const n=(t,e,s,r)=&gt;{let n=new x(.5*(e.x+s.x),.5*(e.y+s.y)),o=new x(.5*(t.x+e.x),.5*(t.y+e.y)),i=new x(.5*(s.x+r.x),.5*(s.y+r.y)),a=new x(.5*(n.x+o.x),.5*(n.y+o.y)),h=new x(.5*(n.x+i.x),.5*(n.y+i.y)),l=new x(.5*(a.x+h.x),.5*(a.y+h.y));return[[t,o,a,l],[l,h,i,r]]},o=t=&gt;{let e=t[0].distSquared(t[1]),s=t[2].distSquared(t[3]),r=.25*t[0].distSquared(t[2]),n=.25*t[1].distSquared(t[3]),o=e&gt;s?e:s,i=r&gt;n?r:n;return 18*(o&gt;i?o:i)},i=(t,e)=&gt;Math.sqrt(t.distSquared(e)),a=(t,e)=&gt;t.scale(2/3).add(e.scale(1/3)),h=t=&gt;{let e,s,r,n,o,i,a,h=new g;return t.match(/(\w+\(\s*[^)]+\))+/g).forEach(t=&gt;{let l=t.match(/[\w.-]+/g),d=l.shift();switch(d){case&quot;translate&quot;:2===l.length?e=new g(1,0,0,1,l[0],l[1]):(console.error(&quot;mesh.js: translate does not have 2 arguments!&quot;),e=new g(1,0,0,1,0,0)),h=h.append(e);break;case&quot;scale&quot;:1===l.length?s=new g(l[0],0,0,l[0],0,0):2===l.length?s=new g(l[0],0,0,l[1],0,0):(console.error(&quot;mesh.js: scale does not have 1 or 2 arguments!&quot;),s=new g(1,0,0,1,0,0)),h=h.append(s);break;case&quot;rotate&quot;:if(3===l.length&amp;&amp;(e=new g(1,0,0,1,l[1],l[2]),h=h.append(e)),l[0]){r=l[0]*Math.PI/180;let t=Math.cos(r),e=Math.sin(r);Math.abs(t)&lt;1e-16&amp;&amp;(t=0),Math.abs(e)&lt;1e-16&amp;&amp;(e=0),a=new g(t,e,-e,t,0,0),h=h.append(a)}else console.error(&quot;math.js: No argument to rotate transform!&quot;);3===l.length&amp;&amp;(e=new g(1,0,0,1,-l[1],-l[2]),h=h.append(e));break;case&quot;skewX&quot;:l[0]?(r=l[0]*Math.PI/180,n=Math.tan(r),o=new g(1,0,n,1,0,0),h=h.append(o)):console.error(&quot;math.js: No argument to skewX transform!&quot;);break;case&quot;skewY&quot;:l[0]?(r=l[0]*Math.PI/180,n=Math.tan(r),i=new g(1,n,0,1,0,0),h=h.append(i)):console.error(&quot;math.js: No argument to skewY transform!&quot;);break;case&quot;matrix&quot;:6===l.length?h=h.append(new g(...l)):console.error(&quot;math.js: Incorrect number of arguments for matrix!&quot;);break;default:console.error(&quot;mesh.js: Unhandled transform type: &quot;+d)}}),h},l=t=&gt;{let e=[],s=t.split(/[ ,]+/);for(let t=0,r=s.length-1;t&lt;r;t+=2)e.push(new x(parseFloat(s[t]),parseFloat(s[t+1])));return e},d=(t,e)=&gt;{for(let s in e)t.setAttribute(s,e[s])},c=(t,e,s,r,n)=&gt;{let o,i,a=[0,0,0,0];for(let h=0;h&lt;3;++h)e[h]&lt;t[h]&amp;&amp;e[h]&lt;s[h]||t[h]&lt;e[h]&amp;&amp;s[h]&lt;e[h]?a[h]=0:(a[h]=.5*((e[h]-t[h])/r+(s[h]-e[h])/n),o=Math.abs(3*(e[h]-t[h])/r),i=Math.abs(3*(s[h]-e[h])/n),a[h]&gt;o?a[h]=o:a[h]&gt;i&amp;&amp;(a[h]=i));return a},u=[[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0],[-3,3,0,0,-2,-1,0,0,0,0,0,0,0,0,0,0],[2,-2,0,0,1,1,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0],[0,0,0,0,0,0,0,0,-3,3,0,0,-2,-1,0,0],[0,0,0,0,0,0,0,0,2,-2,0,0,1,1,0,0],[-3,0,3,0,0,0,0,0,-2,0,-1,0,0,0,0,0],[0,0,0,0,-3,0,3,0,0,0,0,0,-2,0,-1,0],[9,-9,-9,9,6,3,-6,-3,6,-6,3,-3,4,2,2,1],[-6,6,6,-6,-3,-3,3,3,-4,4,-2,2,-2,-2,-1,-1],[2,0,-2,0,0,0,0,0,1,0,1,0,0,0,0,0],[0,0,0,0,2,0,-2,0,0,0,0,0,1,0,1,0],[-6,6,6,-6,-4,-2,4,2,-3,3,-3,3,-2,-1,-2,-1],[4,-4,-4,4,2,2,-2,-2,2,-2,2,-2,1,1,1,1]],f=t=&gt;{let e=[];for(let s=0;s&lt;16;++s){e[s]=0;for(let r=0;r&lt;16;++r)e[s]+=u[s][r]*t[r]}return e},p=(t,e,s)=&gt;{const r=e*e,n=s*s,o=e*e*e,i=s*s*s;return t[0]+t[1]*e+t[2]*r+t[3]*o+t[4]*s+t[5]*s*e+t[6]*s*r+t[7]*s*o+t[8]*n+t[9]*n*e+t[10]*n*r+t[11]*n*o+t[12]*i+t[13]*i*e+t[14]*i*r+t[15]*i*o},y=t=&gt;{let e=[],s=[],r=[];for(let s=0;s&lt;4;++s)e[s]=[],e[s][0]=n(t[0][s],t[1][s],t[2][s],t[3][s]),e[s][1]=[],e[s][1].push(...n(...e[s][0][0])),e[s][1].push(...n(...e[s][0][1])),e[s][2]=[],e[s][2].push(...n(...e[s][1][0])),e[s][2].push(...n(...e[s][1][1])),e[s][2].push(...n(...e[s][1][2])),e[s][2].push(...n(...e[s][1][3]));for(let t=0;t&lt;8;++t){s[t]=[];for(let r=0;r&lt;4;++r)s[t][r]=[],s[t][r][0]=n(e[0][2][t][r],e[1][2][t][r],e[2][2][t][r],e[3][2][t][r]),s[t][r][1]=[],s[t][r][1].push(...n(...s[t][r][0][0])),s[t][r][1].push(...n(...s[t][r][0][1])),s[t][r][2]=[],s[t][r][2].push(...n(...s[t][r][1][0])),s[t][r][2].push(...n(...s[t][r][1][1])),s[t][r][2].push(...n(...s[t][r][1][2])),s[t][r][2].push(...n(...s[t][r][1][3]))}for(let t=0;t&lt;8;++t){r[t]=[];for(let e=0;e&lt;8;++e)r[t][e]=[],r[t][e][0]=s[t][0][2][e],r[t][e][1]=s[t][1][2][e],r[t][e][2]=s[t][2][2][e],r[t][e][3]=s[t][3][2][e]}return r};class x{constructor(t,e){this.x=t||0,this.y=e||0}toString(){return`(x=${this.x}, y=${this.y})`}clone(){return new x(this.x,this.y)}add(t){return new x(this.x+t.x,this.y+t.y)}scale(t){return void 0===t.x?new x(this.x*t,this.y*t):new x(this.x*t.x,this.y*t.y)}distSquared(t){let e=this.x-t.x,s=this.y-t.y;return e*e+s*s}transform(t){let e=this.x*t.a+this.y*t.c+t.e,s=this.x*t.b+this.y*t.d+t.f;return new x(e,s)}}class g{constructor(t,e,s,r,n,o){void 0===t?(this.a=1,this.b=0,this.c=0,this.d=1,this.e=0,this.f=0):(this.a=t,this.b=e,this.c=s,this.d=r,this.e=n,this.f=o)}toString(){return`affine: ${this.a} ${this.c} ${this.e} \n       ${this.b} ${this.d} ${this.f}`}append(t){t instanceof g||console.error(&quot;mesh.js: argument to Affine.append is not affine!&quot;);let e=this.a*t.a+this.c*t.b,s=this.b*t.a+this.d*t.b,r=this.a*t.c+this.c*t.d,n=this.b*t.c+this.d*t.d,o=this.a*t.e+this.c*t.f+this.e,i=this.b*t.e+this.d*t.f+this.f;return new g(e,s,r,n,o,i)}}class w{constructor(t,e){this.nodes=t,this.colors=e}paintCurve(t,e){if(o(this.nodes)&gt;r){const s=n(...this.nodes);let r=[[],[]],o=[[],[]];for(let t=0;t&lt;4;++t)r[0][t]=this.colors[0][t],r[1][t]=(this.colors[0][t]+this.colors[1][t])/2,o[0][t]=r[1][t],o[1][t]=this.colors[1][t];let i=new w(s[0],r),a=new w(s[1],o);i.paintCurve(t,e),a.paintCurve(t,e)}else{let s=Math.round(this.nodes[0].x);if(s&gt;=0&amp;&amp;s&lt;e){let r=4*(~~this.nodes[0].y*e+s);t[r]=Math.round(this.colors[0][0]),t[r+1]=Math.round(this.colors[0][1]),t[r+2]=Math.round(this.colors[0][2]),t[r+3]=Math.round(this.colors[0][3])}}}}class m{constructor(t,e){this.nodes=t,this.colors=e}split(){let t=[[],[],[],[]],e=[[],[],[],[]],s=[[[],[]],[[],[]]],r=[[[],[]],[[],[]]];for(let s=0;s&lt;4;++s){const r=n(this.nodes[0][s],this.nodes[1][s],this.nodes[2][s],this.nodes[3][s]);t[0][s]=r[0][0],t[1][s]=r[0][1],t[2][s]=r[0][2],t[3][s]=r[0][3],e[0][s]=r[1][0],e[1][s]=r[1][1],e[2][s]=r[1][2],e[3][s]=r[1][3]}for(let t=0;t&lt;4;++t)s[0][0][t]=this.colors[0][0][t],s[0][1][t]=this.colors[0][1][t],s[1][0][t]=(this.colors[0][0][t]+this.colors[1][0][t])/2,s[1][1][t]=(this.colors[0][1][t]+this.colors[1][1][t])/2,r[0][0][t]=s[1][0][t],r[0][1][t]=s[1][1][t],r[1][0][t]=this.colors[1][0][t],r[1][1][t]=this.colors[1][1][t];return[new m(t,s),new m(e,r)]}paint(t,e){let s,n=!1;for(let t=0;t&lt;4;++t)if((s=o([this.nodes[0][t],this.nodes[1][t],this.nodes[2][t],this.nodes[3][t]]))&gt;r){n=!0;break}if(n){let s=this.split();s[0].paint(t,e),s[1].paint(t,e)}else{new w([...this.nodes[0]],[...this.colors[0]]).paintCurve(t,e)}}}class b{constructor(t){this.readMesh(t),this.type=t.getAttribute(&quot;type&quot;)||&quot;bilinear&quot;}readMesh(t){let e=[[]],s=[[]],r=Number(t.getAttribute(&quot;x&quot;)),n=Number(t.getAttribute(&quot;y&quot;));e[0][0]=new x(r,n);let o=t.children;for(let t=0,r=o.length;t&lt;r;++t){e[3*t+1]=[],e[3*t+2]=[],e[3*t+3]=[],s[t+1]=[];let r=o[t].children;for(let n=0,o=r.length;n&lt;o;++n){let o=r[n].children;for(let r=0,i=o.length;r&lt;i;++r){let i=r;0!==t&amp;&amp;++i;let h,d=o[r].getAttribute(&quot;path&quot;),c=&quot;l&quot;;null!=d&amp;&amp;(c=(h=d.match(/\s*([lLcC])\s*(.*)/))[1]);let u=l(h[2]);switch(c){case&quot;l&quot;:0===i?(e[3*t][3*n+3]=u[0].add(e[3*t][3*n]),e[3*t][3*n+1]=a(e[3*t][3*n],e[3*t][3*n+3]),e[3*t][3*n+2]=a(e[3*t][3*n+3],e[3*t][3*n])):1===i?(e[3*t+3][3*n+3]=u[0].add(e[3*t][3*n+3]),e[3*t+1][3*n+3]=a(e[3*t][3*n+3],e[3*t+3][3*n+3]),e[3*t+2][3*n+3]=a(e[3*t+3][3*n+3],e[3*t][3*n+3])):2===i?(0===n&amp;&amp;(e[3*t+3][3*n+0]=u[0].add(e[3*t+3][3*n+3])),e[3*t+3][3*n+1]=a(e[3*t+3][3*n],e[3*t+3][3*n+3]),e[3*t+3][3*n+2]=a(e[3*t+3][3*n+3],e[3*t+3][3*n])):(e[3*t+1][3*n]=a(e[3*t][3*n],e[3*t+3][3*n]),e[3*t+2][3*n]=a(e[3*t+3][3*n],e[3*t][3*n]));break;case&quot;L&quot;:0===i?(e[3*t][3*n+3]=u[0],e[3*t][3*n+1]=a(e[3*t][3*n],e[3*t][3*n+3]),e[3*t][3*n+2]=a(e[3*t][3*n+3],e[3*t][3*n])):1===i?(e[3*t+3][3*n+3]=u[0],e[3*t+1][3*n+3]=a(e[3*t][3*n+3],e[3*t+3][3*n+3]),e[3*t+2][3*n+3]=a(e[3*t+3][3*n+3],e[3*t][3*n+3])):2===i?(0===n&amp;&amp;(e[3*t+3][3*n+0]=u[0]),e[3*t+3][3*n+1]=a(e[3*t+3][3*n],e[3*t+3][3*n+3]),e[3*t+3][3*n+2]=a(e[3*t+3][3*n+3],e[3*t+3][3*n])):(e[3*t+1][3*n]=a(e[3*t][3*n],e[3*t+3][3*n]),e[3*t+2][3*n]=a(e[3*t+3][3*n],e[3*t][3*n]));break;case&quot;c&quot;:0===i?(e[3*t][3*n+1]=u[0].add(e[3*t][3*n]),e[3*t][3*n+2]=u[1].add(e[3*t][3*n]),e[3*t][3*n+3]=u[2].add(e[3*t][3*n])):1===i?(e[3*t+1][3*n+3]=u[0].add(e[3*t][3*n+3]),e[3*t+2][3*n+3]=u[1].add(e[3*t][3*n+3]),e[3*t+3][3*n+3]=u[2].add(e[3*t][3*n+3])):2===i?(e[3*t+3][3*n+2]=u[0].add(e[3*t+3][3*n+3]),e[3*t+3][3*n+1]=u[1].add(e[3*t+3][3*n+3]),0===n&amp;&amp;(e[3*t+3][3*n+0]=u[2].add(e[3*t+3][3*n+3]))):(e[3*t+2][3*n]=u[0].add(e[3*t+3][3*n]),e[3*t+1][3*n]=u[1].add(e[3*t+3][3*n]));break;case&quot;C&quot;:0===i?(e[3*t][3*n+1]=u[0],e[3*t][3*n+2]=u[1],e[3*t][3*n+3]=u[2]):1===i?(e[3*t+1][3*n+3]=u[0],e[3*t+2][3*n+3]=u[1],e[3*t+3][3*n+3]=u[2]):2===i?(e[3*t+3][3*n+2]=u[0],e[3*t+3][3*n+1]=u[1],0===n&amp;&amp;(e[3*t+3][3*n+0]=u[2])):(e[3*t+2][3*n]=u[0],e[3*t+1][3*n]=u[1]);break;default:console.error(&quot;mesh.js: &quot;+c+&quot; invalid path type.&quot;)}if(0===t&amp;&amp;0===n||r&gt;0){let e=window.getComputedStyle(o[r]).stopColor.match(/^rgb\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)$/i),a=window.getComputedStyle(o[r]).stopOpacity,h=255;a&amp;&amp;(h=Math.floor(255*a)),e&amp;&amp;(0===i?(s[t][n]=[],s[t][n][0]=Math.floor(e[1]),s[t][n][1]=Math.floor(e[2]),s[t][n][2]=Math.floor(e[3]),s[t][n][3]=h):1===i?(s[t][n+1]=[],s[t][n+1][0]=Math.floor(e[1]),s[t][n+1][1]=Math.floor(e[2]),s[t][n+1][2]=Math.floor(e[3]),s[t][n+1][3]=h):2===i?(s[t+1][n+1]=[],s[t+1][n+1][0]=Math.floor(e[1]),s[t+1][n+1][1]=Math.floor(e[2]),s[t+1][n+1][2]=Math.floor(e[3]),s[t+1][n+1][3]=h):3===i&amp;&amp;(s[t+1][n]=[],s[t+1][n][0]=Math.floor(e[1]),s[t+1][n][1]=Math.floor(e[2]),s[t+1][n][2]=Math.floor(e[3]),s[t+1][n][3]=h))}}e[3*t+1][3*n+1]=new x,e[3*t+1][3*n+2]=new x,e[3*t+2][3*n+1]=new x,e[3*t+2][3*n+2]=new x,e[3*t+1][3*n+1].x=(-4*e[3*t][3*n].x+6*(e[3*t][3*n+1].x+e[3*t+1][3*n].x)+-2*(e[3*t][3*n+3].x+e[3*t+3][3*n].x)+3*(e[3*t+3][3*n+1].x+e[3*t+1][3*n+3].x)+-1*e[3*t+3][3*n+3].x)/9,e[3*t+1][3*n+2].x=(-4*e[3*t][3*n+3].x+6*(e[3*t][3*n+2].x+e[3*t+1][3*n+3].x)+-2*(e[3*t][3*n].x+e[3*t+3][3*n+3].x)+3*(e[3*t+3][3*n+2].x+e[3*t+1][3*n].x)+-1*e[3*t+3][3*n].x)/9,e[3*t+2][3*n+1].x=(-4*e[3*t+3][3*n].x+6*(e[3*t+3][3*n+1].x+e[3*t+2][3*n].x)+-2*(e[3*t+3][3*n+3].x+e[3*t][3*n].x)+3*(e[3*t][3*n+1].x+e[3*t+2][3*n+3].x)+-1*e[3*t][3*n+3].x)/9,e[3*t+2][3*n+2].x=(-4*e[3*t+3][3*n+3].x+6*(e[3*t+3][3*n+2].x+e[3*t+2][3*n+3].x)+-2*(e[3*t+3][3*n].x+e[3*t][3*n+3].x)+3*(e[3*t][3*n+2].x+e[3*t+2][3*n].x)+-1*e[3*t][3*n].x)/9,e[3*t+1][3*n+1].y=(-4*e[3*t][3*n].y+6*(e[3*t][3*n+1].y+e[3*t+1][3*n].y)+-2*(e[3*t][3*n+3].y+e[3*t+3][3*n].y)+3*(e[3*t+3][3*n+1].y+e[3*t+1][3*n+3].y)+-1*e[3*t+3][3*n+3].y)/9,e[3*t+1][3*n+2].y=(-4*e[3*t][3*n+3].y+6*(e[3*t][3*n+2].y+e[3*t+1][3*n+3].y)+-2*(e[3*t][3*n].y+e[3*t+3][3*n+3].y)+3*(e[3*t+3][3*n+2].y+e[3*t+1][3*n].y)+-1*e[3*t+3][3*n].y)/9,e[3*t+2][3*n+1].y=(-4*e[3*t+3][3*n].y+6*(e[3*t+3][3*n+1].y+e[3*t+2][3*n].y)+-2*(e[3*t+3][3*n+3].y+e[3*t][3*n].y)+3*(e[3*t][3*n+1].y+e[3*t+2][3*n+3].y)+-1*e[3*t][3*n+3].y)/9,e[3*t+2][3*n+2].y=(-4*e[3*t+3][3*n+3].y+6*(e[3*t+3][3*n+2].y+e[3*t+2][3*n+3].y)+-2*(e[3*t+3][3*n].y+e[3*t][3*n+3].y)+3*(e[3*t][3*n+2].y+e[3*t+2][3*n].y)+-1*e[3*t][3*n].y)/9}}this.nodes=e,this.colors=s}paintMesh(t,e){let s=(this.nodes.length-1)/3,r=(this.nodes[0].length-1)/3;if(&quot;bilinear&quot;===this.type||s&lt;2||r&lt;2){let n;for(let o=0;o&lt;s;++o)for(let s=0;s&lt;r;++s){let r=[];for(let t=3*o,e=3*o+4;t&lt;e;++t)r.push(this.nodes[t].slice(3*s,3*s+4));let i=[];i.push(this.colors[o].slice(s,s+2)),i.push(this.colors[o+1].slice(s,s+2)),(n=new m(r,i)).paint(t,e)}}else{let n,o,a,h,l,d,u;const x=s,g=r;s++,r++;let w=new Array(s);for(let t=0;t&lt;s;++t){w[t]=new Array(r);for(let e=0;e&lt;r;++e)w[t][e]=[],w[t][e][0]=this.nodes[3*t][3*e],w[t][e][1]=this.colors[t][e]}for(let t=0;t&lt;s;++t)for(let e=0;e&lt;r;++e)0!==t&amp;&amp;t!==x&amp;&amp;(n=i(w[t-1][e][0],w[t][e][0]),o=i(w[t+1][e][0],w[t][e][0]),w[t][e][2]=c(w[t-1][e][1],w[t][e][1],w[t+1][e][1],n,o)),0!==e&amp;&amp;e!==g&amp;&amp;(n=i(w[t][e-1][0],w[t][e][0]),o=i(w[t][e+1][0],w[t][e][0]),w[t][e][3]=c(w[t][e-1][1],w[t][e][1],w[t][e+1][1],n,o));for(let t=0;t&lt;r;++t){w[0][t][2]=[],w[x][t][2]=[];for(let e=0;e&lt;4;++e)n=i(w[1][t][0],w[0][t][0]),o=i(w[x][t][0],w[x-1][t][0]),w[0][t][2][e]=n&gt;0?2*(w[1][t][1][e]-w[0][t][1][e])/n-w[1][t][2][e]:0,w[x][t][2][e]=o&gt;0?2*(w[x][t][1][e]-w[x-1][t][1][e])/o-w[x-1][t][2][e]:0}for(let t=0;t&lt;s;++t){w[t][0][3]=[],w[t][g][3]=[];for(let e=0;e&lt;4;++e)n=i(w[t][1][0],w[t][0][0]),o=i(w[t][g][0],w[t][g-1][0]),w[t][0][3][e]=n&gt;0?2*(w[t][1][1][e]-w[t][0][1][e])/n-w[t][1][3][e]:0,w[t][g][3][e]=o&gt;0?2*(w[t][g][1][e]-w[t][g-1][1][e])/o-w[t][g-1][3][e]:0}for(let s=0;s&lt;x;++s)for(let r=0;r&lt;g;++r){let n=i(w[s][r][0],w[s+1][r][0]),o=i(w[s][r+1][0],w[s+1][r+1][0]),c=i(w[s][r][0],w[s][r+1][0]),x=i(w[s+1][r][0],w[s+1][r+1][0]),g=[[],[],[],[]];for(let t=0;t&lt;4;++t){(d=[])[0]=w[s][r][1][t],d[1]=w[s+1][r][1][t],d[2]=w[s][r+1][1][t],d[3]=w[s+1][r+1][1][t],d[4]=w[s][r][2][t]*n,d[5]=w[s+1][r][2][t]*n,d[6]=w[s][r+1][2][t]*o,d[7]=w[s+1][r+1][2][t]*o,d[8]=w[s][r][3][t]*c,d[9]=w[s+1][r][3][t]*x,d[10]=w[s][r+1][3][t]*c,d[11]=w[s+1][r+1][3][t]*x,d[12]=0,d[13]=0,d[14]=0,d[15]=0,u=f(d);for(let e=0;e&lt;9;++e){g[t][e]=[];for(let s=0;s&lt;9;++s)g[t][e][s]=p(u,e/8,s/8),g[t][e][s]&gt;255?g[t][e][s]=255:g[t][e][s]&lt;0&amp;&amp;(g[t][e][s]=0)}}h=[];for(let t=3*s,e=3*s+4;t&lt;e;++t)h.push(this.nodes[t].slice(3*r,3*r+4));l=y(h);for(let s=0;s&lt;8;++s)for(let r=0;r&lt;8;++r)(a=new m(l[s][r],[[[g[0][s][r],g[1][s][r],g[2][s][r],g[3][s][r]],[g[0][s][r+1],g[1][s][r+1],g[2][s][r+1],g[3][s][r+1]]],[[g[0][s+1][r],g[1][s+1][r],g[2][s+1][r],g[3][s+1][r]],[g[0][s+1][r+1],g[1][s+1][r+1],g[2][s+1][r+1],g[3][s+1][r+1]]]])).paint(t,e)}}}transform(t){if(t instanceof x)for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].add(t);else if(t instanceof g)for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].transform(t)}scale(t){for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].scale(t)}}document.querySelectorAll(&quot;rect,circle,ellipse,path,text&quot;).forEach((r,n)=&gt;{let o=r.getAttribute(&quot;id&quot;);o||(o=&quot;patchjs_shape&quot;+n,r.setAttribute(&quot;id&quot;,o));const i=r.style.fill.match(/^url\(\s*&quot;?\s*#([^\s&quot;]+)&quot;?\s*\)/),a=r.style.stroke.match(/^url\(\s*&quot;?\s*#([^\s&quot;]+)&quot;?\s*\)/);if(i&amp;&amp;i[1]){const a=document.getElementById(i[1]);if(a&amp;&amp;&quot;meshgradient&quot;===a.nodeName){const i=r.getBBox();let l=document.createElementNS(s,&quot;canvas&quot;);d(l,{width:i.width,height:i.height});const c=l.getContext(&quot;2d&quot;);let u=c.createImageData(i.width,i.height);const f=new b(a);&quot;objectBoundingBox&quot;===a.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;f.scale(new x(i.width,i.height));const p=a.getAttribute(&quot;gradientTransform&quot;);null!=p&amp;&amp;f.transform(h(p)),&quot;userSpaceOnUse&quot;===a.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;f.transform(new x(-i.x,-i.y)),f.paintMesh(u.data,l.width),c.putImageData(u,0,0);const y=document.createElementNS(t,&quot;image&quot;);d(y,{width:i.width,height:i.height,x:i.x,y:i.y});let g=l.toDataURL();y.setAttributeNS(e,&quot;xlink:href&quot;,g),r.parentNode.insertBefore(y,r),r.style.fill=&quot;none&quot;;const w=document.createElementNS(t,&quot;use&quot;);w.setAttributeNS(e,&quot;xlink:href&quot;,&quot;#&quot;+o);const m=&quot;patchjs_clip&quot;+n,M=document.createElementNS(t,&quot;clipPath&quot;);M.setAttribute(&quot;id&quot;,m),M.appendChild(w),r.parentElement.insertBefore(M,r),y.setAttribute(&quot;clip-path&quot;,&quot;url(#&quot;+m+&quot;)&quot;),u=null,l=null,g=null}}if(a&amp;&amp;a[1]){const o=document.getElementById(a[1]);if(o&amp;&amp;&quot;meshgradient&quot;===o.nodeName){const i=parseFloat(r.style.strokeWidth.slice(0,-2))*(parseFloat(r.style.strokeMiterlimit)||parseFloat(r.getAttribute(&quot;stroke-miterlimit&quot;))||1),a=r.getBBox(),l=Math.trunc(a.width+i),c=Math.trunc(a.height+i),u=Math.trunc(a.x-i/2),f=Math.trunc(a.y-i/2);let p=document.createElementNS(s,&quot;canvas&quot;);d(p,{width:l,height:c});const y=p.getContext(&quot;2d&quot;);let g=y.createImageData(l,c);const w=new b(o);&quot;objectBoundingBox&quot;===o.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;w.scale(new x(l,c));const m=o.getAttribute(&quot;gradientTransform&quot;);null!=m&amp;&amp;w.transform(h(m)),&quot;userSpaceOnUse&quot;===o.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;w.transform(new x(-u,-f)),w.paintMesh(g.data,p.width),y.putImageData(g,0,0);const M=document.createElementNS(t,&quot;image&quot;);d(M,{width:l,height:c,x:0,y:0});let S=p.toDataURL();M.setAttributeNS(e,&quot;xlink:href&quot;,S);const k=&quot;pattern_clip&quot;+n,A=document.createElementNS(t,&quot;pattern&quot;);d(A,{id:k,patternUnits:&quot;userSpaceOnUse&quot;,width:l,height:c,x:u,y:f}),A.appendChild(M),o.parentNode.appendChild(A),r.style.stroke=&quot;url(#&quot;+k+&quot;)&quot;,g=null,p=null,S=null}}})}();
</script><script
     id="mesh_polyfill-63"
     type="text/javascript">
!function(){const t=&quot;http://www.w3.org/2000/svg&quot;,e=&quot;http://www.w3.org/1999/xlink&quot;,s=&quot;http://www.w3.org/1999/xhtml&quot;,r=2;if(document.createElementNS(t,&quot;meshgradient&quot;).x)return;const n=(t,e,s,r)=&gt;{let n=new x(.5*(e.x+s.x),.5*(e.y+s.y)),o=new x(.5*(t.x+e.x),.5*(t.y+e.y)),i=new x(.5*(s.x+r.x),.5*(s.y+r.y)),a=new x(.5*(n.x+o.x),.5*(n.y+o.y)),h=new x(.5*(n.x+i.x),.5*(n.y+i.y)),l=new x(.5*(a.x+h.x),.5*(a.y+h.y));return[[t,o,a,l],[l,h,i,r]]},o=t=&gt;{let e=t[0].distSquared(t[1]),s=t[2].distSquared(t[3]),r=.25*t[0].distSquared(t[2]),n=.25*t[1].distSquared(t[3]),o=e&gt;s?e:s,i=r&gt;n?r:n;return 18*(o&gt;i?o:i)},i=(t,e)=&gt;Math.sqrt(t.distSquared(e)),a=(t,e)=&gt;t.scale(2/3).add(e.scale(1/3)),h=t=&gt;{let e,s,r,n,o,i,a,h=new g;return t.match(/(\w+\(\s*[^)]+\))+/g).forEach(t=&gt;{let l=t.match(/[\w.-]+/g),d=l.shift();switch(d){case&quot;translate&quot;:2===l.length?e=new g(1,0,0,1,l[0],l[1]):(console.error(&quot;mesh.js: translate does not have 2 arguments!&quot;),e=new g(1,0,0,1,0,0)),h=h.append(e);break;case&quot;scale&quot;:1===l.length?s=new g(l[0],0,0,l[0],0,0):2===l.length?s=new g(l[0],0,0,l[1],0,0):(console.error(&quot;mesh.js: scale does not have 1 or 2 arguments!&quot;),s=new g(1,0,0,1,0,0)),h=h.append(s);break;case&quot;rotate&quot;:if(3===l.length&amp;&amp;(e=new g(1,0,0,1,l[1],l[2]),h=h.append(e)),l[0]){r=l[0]*Math.PI/180;let t=Math.cos(r),e=Math.sin(r);Math.abs(t)&lt;1e-16&amp;&amp;(t=0),Math.abs(e)&lt;1e-16&amp;&amp;(e=0),a=new g(t,e,-e,t,0,0),h=h.append(a)}else console.error(&quot;math.js: No argument to rotate transform!&quot;);3===l.length&amp;&amp;(e=new g(1,0,0,1,-l[1],-l[2]),h=h.append(e));break;case&quot;skewX&quot;:l[0]?(r=l[0]*Math.PI/180,n=Math.tan(r),o=new g(1,0,n,1,0,0),h=h.append(o)):console.error(&quot;math.js: No argument to skewX transform!&quot;);break;case&quot;skewY&quot;:l[0]?(r=l[0]*Math.PI/180,n=Math.tan(r),i=new g(1,n,0,1,0,0),h=h.append(i)):console.error(&quot;math.js: No argument to skewY transform!&quot;);break;case&quot;matrix&quot;:6===l.length?h=h.append(new g(...l)):console.error(&quot;math.js: Incorrect number of arguments for matrix!&quot;);break;default:console.error(&quot;mesh.js: Unhandled transform type: &quot;+d)}}),h},l=t=&gt;{let e=[],s=t.split(/[ ,]+/);for(let t=0,r=s.length-1;t&lt;r;t+=2)e.push(new x(parseFloat(s[t]),parseFloat(s[t+1])));return e},d=(t,e)=&gt;{for(let s in e)t.setAttribute(s,e[s])},c=(t,e,s,r,n)=&gt;{let o,i,a=[0,0,0,0];for(let h=0;h&lt;3;++h)e[h]&lt;t[h]&amp;&amp;e[h]&lt;s[h]||t[h]&lt;e[h]&amp;&amp;s[h]&lt;e[h]?a[h]=0:(a[h]=.5*((e[h]-t[h])/r+(s[h]-e[h])/n),o=Math.abs(3*(e[h]-t[h])/r),i=Math.abs(3*(s[h]-e[h])/n),a[h]&gt;o?a[h]=o:a[h]&gt;i&amp;&amp;(a[h]=i));return a},u=[[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0],[-3,3,0,0,-2,-1,0,0,0,0,0,0,0,0,0,0],[2,-2,0,0,1,1,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0],[0,0,0,0,0,0,0,0,-3,3,0,0,-2,-1,0,0],[0,0,0,0,0,0,0,0,2,-2,0,0,1,1,0,0],[-3,0,3,0,0,0,0,0,-2,0,-1,0,0,0,0,0],[0,0,0,0,-3,0,3,0,0,0,0,0,-2,0,-1,0],[9,-9,-9,9,6,3,-6,-3,6,-6,3,-3,4,2,2,1],[-6,6,6,-6,-3,-3,3,3,-4,4,-2,2,-2,-2,-1,-1],[2,0,-2,0,0,0,0,0,1,0,1,0,0,0,0,0],[0,0,0,0,2,0,-2,0,0,0,0,0,1,0,1,0],[-6,6,6,-6,-4,-2,4,2,-3,3,-3,3,-2,-1,-2,-1],[4,-4,-4,4,2,2,-2,-2,2,-2,2,-2,1,1,1,1]],f=t=&gt;{let e=[];for(let s=0;s&lt;16;++s){e[s]=0;for(let r=0;r&lt;16;++r)e[s]+=u[s][r]*t[r]}return e},p=(t,e,s)=&gt;{const r=e*e,n=s*s,o=e*e*e,i=s*s*s;return t[0]+t[1]*e+t[2]*r+t[3]*o+t[4]*s+t[5]*s*e+t[6]*s*r+t[7]*s*o+t[8]*n+t[9]*n*e+t[10]*n*r+t[11]*n*o+t[12]*i+t[13]*i*e+t[14]*i*r+t[15]*i*o},y=t=&gt;{let e=[],s=[],r=[];for(let s=0;s&lt;4;++s)e[s]=[],e[s][0]=n(t[0][s],t[1][s],t[2][s],t[3][s]),e[s][1]=[],e[s][1].push(...n(...e[s][0][0])),e[s][1].push(...n(...e[s][0][1])),e[s][2]=[],e[s][2].push(...n(...e[s][1][0])),e[s][2].push(...n(...e[s][1][1])),e[s][2].push(...n(...e[s][1][2])),e[s][2].push(...n(...e[s][1][3]));for(let t=0;t&lt;8;++t){s[t]=[];for(let r=0;r&lt;4;++r)s[t][r]=[],s[t][r][0]=n(e[0][2][t][r],e[1][2][t][r],e[2][2][t][r],e[3][2][t][r]),s[t][r][1]=[],s[t][r][1].push(...n(...s[t][r][0][0])),s[t][r][1].push(...n(...s[t][r][0][1])),s[t][r][2]=[],s[t][r][2].push(...n(...s[t][r][1][0])),s[t][r][2].push(...n(...s[t][r][1][1])),s[t][r][2].push(...n(...s[t][r][1][2])),s[t][r][2].push(...n(...s[t][r][1][3]))}for(let t=0;t&lt;8;++t){r[t]=[];for(let e=0;e&lt;8;++e)r[t][e]=[],r[t][e][0]=s[t][0][2][e],r[t][e][1]=s[t][1][2][e],r[t][e][2]=s[t][2][2][e],r[t][e][3]=s[t][3][2][e]}return r};class x{constructor(t,e){this.x=t||0,this.y=e||0}toString(){return`(x=${this.x}, y=${this.y})`}clone(){return new x(this.x,this.y)}add(t){return new x(this.x+t.x,this.y+t.y)}scale(t){return void 0===t.x?new x(this.x*t,this.y*t):new x(this.x*t.x,this.y*t.y)}distSquared(t){let e=this.x-t.x,s=this.y-t.y;return e*e+s*s}transform(t){let e=this.x*t.a+this.y*t.c+t.e,s=this.x*t.b+this.y*t.d+t.f;return new x(e,s)}}class g{constructor(t,e,s,r,n,o){void 0===t?(this.a=1,this.b=0,this.c=0,this.d=1,this.e=0,this.f=0):(this.a=t,this.b=e,this.c=s,this.d=r,this.e=n,this.f=o)}toString(){return`affine: ${this.a} ${this.c} ${this.e} \n       ${this.b} ${this.d} ${this.f}`}append(t){t instanceof g||console.error(&quot;mesh.js: argument to Affine.append is not affine!&quot;);let e=this.a*t.a+this.c*t.b,s=this.b*t.a+this.d*t.b,r=this.a*t.c+this.c*t.d,n=this.b*t.c+this.d*t.d,o=this.a*t.e+this.c*t.f+this.e,i=this.b*t.e+this.d*t.f+this.f;return new g(e,s,r,n,o,i)}}class w{constructor(t,e){this.nodes=t,this.colors=e}paintCurve(t,e){if(o(this.nodes)&gt;r){const s=n(...this.nodes);let r=[[],[]],o=[[],[]];for(let t=0;t&lt;4;++t)r[0][t]=this.colors[0][t],r[1][t]=(this.colors[0][t]+this.colors[1][t])/2,o[0][t]=r[1][t],o[1][t]=this.colors[1][t];let i=new w(s[0],r),a=new w(s[1],o);i.paintCurve(t,e),a.paintCurve(t,e)}else{let s=Math.round(this.nodes[0].x);if(s&gt;=0&amp;&amp;s&lt;e){let r=4*(~~this.nodes[0].y*e+s);t[r]=Math.round(this.colors[0][0]),t[r+1]=Math.round(this.colors[0][1]),t[r+2]=Math.round(this.colors[0][2]),t[r+3]=Math.round(this.colors[0][3])}}}}class m{constructor(t,e){this.nodes=t,this.colors=e}split(){let t=[[],[],[],[]],e=[[],[],[],[]],s=[[[],[]],[[],[]]],r=[[[],[]],[[],[]]];for(let s=0;s&lt;4;++s){const r=n(this.nodes[0][s],this.nodes[1][s],this.nodes[2][s],this.nodes[3][s]);t[0][s]=r[0][0],t[1][s]=r[0][1],t[2][s]=r[0][2],t[3][s]=r[0][3],e[0][s]=r[1][0],e[1][s]=r[1][1],e[2][s]=r[1][2],e[3][s]=r[1][3]}for(let t=0;t&lt;4;++t)s[0][0][t]=this.colors[0][0][t],s[0][1][t]=this.colors[0][1][t],s[1][0][t]=(this.colors[0][0][t]+this.colors[1][0][t])/2,s[1][1][t]=(this.colors[0][1][t]+this.colors[1][1][t])/2,r[0][0][t]=s[1][0][t],r[0][1][t]=s[1][1][t],r[1][0][t]=this.colors[1][0][t],r[1][1][t]=this.colors[1][1][t];return[new m(t,s),new m(e,r)]}paint(t,e){let s,n=!1;for(let t=0;t&lt;4;++t)if((s=o([this.nodes[0][t],this.nodes[1][t],this.nodes[2][t],this.nodes[3][t]]))&gt;r){n=!0;break}if(n){let s=this.split();s[0].paint(t,e),s[1].paint(t,e)}else{new w([...this.nodes[0]],[...this.colors[0]]).paintCurve(t,e)}}}class b{constructor(t){this.readMesh(t),this.type=t.getAttribute(&quot;type&quot;)||&quot;bilinear&quot;}readMesh(t){let e=[[]],s=[[]],r=Number(t.getAttribute(&quot;x&quot;)),n=Number(t.getAttribute(&quot;y&quot;));e[0][0]=new x(r,n);let o=t.children;for(let t=0,r=o.length;t&lt;r;++t){e[3*t+1]=[],e[3*t+2]=[],e[3*t+3]=[],s[t+1]=[];let r=o[t].children;for(let n=0,o=r.length;n&lt;o;++n){let o=r[n].children;for(let r=0,i=o.length;r&lt;i;++r){let i=r;0!==t&amp;&amp;++i;let h,d=o[r].getAttribute(&quot;path&quot;),c=&quot;l&quot;;null!=d&amp;&amp;(c=(h=d.match(/\s*([lLcC])\s*(.*)/))[1]);let u=l(h[2]);switch(c){case&quot;l&quot;:0===i?(e[3*t][3*n+3]=u[0].add(e[3*t][3*n]),e[3*t][3*n+1]=a(e[3*t][3*n],e[3*t][3*n+3]),e[3*t][3*n+2]=a(e[3*t][3*n+3],e[3*t][3*n])):1===i?(e[3*t+3][3*n+3]=u[0].add(e[3*t][3*n+3]),e[3*t+1][3*n+3]=a(e[3*t][3*n+3],e[3*t+3][3*n+3]),e[3*t+2][3*n+3]=a(e[3*t+3][3*n+3],e[3*t][3*n+3])):2===i?(0===n&amp;&amp;(e[3*t+3][3*n+0]=u[0].add(e[3*t+3][3*n+3])),e[3*t+3][3*n+1]=a(e[3*t+3][3*n],e[3*t+3][3*n+3]),e[3*t+3][3*n+2]=a(e[3*t+3][3*n+3],e[3*t+3][3*n])):(e[3*t+1][3*n]=a(e[3*t][3*n],e[3*t+3][3*n]),e[3*t+2][3*n]=a(e[3*t+3][3*n],e[3*t][3*n]));break;case&quot;L&quot;:0===i?(e[3*t][3*n+3]=u[0],e[3*t][3*n+1]=a(e[3*t][3*n],e[3*t][3*n+3]),e[3*t][3*n+2]=a(e[3*t][3*n+3],e[3*t][3*n])):1===i?(e[3*t+3][3*n+3]=u[0],e[3*t+1][3*n+3]=a(e[3*t][3*n+3],e[3*t+3][3*n+3]),e[3*t+2][3*n+3]=a(e[3*t+3][3*n+3],e[3*t][3*n+3])):2===i?(0===n&amp;&amp;(e[3*t+3][3*n+0]=u[0]),e[3*t+3][3*n+1]=a(e[3*t+3][3*n],e[3*t+3][3*n+3]),e[3*t+3][3*n+2]=a(e[3*t+3][3*n+3],e[3*t+3][3*n])):(e[3*t+1][3*n]=a(e[3*t][3*n],e[3*t+3][3*n]),e[3*t+2][3*n]=a(e[3*t+3][3*n],e[3*t][3*n]));break;case&quot;c&quot;:0===i?(e[3*t][3*n+1]=u[0].add(e[3*t][3*n]),e[3*t][3*n+2]=u[1].add(e[3*t][3*n]),e[3*t][3*n+3]=u[2].add(e[3*t][3*n])):1===i?(e[3*t+1][3*n+3]=u[0].add(e[3*t][3*n+3]),e[3*t+2][3*n+3]=u[1].add(e[3*t][3*n+3]),e[3*t+3][3*n+3]=u[2].add(e[3*t][3*n+3])):2===i?(e[3*t+3][3*n+2]=u[0].add(e[3*t+3][3*n+3]),e[3*t+3][3*n+1]=u[1].add(e[3*t+3][3*n+3]),0===n&amp;&amp;(e[3*t+3][3*n+0]=u[2].add(e[3*t+3][3*n+3]))):(e[3*t+2][3*n]=u[0].add(e[3*t+3][3*n]),e[3*t+1][3*n]=u[1].add(e[3*t+3][3*n]));break;case&quot;C&quot;:0===i?(e[3*t][3*n+1]=u[0],e[3*t][3*n+2]=u[1],e[3*t][3*n+3]=u[2]):1===i?(e[3*t+1][3*n+3]=u[0],e[3*t+2][3*n+3]=u[1],e[3*t+3][3*n+3]=u[2]):2===i?(e[3*t+3][3*n+2]=u[0],e[3*t+3][3*n+1]=u[1],0===n&amp;&amp;(e[3*t+3][3*n+0]=u[2])):(e[3*t+2][3*n]=u[0],e[3*t+1][3*n]=u[1]);break;default:console.error(&quot;mesh.js: &quot;+c+&quot; invalid path type.&quot;)}if(0===t&amp;&amp;0===n||r&gt;0){let e=window.getComputedStyle(o[r]).stopColor.match(/^rgb\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)$/i),a=window.getComputedStyle(o[r]).stopOpacity,h=255;a&amp;&amp;(h=Math.floor(255*a)),e&amp;&amp;(0===i?(s[t][n]=[],s[t][n][0]=Math.floor(e[1]),s[t][n][1]=Math.floor(e[2]),s[t][n][2]=Math.floor(e[3]),s[t][n][3]=h):1===i?(s[t][n+1]=[],s[t][n+1][0]=Math.floor(e[1]),s[t][n+1][1]=Math.floor(e[2]),s[t][n+1][2]=Math.floor(e[3]),s[t][n+1][3]=h):2===i?(s[t+1][n+1]=[],s[t+1][n+1][0]=Math.floor(e[1]),s[t+1][n+1][1]=Math.floor(e[2]),s[t+1][n+1][2]=Math.floor(e[3]),s[t+1][n+1][3]=h):3===i&amp;&amp;(s[t+1][n]=[],s[t+1][n][0]=Math.floor(e[1]),s[t+1][n][1]=Math.floor(e[2]),s[t+1][n][2]=Math.floor(e[3]),s[t+1][n][3]=h))}}e[3*t+1][3*n+1]=new x,e[3*t+1][3*n+2]=new x,e[3*t+2][3*n+1]=new x,e[3*t+2][3*n+2]=new x,e[3*t+1][3*n+1].x=(-4*e[3*t][3*n].x+6*(e[3*t][3*n+1].x+e[3*t+1][3*n].x)+-2*(e[3*t][3*n+3].x+e[3*t+3][3*n].x)+3*(e[3*t+3][3*n+1].x+e[3*t+1][3*n+3].x)+-1*e[3*t+3][3*n+3].x)/9,e[3*t+1][3*n+2].x=(-4*e[3*t][3*n+3].x+6*(e[3*t][3*n+2].x+e[3*t+1][3*n+3].x)+-2*(e[3*t][3*n].x+e[3*t+3][3*n+3].x)+3*(e[3*t+3][3*n+2].x+e[3*t+1][3*n].x)+-1*e[3*t+3][3*n].x)/9,e[3*t+2][3*n+1].x=(-4*e[3*t+3][3*n].x+6*(e[3*t+3][3*n+1].x+e[3*t+2][3*n].x)+-2*(e[3*t+3][3*n+3].x+e[3*t][3*n].x)+3*(e[3*t][3*n+1].x+e[3*t+2][3*n+3].x)+-1*e[3*t][3*n+3].x)/9,e[3*t+2][3*n+2].x=(-4*e[3*t+3][3*n+3].x+6*(e[3*t+3][3*n+2].x+e[3*t+2][3*n+3].x)+-2*(e[3*t+3][3*n].x+e[3*t][3*n+3].x)+3*(e[3*t][3*n+2].x+e[3*t+2][3*n].x)+-1*e[3*t][3*n].x)/9,e[3*t+1][3*n+1].y=(-4*e[3*t][3*n].y+6*(e[3*t][3*n+1].y+e[3*t+1][3*n].y)+-2*(e[3*t][3*n+3].y+e[3*t+3][3*n].y)+3*(e[3*t+3][3*n+1].y+e[3*t+1][3*n+3].y)+-1*e[3*t+3][3*n+3].y)/9,e[3*t+1][3*n+2].y=(-4*e[3*t][3*n+3].y+6*(e[3*t][3*n+2].y+e[3*t+1][3*n+3].y)+-2*(e[3*t][3*n].y+e[3*t+3][3*n+3].y)+3*(e[3*t+3][3*n+2].y+e[3*t+1][3*n].y)+-1*e[3*t+3][3*n].y)/9,e[3*t+2][3*n+1].y=(-4*e[3*t+3][3*n].y+6*(e[3*t+3][3*n+1].y+e[3*t+2][3*n].y)+-2*(e[3*t+3][3*n+3].y+e[3*t][3*n].y)+3*(e[3*t][3*n+1].y+e[3*t+2][3*n+3].y)+-1*e[3*t][3*n+3].y)/9,e[3*t+2][3*n+2].y=(-4*e[3*t+3][3*n+3].y+6*(e[3*t+3][3*n+2].y+e[3*t+2][3*n+3].y)+-2*(e[3*t+3][3*n].y+e[3*t][3*n+3].y)+3*(e[3*t][3*n+2].y+e[3*t+2][3*n].y)+-1*e[3*t][3*n].y)/9}}this.nodes=e,this.colors=s}paintMesh(t,e){let s=(this.nodes.length-1)/3,r=(this.nodes[0].length-1)/3;if(&quot;bilinear&quot;===this.type||s&lt;2||r&lt;2){let n;for(let o=0;o&lt;s;++o)for(let s=0;s&lt;r;++s){let r=[];for(let t=3*o,e=3*o+4;t&lt;e;++t)r.push(this.nodes[t].slice(3*s,3*s+4));let i=[];i.push(this.colors[o].slice(s,s+2)),i.push(this.colors[o+1].slice(s,s+2)),(n=new m(r,i)).paint(t,e)}}else{let n,o,a,h,l,d,u;const x=s,g=r;s++,r++;let w=new Array(s);for(let t=0;t&lt;s;++t){w[t]=new Array(r);for(let e=0;e&lt;r;++e)w[t][e]=[],w[t][e][0]=this.nodes[3*t][3*e],w[t][e][1]=this.colors[t][e]}for(let t=0;t&lt;s;++t)for(let e=0;e&lt;r;++e)0!==t&amp;&amp;t!==x&amp;&amp;(n=i(w[t-1][e][0],w[t][e][0]),o=i(w[t+1][e][0],w[t][e][0]),w[t][e][2]=c(w[t-1][e][1],w[t][e][1],w[t+1][e][1],n,o)),0!==e&amp;&amp;e!==g&amp;&amp;(n=i(w[t][e-1][0],w[t][e][0]),o=i(w[t][e+1][0],w[t][e][0]),w[t][e][3]=c(w[t][e-1][1],w[t][e][1],w[t][e+1][1],n,o));for(let t=0;t&lt;r;++t){w[0][t][2]=[],w[x][t][2]=[];for(let e=0;e&lt;4;++e)n=i(w[1][t][0],w[0][t][0]),o=i(w[x][t][0],w[x-1][t][0]),w[0][t][2][e]=n&gt;0?2*(w[1][t][1][e]-w[0][t][1][e])/n-w[1][t][2][e]:0,w[x][t][2][e]=o&gt;0?2*(w[x][t][1][e]-w[x-1][t][1][e])/o-w[x-1][t][2][e]:0}for(let t=0;t&lt;s;++t){w[t][0][3]=[],w[t][g][3]=[];for(let e=0;e&lt;4;++e)n=i(w[t][1][0],w[t][0][0]),o=i(w[t][g][0],w[t][g-1][0]),w[t][0][3][e]=n&gt;0?2*(w[t][1][1][e]-w[t][0][1][e])/n-w[t][1][3][e]:0,w[t][g][3][e]=o&gt;0?2*(w[t][g][1][e]-w[t][g-1][1][e])/o-w[t][g-1][3][e]:0}for(let s=0;s&lt;x;++s)for(let r=0;r&lt;g;++r){let n=i(w[s][r][0],w[s+1][r][0]),o=i(w[s][r+1][0],w[s+1][r+1][0]),c=i(w[s][r][0],w[s][r+1][0]),x=i(w[s+1][r][0],w[s+1][r+1][0]),g=[[],[],[],[]];for(let t=0;t&lt;4;++t){(d=[])[0]=w[s][r][1][t],d[1]=w[s+1][r][1][t],d[2]=w[s][r+1][1][t],d[3]=w[s+1][r+1][1][t],d[4]=w[s][r][2][t]*n,d[5]=w[s+1][r][2][t]*n,d[6]=w[s][r+1][2][t]*o,d[7]=w[s+1][r+1][2][t]*o,d[8]=w[s][r][3][t]*c,d[9]=w[s+1][r][3][t]*x,d[10]=w[s][r+1][3][t]*c,d[11]=w[s+1][r+1][3][t]*x,d[12]=0,d[13]=0,d[14]=0,d[15]=0,u=f(d);for(let e=0;e&lt;9;++e){g[t][e]=[];for(let s=0;s&lt;9;++s)g[t][e][s]=p(u,e/8,s/8),g[t][e][s]&gt;255?g[t][e][s]=255:g[t][e][s]&lt;0&amp;&amp;(g[t][e][s]=0)}}h=[];for(let t=3*s,e=3*s+4;t&lt;e;++t)h.push(this.nodes[t].slice(3*r,3*r+4));l=y(h);for(let s=0;s&lt;8;++s)for(let r=0;r&lt;8;++r)(a=new m(l[s][r],[[[g[0][s][r],g[1][s][r],g[2][s][r],g[3][s][r]],[g[0][s][r+1],g[1][s][r+1],g[2][s][r+1],g[3][s][r+1]]],[[g[0][s+1][r],g[1][s+1][r],g[2][s+1][r],g[3][s+1][r]],[g[0][s+1][r+1],g[1][s+1][r+1],g[2][s+1][r+1],g[3][s+1][r+1]]]])).paint(t,e)}}}transform(t){if(t instanceof x)for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].add(t);else if(t instanceof g)for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].transform(t)}scale(t){for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].scale(t)}}document.querySelectorAll(&quot;rect,circle,ellipse,path,text&quot;).forEach((r,n)=&gt;{let o=r.getAttribute(&quot;id&quot;);o||(o=&quot;patchjs_shape&quot;+n,r.setAttribute(&quot;id&quot;,o));const i=r.style.fill.match(/^url\(\s*&quot;?\s*#([^\s&quot;]+)&quot;?\s*\)/),a=r.style.stroke.match(/^url\(\s*&quot;?\s*#([^\s&quot;]+)&quot;?\s*\)/);if(i&amp;&amp;i[1]){const a=document.getElementById(i[1]);if(a&amp;&amp;&quot;meshgradient&quot;===a.nodeName){const i=r.getBBox();let l=document.createElementNS(s,&quot;canvas&quot;);d(l,{width:i.width,height:i.height});const c=l.getContext(&quot;2d&quot;);let u=c.createImageData(i.width,i.height);const f=new b(a);&quot;objectBoundingBox&quot;===a.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;f.scale(new x(i.width,i.height));const p=a.getAttribute(&quot;gradientTransform&quot;);null!=p&amp;&amp;f.transform(h(p)),&quot;userSpaceOnUse&quot;===a.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;f.transform(new x(-i.x,-i.y)),f.paintMesh(u.data,l.width),c.putImageData(u,0,0);const y=document.createElementNS(t,&quot;image&quot;);d(y,{width:i.width,height:i.height,x:i.x,y:i.y});let g=l.toDataURL();y.setAttributeNS(e,&quot;xlink:href&quot;,g),r.parentNode.insertBefore(y,r),r.style.fill=&quot;none&quot;;const w=document.createElementNS(t,&quot;use&quot;);w.setAttributeNS(e,&quot;xlink:href&quot;,&quot;#&quot;+o);const m=&quot;patchjs_clip&quot;+n,M=document.createElementNS(t,&quot;clipPath&quot;);M.setAttribute(&quot;id&quot;,m),M.appendChild(w),r.parentElement.insertBefore(M,r),y.setAttribute(&quot;clip-path&quot;,&quot;url(#&quot;+m+&quot;)&quot;),u=null,l=null,g=null}}if(a&amp;&amp;a[1]){const o=document.getElementById(a[1]);if(o&amp;&amp;&quot;meshgradient&quot;===o.nodeName){const i=parseFloat(r.style.strokeWidth.slice(0,-2))*(parseFloat(r.style.strokeMiterlimit)||parseFloat(r.getAttribute(&quot;stroke-miterlimit&quot;))||1),a=r.getBBox(),l=Math.trunc(a.width+i),c=Math.trunc(a.height+i),u=Math.trunc(a.x-i/2),f=Math.trunc(a.y-i/2);let p=document.createElementNS(s,&quot;canvas&quot;);d(p,{width:l,height:c});const y=p.getContext(&quot;2d&quot;);let g=y.createImageData(l,c);const w=new b(o);&quot;objectBoundingBox&quot;===o.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;w.scale(new x(l,c));const m=o.getAttribute(&quot;gradientTransform&quot;);null!=m&amp;&amp;w.transform(h(m)),&quot;userSpaceOnUse&quot;===o.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;w.transform(new x(-u,-f)),w.paintMesh(g.data,p.width),y.putImageData(g,0,0);const M=document.createElementNS(t,&quot;image&quot;);d(M,{width:l,height:c,x:0,y:0});let S=p.toDataURL();M.setAttributeNS(e,&quot;xlink:href&quot;,S);const k=&quot;pattern_clip&quot;+n,A=document.createElementNS(t,&quot;pattern&quot;);d(A,{id:k,patternUnits:&quot;userSpaceOnUse&quot;,width:l,height:c,x:u,y:f}),A.appendChild(M),o.parentNode.appendChild(A),r.style.stroke=&quot;url(#&quot;+k+&quot;)&quot;,g=null,p=null,S=null}}})}();
</script><script
     id="mesh_polyfill-8"
     type="text/javascript">
!function(){const t=&quot;http://www.w3.org/2000/svg&quot;,e=&quot;http://www.w3.org/1999/xlink&quot;,s=&quot;http://www.w3.org/1999/xhtml&quot;,r=2;if(document.createElementNS(t,&quot;meshgradient&quot;).x)return;const n=(t,e,s,r)=&gt;{let n=new x(.5*(e.x+s.x),.5*(e.y+s.y)),o=new x(.5*(t.x+e.x),.5*(t.y+e.y)),i=new x(.5*(s.x+r.x),.5*(s.y+r.y)),a=new x(.5*(n.x+o.x),.5*(n.y+o.y)),h=new x(.5*(n.x+i.x),.5*(n.y+i.y)),l=new x(.5*(a.x+h.x),.5*(a.y+h.y));return[[t,o,a,l],[l,h,i,r]]},o=t=&gt;{let e=t[0].distSquared(t[1]),s=t[2].distSquared(t[3]),r=.25*t[0].distSquared(t[2]),n=.25*t[1].distSquared(t[3]),o=e&gt;s?e:s,i=r&gt;n?r:n;return 18*(o&gt;i?o:i)},i=(t,e)=&gt;Math.sqrt(t.distSquared(e)),a=(t,e)=&gt;t.scale(2/3).add(e.scale(1/3)),h=t=&gt;{let e,s,r,n,o,i,a,h=new g;return t.match(/(\w+\(\s*[^)]+\))+/g).forEach(t=&gt;{let l=t.match(/[\w.-]+/g),d=l.shift();switch(d){case&quot;translate&quot;:2===l.length?e=new g(1,0,0,1,l[0],l[1]):(console.error(&quot;mesh.js: translate does not have 2 arguments!&quot;),e=new g(1,0,0,1,0,0)),h=h.append(e);break;case&quot;scale&quot;:1===l.length?s=new g(l[0],0,0,l[0],0,0):2===l.length?s=new g(l[0],0,0,l[1],0,0):(console.error(&quot;mesh.js: scale does not have 1 or 2 arguments!&quot;),s=new g(1,0,0,1,0,0)),h=h.append(s);break;case&quot;rotate&quot;:if(3===l.length&amp;&amp;(e=new g(1,0,0,1,l[1],l[2]),h=h.append(e)),l[0]){r=l[0]*Math.PI/180;let t=Math.cos(r),e=Math.sin(r);Math.abs(t)&lt;1e-16&amp;&amp;(t=0),Math.abs(e)&lt;1e-16&amp;&amp;(e=0),a=new g(t,e,-e,t,0,0),h=h.append(a)}else console.error(&quot;math.js: No argument to rotate transform!&quot;);3===l.length&amp;&amp;(e=new g(1,0,0,1,-l[1],-l[2]),h=h.append(e));break;case&quot;skewX&quot;:l[0]?(r=l[0]*Math.PI/180,n=Math.tan(r),o=new g(1,0,n,1,0,0),h=h.append(o)):console.error(&quot;math.js: No argument to skewX transform!&quot;);break;case&quot;skewY&quot;:l[0]?(r=l[0]*Math.PI/180,n=Math.tan(r),i=new g(1,n,0,1,0,0),h=h.append(i)):console.error(&quot;math.js: No argument to skewY transform!&quot;);break;case&quot;matrix&quot;:6===l.length?h=h.append(new g(...l)):console.error(&quot;math.js: Incorrect number of arguments for matrix!&quot;);break;default:console.error(&quot;mesh.js: Unhandled transform type: &quot;+d)}}),h},l=t=&gt;{let e=[],s=t.split(/[ ,]+/);for(let t=0,r=s.length-1;t&lt;r;t+=2)e.push(new x(parseFloat(s[t]),parseFloat(s[t+1])));return e},d=(t,e)=&gt;{for(let s in e)t.setAttribute(s,e[s])},c=(t,e,s,r,n)=&gt;{let o,i,a=[0,0,0,0];for(let h=0;h&lt;3;++h)e[h]&lt;t[h]&amp;&amp;e[h]&lt;s[h]||t[h]&lt;e[h]&amp;&amp;s[h]&lt;e[h]?a[h]=0:(a[h]=.5*((e[h]-t[h])/r+(s[h]-e[h])/n),o=Math.abs(3*(e[h]-t[h])/r),i=Math.abs(3*(s[h]-e[h])/n),a[h]&gt;o?a[h]=o:a[h]&gt;i&amp;&amp;(a[h]=i));return a},u=[[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0],[-3,3,0,0,-2,-1,0,0,0,0,0,0,0,0,0,0],[2,-2,0,0,1,1,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0],[0,0,0,0,0,0,0,0,-3,3,0,0,-2,-1,0,0],[0,0,0,0,0,0,0,0,2,-2,0,0,1,1,0,0],[-3,0,3,0,0,0,0,0,-2,0,-1,0,0,0,0,0],[0,0,0,0,-3,0,3,0,0,0,0,0,-2,0,-1,0],[9,-9,-9,9,6,3,-6,-3,6,-6,3,-3,4,2,2,1],[-6,6,6,-6,-3,-3,3,3,-4,4,-2,2,-2,-2,-1,-1],[2,0,-2,0,0,0,0,0,1,0,1,0,0,0,0,0],[0,0,0,0,2,0,-2,0,0,0,0,0,1,0,1,0],[-6,6,6,-6,-4,-2,4,2,-3,3,-3,3,-2,-1,-2,-1],[4,-4,-4,4,2,2,-2,-2,2,-2,2,-2,1,1,1,1]],f=t=&gt;{let e=[];for(let s=0;s&lt;16;++s){e[s]=0;for(let r=0;r&lt;16;++r)e[s]+=u[s][r]*t[r]}return e},p=(t,e,s)=&gt;{const r=e*e,n=s*s,o=e*e*e,i=s*s*s;return t[0]+t[1]*e+t[2]*r+t[3]*o+t[4]*s+t[5]*s*e+t[6]*s*r+t[7]*s*o+t[8]*n+t[9]*n*e+t[10]*n*r+t[11]*n*o+t[12]*i+t[13]*i*e+t[14]*i*r+t[15]*i*o},y=t=&gt;{let e=[],s=[],r=[];for(let s=0;s&lt;4;++s)e[s]=[],e[s][0]=n(t[0][s],t[1][s],t[2][s],t[3][s]),e[s][1]=[],e[s][1].push(...n(...e[s][0][0])),e[s][1].push(...n(...e[s][0][1])),e[s][2]=[],e[s][2].push(...n(...e[s][1][0])),e[s][2].push(...n(...e[s][1][1])),e[s][2].push(...n(...e[s][1][2])),e[s][2].push(...n(...e[s][1][3]));for(let t=0;t&lt;8;++t){s[t]=[];for(let r=0;r&lt;4;++r)s[t][r]=[],s[t][r][0]=n(e[0][2][t][r],e[1][2][t][r],e[2][2][t][r],e[3][2][t][r]),s[t][r][1]=[],s[t][r][1].push(...n(...s[t][r][0][0])),s[t][r][1].push(...n(...s[t][r][0][1])),s[t][r][2]=[],s[t][r][2].push(...n(...s[t][r][1][0])),s[t][r][2].push(...n(...s[t][r][1][1])),s[t][r][2].push(...n(...s[t][r][1][2])),s[t][r][2].push(...n(...s[t][r][1][3]))}for(let t=0;t&lt;8;++t){r[t]=[];for(let e=0;e&lt;8;++e)r[t][e]=[],r[t][e][0]=s[t][0][2][e],r[t][e][1]=s[t][1][2][e],r[t][e][2]=s[t][2][2][e],r[t][e][3]=s[t][3][2][e]}return r};class x{constructor(t,e){this.x=t||0,this.y=e||0}toString(){return`(x=${this.x}, y=${this.y})`}clone(){return new x(this.x,this.y)}add(t){return new x(this.x+t.x,this.y+t.y)}scale(t){return void 0===t.x?new x(this.x*t,this.y*t):new x(this.x*t.x,this.y*t.y)}distSquared(t){let e=this.x-t.x,s=this.y-t.y;return e*e+s*s}transform(t){let e=this.x*t.a+this.y*t.c+t.e,s=this.x*t.b+this.y*t.d+t.f;return new x(e,s)}}class g{constructor(t,e,s,r,n,o){void 0===t?(this.a=1,this.b=0,this.c=0,this.d=1,this.e=0,this.f=0):(this.a=t,this.b=e,this.c=s,this.d=r,this.e=n,this.f=o)}toString(){return`affine: ${this.a} ${this.c} ${this.e} \n       ${this.b} ${this.d} ${this.f}`}append(t){t instanceof g||console.error(&quot;mesh.js: argument to Affine.append is not affine!&quot;);let e=this.a*t.a+this.c*t.b,s=this.b*t.a+this.d*t.b,r=this.a*t.c+this.c*t.d,n=this.b*t.c+this.d*t.d,o=this.a*t.e+this.c*t.f+this.e,i=this.b*t.e+this.d*t.f+this.f;return new g(e,s,r,n,o,i)}}class w{constructor(t,e){this.nodes=t,this.colors=e}paintCurve(t,e){if(o(this.nodes)&gt;r){const s=n(...this.nodes);let r=[[],[]],o=[[],[]];for(let t=0;t&lt;4;++t)r[0][t]=this.colors[0][t],r[1][t]=(this.colors[0][t]+this.colors[1][t])/2,o[0][t]=r[1][t],o[1][t]=this.colors[1][t];let i=new w(s[0],r),a=new w(s[1],o);i.paintCurve(t,e),a.paintCurve(t,e)}else{let s=Math.round(this.nodes[0].x);if(s&gt;=0&amp;&amp;s&lt;e){let r=4*(~~this.nodes[0].y*e+s);t[r]=Math.round(this.colors[0][0]),t[r+1]=Math.round(this.colors[0][1]),t[r+2]=Math.round(this.colors[0][2]),t[r+3]=Math.round(this.colors[0][3])}}}}class m{constructor(t,e){this.nodes=t,this.colors=e}split(){let t=[[],[],[],[]],e=[[],[],[],[]],s=[[[],[]],[[],[]]],r=[[[],[]],[[],[]]];for(let s=0;s&lt;4;++s){const r=n(this.nodes[0][s],this.nodes[1][s],this.nodes[2][s],this.nodes[3][s]);t[0][s]=r[0][0],t[1][s]=r[0][1],t[2][s]=r[0][2],t[3][s]=r[0][3],e[0][s]=r[1][0],e[1][s]=r[1][1],e[2][s]=r[1][2],e[3][s]=r[1][3]}for(let t=0;t&lt;4;++t)s[0][0][t]=this.colors[0][0][t],s[0][1][t]=this.colors[0][1][t],s[1][0][t]=(this.colors[0][0][t]+this.colors[1][0][t])/2,s[1][1][t]=(this.colors[0][1][t]+this.colors[1][1][t])/2,r[0][0][t]=s[1][0][t],r[0][1][t]=s[1][1][t],r[1][0][t]=this.colors[1][0][t],r[1][1][t]=this.colors[1][1][t];return[new m(t,s),new m(e,r)]}paint(t,e){let s,n=!1;for(let t=0;t&lt;4;++t)if((s=o([this.nodes[0][t],this.nodes[1][t],this.nodes[2][t],this.nodes[3][t]]))&gt;r){n=!0;break}if(n){let s=this.split();s[0].paint(t,e),s[1].paint(t,e)}else{new w([...this.nodes[0]],[...this.colors[0]]).paintCurve(t,e)}}}class b{constructor(t){this.readMesh(t),this.type=t.getAttribute(&quot;type&quot;)||&quot;bilinear&quot;}readMesh(t){let e=[[]],s=[[]],r=Number(t.getAttribute(&quot;x&quot;)),n=Number(t.getAttribute(&quot;y&quot;));e[0][0]=new x(r,n);let o=t.children;for(let t=0,r=o.length;t&lt;r;++t){e[3*t+1]=[],e[3*t+2]=[],e[3*t+3]=[],s[t+1]=[];let r=o[t].children;for(let n=0,o=r.length;n&lt;o;++n){let o=r[n].children;for(let r=0,i=o.length;r&lt;i;++r){let i=r;0!==t&amp;&amp;++i;let h,d=o[r].getAttribute(&quot;path&quot;),c=&quot;l&quot;;null!=d&amp;&amp;(c=(h=d.match(/\s*([lLcC])\s*(.*)/))[1]);let u=l(h[2]);switch(c){case&quot;l&quot;:0===i?(e[3*t][3*n+3]=u[0].add(e[3*t][3*n]),e[3*t][3*n+1]=a(e[3*t][3*n],e[3*t][3*n+3]),e[3*t][3*n+2]=a(e[3*t][3*n+3],e[3*t][3*n])):1===i?(e[3*t+3][3*n+3]=u[0].add(e[3*t][3*n+3]),e[3*t+1][3*n+3]=a(e[3*t][3*n+3],e[3*t+3][3*n+3]),e[3*t+2][3*n+3]=a(e[3*t+3][3*n+3],e[3*t][3*n+3])):2===i?(0===n&amp;&amp;(e[3*t+3][3*n+0]=u[0].add(e[3*t+3][3*n+3])),e[3*t+3][3*n+1]=a(e[3*t+3][3*n],e[3*t+3][3*n+3]),e[3*t+3][3*n+2]=a(e[3*t+3][3*n+3],e[3*t+3][3*n])):(e[3*t+1][3*n]=a(e[3*t][3*n],e[3*t+3][3*n]),e[3*t+2][3*n]=a(e[3*t+3][3*n],e[3*t][3*n]));break;case&quot;L&quot;:0===i?(e[3*t][3*n+3]=u[0],e[3*t][3*n+1]=a(e[3*t][3*n],e[3*t][3*n+3]),e[3*t][3*n+2]=a(e[3*t][3*n+3],e[3*t][3*n])):1===i?(e[3*t+3][3*n+3]=u[0],e[3*t+1][3*n+3]=a(e[3*t][3*n+3],e[3*t+3][3*n+3]),e[3*t+2][3*n+3]=a(e[3*t+3][3*n+3],e[3*t][3*n+3])):2===i?(0===n&amp;&amp;(e[3*t+3][3*n+0]=u[0]),e[3*t+3][3*n+1]=a(e[3*t+3][3*n],e[3*t+3][3*n+3]),e[3*t+3][3*n+2]=a(e[3*t+3][3*n+3],e[3*t+3][3*n])):(e[3*t+1][3*n]=a(e[3*t][3*n],e[3*t+3][3*n]),e[3*t+2][3*n]=a(e[3*t+3][3*n],e[3*t][3*n]));break;case&quot;c&quot;:0===i?(e[3*t][3*n+1]=u[0].add(e[3*t][3*n]),e[3*t][3*n+2]=u[1].add(e[3*t][3*n]),e[3*t][3*n+3]=u[2].add(e[3*t][3*n])):1===i?(e[3*t+1][3*n+3]=u[0].add(e[3*t][3*n+3]),e[3*t+2][3*n+3]=u[1].add(e[3*t][3*n+3]),e[3*t+3][3*n+3]=u[2].add(e[3*t][3*n+3])):2===i?(e[3*t+3][3*n+2]=u[0].add(e[3*t+3][3*n+3]),e[3*t+3][3*n+1]=u[1].add(e[3*t+3][3*n+3]),0===n&amp;&amp;(e[3*t+3][3*n+0]=u[2].add(e[3*t+3][3*n+3]))):(e[3*t+2][3*n]=u[0].add(e[3*t+3][3*n]),e[3*t+1][3*n]=u[1].add(e[3*t+3][3*n]));break;case&quot;C&quot;:0===i?(e[3*t][3*n+1]=u[0],e[3*t][3*n+2]=u[1],e[3*t][3*n+3]=u[2]):1===i?(e[3*t+1][3*n+3]=u[0],e[3*t+2][3*n+3]=u[1],e[3*t+3][3*n+3]=u[2]):2===i?(e[3*t+3][3*n+2]=u[0],e[3*t+3][3*n+1]=u[1],0===n&amp;&amp;(e[3*t+3][3*n+0]=u[2])):(e[3*t+2][3*n]=u[0],e[3*t+1][3*n]=u[1]);break;default:console.error(&quot;mesh.js: &quot;+c+&quot; invalid path type.&quot;)}if(0===t&amp;&amp;0===n||r&gt;0){let e=window.getComputedStyle(o[r]).stopColor.match(/^rgb\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)$/i),a=window.getComputedStyle(o[r]).stopOpacity,h=255;a&amp;&amp;(h=Math.floor(255*a)),e&amp;&amp;(0===i?(s[t][n]=[],s[t][n][0]=Math.floor(e[1]),s[t][n][1]=Math.floor(e[2]),s[t][n][2]=Math.floor(e[3]),s[t][n][3]=h):1===i?(s[t][n+1]=[],s[t][n+1][0]=Math.floor(e[1]),s[t][n+1][1]=Math.floor(e[2]),s[t][n+1][2]=Math.floor(e[3]),s[t][n+1][3]=h):2===i?(s[t+1][n+1]=[],s[t+1][n+1][0]=Math.floor(e[1]),s[t+1][n+1][1]=Math.floor(e[2]),s[t+1][n+1][2]=Math.floor(e[3]),s[t+1][n+1][3]=h):3===i&amp;&amp;(s[t+1][n]=[],s[t+1][n][0]=Math.floor(e[1]),s[t+1][n][1]=Math.floor(e[2]),s[t+1][n][2]=Math.floor(e[3]),s[t+1][n][3]=h))}}e[3*t+1][3*n+1]=new x,e[3*t+1][3*n+2]=new x,e[3*t+2][3*n+1]=new x,e[3*t+2][3*n+2]=new x,e[3*t+1][3*n+1].x=(-4*e[3*t][3*n].x+6*(e[3*t][3*n+1].x+e[3*t+1][3*n].x)+-2*(e[3*t][3*n+3].x+e[3*t+3][3*n].x)+3*(e[3*t+3][3*n+1].x+e[3*t+1][3*n+3].x)+-1*e[3*t+3][3*n+3].x)/9,e[3*t+1][3*n+2].x=(-4*e[3*t][3*n+3].x+6*(e[3*t][3*n+2].x+e[3*t+1][3*n+3].x)+-2*(e[3*t][3*n].x+e[3*t+3][3*n+3].x)+3*(e[3*t+3][3*n+2].x+e[3*t+1][3*n].x)+-1*e[3*t+3][3*n].x)/9,e[3*t+2][3*n+1].x=(-4*e[3*t+3][3*n].x+6*(e[3*t+3][3*n+1].x+e[3*t+2][3*n].x)+-2*(e[3*t+3][3*n+3].x+e[3*t][3*n].x)+3*(e[3*t][3*n+1].x+e[3*t+2][3*n+3].x)+-1*e[3*t][3*n+3].x)/9,e[3*t+2][3*n+2].x=(-4*e[3*t+3][3*n+3].x+6*(e[3*t+3][3*n+2].x+e[3*t+2][3*n+3].x)+-2*(e[3*t+3][3*n].x+e[3*t][3*n+3].x)+3*(e[3*t][3*n+2].x+e[3*t+2][3*n].x)+-1*e[3*t][3*n].x)/9,e[3*t+1][3*n+1].y=(-4*e[3*t][3*n].y+6*(e[3*t][3*n+1].y+e[3*t+1][3*n].y)+-2*(e[3*t][3*n+3].y+e[3*t+3][3*n].y)+3*(e[3*t+3][3*n+1].y+e[3*t+1][3*n+3].y)+-1*e[3*t+3][3*n+3].y)/9,e[3*t+1][3*n+2].y=(-4*e[3*t][3*n+3].y+6*(e[3*t][3*n+2].y+e[3*t+1][3*n+3].y)+-2*(e[3*t][3*n].y+e[3*t+3][3*n+3].y)+3*(e[3*t+3][3*n+2].y+e[3*t+1][3*n].y)+-1*e[3*t+3][3*n].y)/9,e[3*t+2][3*n+1].y=(-4*e[3*t+3][3*n].y+6*(e[3*t+3][3*n+1].y+e[3*t+2][3*n].y)+-2*(e[3*t+3][3*n+3].y+e[3*t][3*n].y)+3*(e[3*t][3*n+1].y+e[3*t+2][3*n+3].y)+-1*e[3*t][3*n+3].y)/9,e[3*t+2][3*n+2].y=(-4*e[3*t+3][3*n+3].y+6*(e[3*t+3][3*n+2].y+e[3*t+2][3*n+3].y)+-2*(e[3*t+3][3*n].y+e[3*t][3*n+3].y)+3*(e[3*t][3*n+2].y+e[3*t+2][3*n].y)+-1*e[3*t][3*n].y)/9}}this.nodes=e,this.colors=s}paintMesh(t,e){let s=(this.nodes.length-1)/3,r=(this.nodes[0].length-1)/3;if(&quot;bilinear&quot;===this.type||s&lt;2||r&lt;2){let n;for(let o=0;o&lt;s;++o)for(let s=0;s&lt;r;++s){let r=[];for(let t=3*o,e=3*o+4;t&lt;e;++t)r.push(this.nodes[t].slice(3*s,3*s+4));let i=[];i.push(this.colors[o].slice(s,s+2)),i.push(this.colors[o+1].slice(s,s+2)),(n=new m(r,i)).paint(t,e)}}else{let n,o,a,h,l,d,u;const x=s,g=r;s++,r++;let w=new Array(s);for(let t=0;t&lt;s;++t){w[t]=new Array(r);for(let e=0;e&lt;r;++e)w[t][e]=[],w[t][e][0]=this.nodes[3*t][3*e],w[t][e][1]=this.colors[t][e]}for(let t=0;t&lt;s;++t)for(let e=0;e&lt;r;++e)0!==t&amp;&amp;t!==x&amp;&amp;(n=i(w[t-1][e][0],w[t][e][0]),o=i(w[t+1][e][0],w[t][e][0]),w[t][e][2]=c(w[t-1][e][1],w[t][e][1],w[t+1][e][1],n,o)),0!==e&amp;&amp;e!==g&amp;&amp;(n=i(w[t][e-1][0],w[t][e][0]),o=i(w[t][e+1][0],w[t][e][0]),w[t][e][3]=c(w[t][e-1][1],w[t][e][1],w[t][e+1][1],n,o));for(let t=0;t&lt;r;++t){w[0][t][2]=[],w[x][t][2]=[];for(let e=0;e&lt;4;++e)n=i(w[1][t][0],w[0][t][0]),o=i(w[x][t][0],w[x-1][t][0]),w[0][t][2][e]=n&gt;0?2*(w[1][t][1][e]-w[0][t][1][e])/n-w[1][t][2][e]:0,w[x][t][2][e]=o&gt;0?2*(w[x][t][1][e]-w[x-1][t][1][e])/o-w[x-1][t][2][e]:0}for(let t=0;t&lt;s;++t){w[t][0][3]=[],w[t][g][3]=[];for(let e=0;e&lt;4;++e)n=i(w[t][1][0],w[t][0][0]),o=i(w[t][g][0],w[t][g-1][0]),w[t][0][3][e]=n&gt;0?2*(w[t][1][1][e]-w[t][0][1][e])/n-w[t][1][3][e]:0,w[t][g][3][e]=o&gt;0?2*(w[t][g][1][e]-w[t][g-1][1][e])/o-w[t][g-1][3][e]:0}for(let s=0;s&lt;x;++s)for(let r=0;r&lt;g;++r){let n=i(w[s][r][0],w[s+1][r][0]),o=i(w[s][r+1][0],w[s+1][r+1][0]),c=i(w[s][r][0],w[s][r+1][0]),x=i(w[s+1][r][0],w[s+1][r+1][0]),g=[[],[],[],[]];for(let t=0;t&lt;4;++t){(d=[])[0]=w[s][r][1][t],d[1]=w[s+1][r][1][t],d[2]=w[s][r+1][1][t],d[3]=w[s+1][r+1][1][t],d[4]=w[s][r][2][t]*n,d[5]=w[s+1][r][2][t]*n,d[6]=w[s][r+1][2][t]*o,d[7]=w[s+1][r+1][2][t]*o,d[8]=w[s][r][3][t]*c,d[9]=w[s+1][r][3][t]*x,d[10]=w[s][r+1][3][t]*c,d[11]=w[s+1][r+1][3][t]*x,d[12]=0,d[13]=0,d[14]=0,d[15]=0,u=f(d);for(let e=0;e&lt;9;++e){g[t][e]=[];for(let s=0;s&lt;9;++s)g[t][e][s]=p(u,e/8,s/8),g[t][e][s]&gt;255?g[t][e][s]=255:g[t][e][s]&lt;0&amp;&amp;(g[t][e][s]=0)}}h=[];for(let t=3*s,e=3*s+4;t&lt;e;++t)h.push(this.nodes[t].slice(3*r,3*r+4));l=y(h);for(let s=0;s&lt;8;++s)for(let r=0;r&lt;8;++r)(a=new m(l[s][r],[[[g[0][s][r],g[1][s][r],g[2][s][r],g[3][s][r]],[g[0][s][r+1],g[1][s][r+1],g[2][s][r+1],g[3][s][r+1]]],[[g[0][s+1][r],g[1][s+1][r],g[2][s+1][r],g[3][s+1][r]],[g[0][s+1][r+1],g[1][s+1][r+1],g[2][s+1][r+1],g[3][s+1][r+1]]]])).paint(t,e)}}}transform(t){if(t instanceof x)for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].add(t);else if(t instanceof g)for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].transform(t)}scale(t){for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].scale(t)}}document.querySelectorAll(&quot;rect,circle,ellipse,path,text&quot;).forEach((r,n)=&gt;{let o=r.getAttribute(&quot;id&quot;);o||(o=&quot;patchjs_shape&quot;+n,r.setAttribute(&quot;id&quot;,o));const i=r.style.fill.match(/^url\(\s*&quot;?\s*#([^\s&quot;]+)&quot;?\s*\)/),a=r.style.stroke.match(/^url\(\s*&quot;?\s*#([^\s&quot;]+)&quot;?\s*\)/);if(i&amp;&amp;i[1]){const a=document.getElementById(i[1]);if(a&amp;&amp;&quot;meshgradient&quot;===a.nodeName){const i=r.getBBox();let l=document.createElementNS(s,&quot;canvas&quot;);d(l,{width:i.width,height:i.height});const c=l.getContext(&quot;2d&quot;);let u=c.createImageData(i.width,i.height);const f=new b(a);&quot;objectBoundingBox&quot;===a.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;f.scale(new x(i.width,i.height));const p=a.getAttribute(&quot;gradientTransform&quot;);null!=p&amp;&amp;f.transform(h(p)),&quot;userSpaceOnUse&quot;===a.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;f.transform(new x(-i.x,-i.y)),f.paintMesh(u.data,l.width),c.putImageData(u,0,0);const y=document.createElementNS(t,&quot;image&quot;);d(y,{width:i.width,height:i.height,x:i.x,y:i.y});let g=l.toDataURL();y.setAttributeNS(e,&quot;xlink:href&quot;,g),r.parentNode.insertBefore(y,r),r.style.fill=&quot;none&quot;;const w=document.createElementNS(t,&quot;use&quot;);w.setAttributeNS(e,&quot;xlink:href&quot;,&quot;#&quot;+o);const m=&quot;patchjs_clip&quot;+n,M=document.createElementNS(t,&quot;clipPath&quot;);M.setAttribute(&quot;id&quot;,m),M.appendChild(w),r.parentElement.insertBefore(M,r),y.setAttribute(&quot;clip-path&quot;,&quot;url(#&quot;+m+&quot;)&quot;),u=null,l=null,g=null}}if(a&amp;&amp;a[1]){const o=document.getElementById(a[1]);if(o&amp;&amp;&quot;meshgradient&quot;===o.nodeName){const i=parseFloat(r.style.strokeWidth.slice(0,-2))*(parseFloat(r.style.strokeMiterlimit)||parseFloat(r.getAttribute(&quot;stroke-miterlimit&quot;))||1),a=r.getBBox(),l=Math.trunc(a.width+i),c=Math.trunc(a.height+i),u=Math.trunc(a.x-i/2),f=Math.trunc(a.y-i/2);let p=document.createElementNS(s,&quot;canvas&quot;);d(p,{width:l,height:c});const y=p.getContext(&quot;2d&quot;);let g=y.createImageData(l,c);const w=new b(o);&quot;objectBoundingBox&quot;===o.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;w.scale(new x(l,c));const m=o.getAttribute(&quot;gradientTransform&quot;);null!=m&amp;&amp;w.transform(h(m)),&quot;userSpaceOnUse&quot;===o.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;w.transform(new x(-u,-f)),w.paintMesh(g.data,p.width),y.putImageData(g,0,0);const M=document.createElementNS(t,&quot;image&quot;);d(M,{width:l,height:c,x:0,y:0});let S=p.toDataURL();M.setAttributeNS(e,&quot;xlink:href&quot;,S);const k=&quot;pattern_clip&quot;+n,A=document.createElementNS(t,&quot;pattern&quot;);d(A,{id:k,patternUnits:&quot;userSpaceOnUse&quot;,width:l,height:c,x:u,y:f}),A.appendChild(M),o.parentNode.appendChild(A),r.style.stroke=&quot;url(#&quot;+k+&quot;)&quot;,g=null,p=null,S=null}}})}();
</script><script
     id="script36975"
     type="text/javascript">
!function(){const t=&quot;http://www.w3.org/2000/svg&quot;,e=&quot;http://www.w3.org/1999/xlink&quot;,s=&quot;http://www.w3.org/1999/xhtml&quot;,r=2;if(document.createElementNS(t,&quot;meshgradient&quot;).x)return;const n=(t,e,s,r)=&gt;{let n=new x(.5*(e.x+s.x),.5*(e.y+s.y)),o=new x(.5*(t.x+e.x),.5*(t.y+e.y)),i=new x(.5*(s.x+r.x),.5*(s.y+r.y)),a=new x(.5*(n.x+o.x),.5*(n.y+o.y)),h=new x(.5*(n.x+i.x),.5*(n.y+i.y)),l=new x(.5*(a.x+h.x),.5*(a.y+h.y));return[[t,o,a,l],[l,h,i,r]]},o=t=&gt;{let e=t[0].distSquared(t[1]),s=t[2].distSquared(t[3]),r=.25*t[0].distSquared(t[2]),n=.25*t[1].distSquared(t[3]),o=e&gt;s?e:s,i=r&gt;n?r:n;return 18*(o&gt;i?o:i)},i=(t,e)=&gt;Math.sqrt(t.distSquared(e)),a=(t,e)=&gt;t.scale(2/3).add(e.scale(1/3)),h=t=&gt;{let e,s,r,n,o,i,a,h=new g;return t.match(/(\w+\(\s*[^)]+\))+/g).forEach(t=&gt;{let l=t.match(/[\w.-]+/g),d=l.shift();switch(d){case&quot;translate&quot;:2===l.length?e=new g(1,0,0,1,l[0],l[1]):(console.error(&quot;mesh.js: translate does not have 2 arguments!&quot;),e=new g(1,0,0,1,0,0)),h=h.append(e);break;case&quot;scale&quot;:1===l.length?s=new g(l[0],0,0,l[0],0,0):2===l.length?s=new g(l[0],0,0,l[1],0,0):(console.error(&quot;mesh.js: scale does not have 1 or 2 arguments!&quot;),s=new g(1,0,0,1,0,0)),h=h.append(s);break;case&quot;rotate&quot;:if(3===l.length&amp;&amp;(e=new g(1,0,0,1,l[1],l[2]),h=h.append(e)),l[0]){r=l[0]*Math.PI/180;let t=Math.cos(r),e=Math.sin(r);Math.abs(t)&lt;1e-16&amp;&amp;(t=0),Math.abs(e)&lt;1e-16&amp;&amp;(e=0),a=new g(t,e,-e,t,0,0),h=h.append(a)}else console.error(&quot;math.js: No argument to rotate transform!&quot;);3===l.length&amp;&amp;(e=new g(1,0,0,1,-l[1],-l[2]),h=h.append(e));break;case&quot;skewX&quot;:l[0]?(r=l[0]*Math.PI/180,n=Math.tan(r),o=new g(1,0,n,1,0,0),h=h.append(o)):console.error(&quot;math.js: No argument to skewX transform!&quot;);break;case&quot;skewY&quot;:l[0]?(r=l[0]*Math.PI/180,n=Math.tan(r),i=new g(1,n,0,1,0,0),h=h.append(i)):console.error(&quot;math.js: No argument to skewY transform!&quot;);break;case&quot;matrix&quot;:6===l.length?h=h.append(new g(...l)):console.error(&quot;math.js: Incorrect number of arguments for matrix!&quot;);break;default:console.error(&quot;mesh.js: Unhandled transform type: &quot;+d)}}),h},l=t=&gt;{let e=[],s=t.split(/[ ,]+/);for(let t=0,r=s.length-1;t&lt;r;t+=2)e.push(new x(parseFloat(s[t]),parseFloat(s[t+1])));return e},d=(t,e)=&gt;{for(let s in e)t.setAttribute(s,e[s])},c=(t,e,s,r,n)=&gt;{let o,i,a=[0,0,0,0];for(let h=0;h&lt;3;++h)e[h]&lt;t[h]&amp;&amp;e[h]&lt;s[h]||t[h]&lt;e[h]&amp;&amp;s[h]&lt;e[h]?a[h]=0:(a[h]=.5*((e[h]-t[h])/r+(s[h]-e[h])/n),o=Math.abs(3*(e[h]-t[h])/r),i=Math.abs(3*(s[h]-e[h])/n),a[h]&gt;o?a[h]=o:a[h]&gt;i&amp;&amp;(a[h]=i));return a},u=[[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0],[-3,3,0,0,-2,-1,0,0,0,0,0,0,0,0,0,0],[2,-2,0,0,1,1,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0],[0,0,0,0,0,0,0,0,-3,3,0,0,-2,-1,0,0],[0,0,0,0,0,0,0,0,2,-2,0,0,1,1,0,0],[-3,0,3,0,0,0,0,0,-2,0,-1,0,0,0,0,0],[0,0,0,0,-3,0,3,0,0,0,0,0,-2,0,-1,0],[9,-9,-9,9,6,3,-6,-3,6,-6,3,-3,4,2,2,1],[-6,6,6,-6,-3,-3,3,3,-4,4,-2,2,-2,-2,-1,-1],[2,0,-2,0,0,0,0,0,1,0,1,0,0,0,0,0],[0,0,0,0,2,0,-2,0,0,0,0,0,1,0,1,0],[-6,6,6,-6,-4,-2,4,2,-3,3,-3,3,-2,-1,-2,-1],[4,-4,-4,4,2,2,-2,-2,2,-2,2,-2,1,1,1,1]],f=t=&gt;{let e=[];for(let s=0;s&lt;16;++s){e[s]=0;for(let r=0;r&lt;16;++r)e[s]+=u[s][r]*t[r]}return e},p=(t,e,s)=&gt;{const r=e*e,n=s*s,o=e*e*e,i=s*s*s;return t[0]+t[1]*e+t[2]*r+t[3]*o+t[4]*s+t[5]*s*e+t[6]*s*r+t[7]*s*o+t[8]*n+t[9]*n*e+t[10]*n*r+t[11]*n*o+t[12]*i+t[13]*i*e+t[14]*i*r+t[15]*i*o},y=t=&gt;{let e=[],s=[],r=[];for(let s=0;s&lt;4;++s)e[s]=[],e[s][0]=n(t[0][s],t[1][s],t[2][s],t[3][s]),e[s][1]=[],e[s][1].push(...n(...e[s][0][0])),e[s][1].push(...n(...e[s][0][1])),e[s][2]=[],e[s][2].push(...n(...e[s][1][0])),e[s][2].push(...n(...e[s][1][1])),e[s][2].push(...n(...e[s][1][2])),e[s][2].push(...n(...e[s][1][3]));for(let t=0;t&lt;8;++t){s[t]=[];for(let r=0;r&lt;4;++r)s[t][r]=[],s[t][r][0]=n(e[0][2][t][r],e[1][2][t][r],e[2][2][t][r],e[3][2][t][r]),s[t][r][1]=[],s[t][r][1].push(...n(...s[t][r][0][0])),s[t][r][1].push(...n(...s[t][r][0][1])),s[t][r][2]=[],s[t][r][2].push(...n(...s[t][r][1][0])),s[t][r][2].push(...n(...s[t][r][1][1])),s[t][r][2].push(...n(...s[t][r][1][2])),s[t][r][2].push(...n(...s[t][r][1][3]))}for(let t=0;t&lt;8;++t){r[t]=[];for(let e=0;e&lt;8;++e)r[t][e]=[],r[t][e][0]=s[t][0][2][e],r[t][e][1]=s[t][1][2][e],r[t][e][2]=s[t][2][2][e],r[t][e][3]=s[t][3][2][e]}return r};class x{constructor(t,e){this.x=t||0,this.y=e||0}toString(){return`(x=${this.x}, y=${this.y})`}clone(){return new x(this.x,this.y)}add(t){return new x(this.x+t.x,this.y+t.y)}scale(t){return void 0===t.x?new x(this.x*t,this.y*t):new x(this.x*t.x,this.y*t.y)}distSquared(t){let e=this.x-t.x,s=this.y-t.y;return e*e+s*s}transform(t){let e=this.x*t.a+this.y*t.c+t.e,s=this.x*t.b+this.y*t.d+t.f;return new x(e,s)}}class g{constructor(t,e,s,r,n,o){void 0===t?(this.a=1,this.b=0,this.c=0,this.d=1,this.e=0,this.f=0):(this.a=t,this.b=e,this.c=s,this.d=r,this.e=n,this.f=o)}toString(){return`affine: ${this.a} ${this.c} ${this.e} \n       ${this.b} ${this.d} ${this.f}`}append(t){t instanceof g||console.error(&quot;mesh.js: argument to Affine.append is not affine!&quot;);let e=this.a*t.a+this.c*t.b,s=this.b*t.a+this.d*t.b,r=this.a*t.c+this.c*t.d,n=this.b*t.c+this.d*t.d,o=this.a*t.e+this.c*t.f+this.e,i=this.b*t.e+this.d*t.f+this.f;return new g(e,s,r,n,o,i)}}class w{constructor(t,e){this.nodes=t,this.colors=e}paintCurve(t,e){if(o(this.nodes)&gt;r){const s=n(...this.nodes);let r=[[],[]],o=[[],[]];for(let t=0;t&lt;4;++t)r[0][t]=this.colors[0][t],r[1][t]=(this.colors[0][t]+this.colors[1][t])/2,o[0][t]=r[1][t],o[1][t]=this.colors[1][t];let i=new w(s[0],r),a=new w(s[1],o);i.paintCurve(t,e),a.paintCurve(t,e)}else{let s=Math.round(this.nodes[0].x);if(s&gt;=0&amp;&amp;s&lt;e){let r=4*(~~this.nodes[0].y*e+s);t[r]=Math.round(this.colors[0][0]),t[r+1]=Math.round(this.colors[0][1]),t[r+2]=Math.round(this.colors[0][2]),t[r+3]=Math.round(this.colors[0][3])}}}}class m{constructor(t,e){this.nodes=t,this.colors=e}split(){let t=[[],[],[],[]],e=[[],[],[],[]],s=[[[],[]],[[],[]]],r=[[[],[]],[[],[]]];for(let s=0;s&lt;4;++s){const r=n(this.nodes[0][s],this.nodes[1][s],this.nodes[2][s],this.nodes[3][s]);t[0][s]=r[0][0],t[1][s]=r[0][1],t[2][s]=r[0][2],t[3][s]=r[0][3],e[0][s]=r[1][0],e[1][s]=r[1][1],e[2][s]=r[1][2],e[3][s]=r[1][3]}for(let t=0;t&lt;4;++t)s[0][0][t]=this.colors[0][0][t],s[0][1][t]=this.colors[0][1][t],s[1][0][t]=(this.colors[0][0][t]+this.colors[1][0][t])/2,s[1][1][t]=(this.colors[0][1][t]+this.colors[1][1][t])/2,r[0][0][t]=s[1][0][t],r[0][1][t]=s[1][1][t],r[1][0][t]=this.colors[1][0][t],r[1][1][t]=this.colors[1][1][t];return[new m(t,s),new m(e,r)]}paint(t,e){let s,n=!1;for(let t=0;t&lt;4;++t)if((s=o([this.nodes[0][t],this.nodes[1][t],this.nodes[2][t],this.nodes[3][t]]))&gt;r){n=!0;break}if(n){let s=this.split();s[0].paint(t,e),s[1].paint(t,e)}else{new w([...this.nodes[0]],[...this.colors[0]]).paintCurve(t,e)}}}class b{constructor(t){this.readMesh(t),this.type=t.getAttribute(&quot;type&quot;)||&quot;bilinear&quot;}readMesh(t){let e=[[]],s=[[]],r=Number(t.getAttribute(&quot;x&quot;)),n=Number(t.getAttribute(&quot;y&quot;));e[0][0]=new x(r,n);let o=t.children;for(let t=0,r=o.length;t&lt;r;++t){e[3*t+1]=[],e[3*t+2]=[],e[3*t+3]=[],s[t+1]=[];let r=o[t].children;for(let n=0,o=r.length;n&lt;o;++n){let o=r[n].children;for(let r=0,i=o.length;r&lt;i;++r){let i=r;0!==t&amp;&amp;++i;let h,d=o[r].getAttribute(&quot;path&quot;),c=&quot;l&quot;;null!=d&amp;&amp;(c=(h=d.match(/\s*([lLcC])\s*(.*)/))[1]);let u=l(h[2]);switch(c){case&quot;l&quot;:0===i?(e[3*t][3*n+3]=u[0].add(e[3*t][3*n]),e[3*t][3*n+1]=a(e[3*t][3*n],e[3*t][3*n+3]),e[3*t][3*n+2]=a(e[3*t][3*n+3],e[3*t][3*n])):1===i?(e[3*t+3][3*n+3]=u[0].add(e[3*t][3*n+3]),e[3*t+1][3*n+3]=a(e[3*t][3*n+3],e[3*t+3][3*n+3]),e[3*t+2][3*n+3]=a(e[3*t+3][3*n+3],e[3*t][3*n+3])):2===i?(0===n&amp;&amp;(e[3*t+3][3*n+0]=u[0].add(e[3*t+3][3*n+3])),e[3*t+3][3*n+1]=a(e[3*t+3][3*n],e[3*t+3][3*n+3]),e[3*t+3][3*n+2]=a(e[3*t+3][3*n+3],e[3*t+3][3*n])):(e[3*t+1][3*n]=a(e[3*t][3*n],e[3*t+3][3*n]),e[3*t+2][3*n]=a(e[3*t+3][3*n],e[3*t][3*n]));break;case&quot;L&quot;:0===i?(e[3*t][3*n+3]=u[0],e[3*t][3*n+1]=a(e[3*t][3*n],e[3*t][3*n+3]),e[3*t][3*n+2]=a(e[3*t][3*n+3],e[3*t][3*n])):1===i?(e[3*t+3][3*n+3]=u[0],e[3*t+1][3*n+3]=a(e[3*t][3*n+3],e[3*t+3][3*n+3]),e[3*t+2][3*n+3]=a(e[3*t+3][3*n+3],e[3*t][3*n+3])):2===i?(0===n&amp;&amp;(e[3*t+3][3*n+0]=u[0]),e[3*t+3][3*n+1]=a(e[3*t+3][3*n],e[3*t+3][3*n+3]),e[3*t+3][3*n+2]=a(e[3*t+3][3*n+3],e[3*t+3][3*n])):(e[3*t+1][3*n]=a(e[3*t][3*n],e[3*t+3][3*n]),e[3*t+2][3*n]=a(e[3*t+3][3*n],e[3*t][3*n]));break;case&quot;c&quot;:0===i?(e[3*t][3*n+1]=u[0].add(e[3*t][3*n]),e[3*t][3*n+2]=u[1].add(e[3*t][3*n]),e[3*t][3*n+3]=u[2].add(e[3*t][3*n])):1===i?(e[3*t+1][3*n+3]=u[0].add(e[3*t][3*n+3]),e[3*t+2][3*n+3]=u[1].add(e[3*t][3*n+3]),e[3*t+3][3*n+3]=u[2].add(e[3*t][3*n+3])):2===i?(e[3*t+3][3*n+2]=u[0].add(e[3*t+3][3*n+3]),e[3*t+3][3*n+1]=u[1].add(e[3*t+3][3*n+3]),0===n&amp;&amp;(e[3*t+3][3*n+0]=u[2].add(e[3*t+3][3*n+3]))):(e[3*t+2][3*n]=u[0].add(e[3*t+3][3*n]),e[3*t+1][3*n]=u[1].add(e[3*t+3][3*n]));break;case&quot;C&quot;:0===i?(e[3*t][3*n+1]=u[0],e[3*t][3*n+2]=u[1],e[3*t][3*n+3]=u[2]):1===i?(e[3*t+1][3*n+3]=u[0],e[3*t+2][3*n+3]=u[1],e[3*t+3][3*n+3]=u[2]):2===i?(e[3*t+3][3*n+2]=u[0],e[3*t+3][3*n+1]=u[1],0===n&amp;&amp;(e[3*t+3][3*n+0]=u[2])):(e[3*t+2][3*n]=u[0],e[3*t+1][3*n]=u[1]);break;default:console.error(&quot;mesh.js: &quot;+c+&quot; invalid path type.&quot;)}if(0===t&amp;&amp;0===n||r&gt;0){let e=window.getComputedStyle(o[r]).stopColor.match(/^rgb\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)$/i),a=window.getComputedStyle(o[r]).stopOpacity,h=255;a&amp;&amp;(h=Math.floor(255*a)),e&amp;&amp;(0===i?(s[t][n]=[],s[t][n][0]=Math.floor(e[1]),s[t][n][1]=Math.floor(e[2]),s[t][n][2]=Math.floor(e[3]),s[t][n][3]=h):1===i?(s[t][n+1]=[],s[t][n+1][0]=Math.floor(e[1]),s[t][n+1][1]=Math.floor(e[2]),s[t][n+1][2]=Math.floor(e[3]),s[t][n+1][3]=h):2===i?(s[t+1][n+1]=[],s[t+1][n+1][0]=Math.floor(e[1]),s[t+1][n+1][1]=Math.floor(e[2]),s[t+1][n+1][2]=Math.floor(e[3]),s[t+1][n+1][3]=h):3===i&amp;&amp;(s[t+1][n]=[],s[t+1][n][0]=Math.floor(e[1]),s[t+1][n][1]=Math.floor(e[2]),s[t+1][n][2]=Math.floor(e[3]),s[t+1][n][3]=h))}}e[3*t+1][3*n+1]=new x,e[3*t+1][3*n+2]=new x,e[3*t+2][3*n+1]=new x,e[3*t+2][3*n+2]=new x,e[3*t+1][3*n+1].x=(-4*e[3*t][3*n].x+6*(e[3*t][3*n+1].x+e[3*t+1][3*n].x)+-2*(e[3*t][3*n+3].x+e[3*t+3][3*n].x)+3*(e[3*t+3][3*n+1].x+e[3*t+1][3*n+3].x)+-1*e[3*t+3][3*n+3].x)/9,e[3*t+1][3*n+2].x=(-4*e[3*t][3*n+3].x+6*(e[3*t][3*n+2].x+e[3*t+1][3*n+3].x)+-2*(e[3*t][3*n].x+e[3*t+3][3*n+3].x)+3*(e[3*t+3][3*n+2].x+e[3*t+1][3*n].x)+-1*e[3*t+3][3*n].x)/9,e[3*t+2][3*n+1].x=(-4*e[3*t+3][3*n].x+6*(e[3*t+3][3*n+1].x+e[3*t+2][3*n].x)+-2*(e[3*t+3][3*n+3].x+e[3*t][3*n].x)+3*(e[3*t][3*n+1].x+e[3*t+2][3*n+3].x)+-1*e[3*t][3*n+3].x)/9,e[3*t+2][3*n+2].x=(-4*e[3*t+3][3*n+3].x+6*(e[3*t+3][3*n+2].x+e[3*t+2][3*n+3].x)+-2*(e[3*t+3][3*n].x+e[3*t][3*n+3].x)+3*(e[3*t][3*n+2].x+e[3*t+2][3*n].x)+-1*e[3*t][3*n].x)/9,e[3*t+1][3*n+1].y=(-4*e[3*t][3*n].y+6*(e[3*t][3*n+1].y+e[3*t+1][3*n].y)+-2*(e[3*t][3*n+3].y+e[3*t+3][3*n].y)+3*(e[3*t+3][3*n+1].y+e[3*t+1][3*n+3].y)+-1*e[3*t+3][3*n+3].y)/9,e[3*t+1][3*n+2].y=(-4*e[3*t][3*n+3].y+6*(e[3*t][3*n+2].y+e[3*t+1][3*n+3].y)+-2*(e[3*t][3*n].y+e[3*t+3][3*n+3].y)+3*(e[3*t+3][3*n+2].y+e[3*t+1][3*n].y)+-1*e[3*t+3][3*n].y)/9,e[3*t+2][3*n+1].y=(-4*e[3*t+3][3*n].y+6*(e[3*t+3][3*n+1].y+e[3*t+2][3*n].y)+-2*(e[3*t+3][3*n+3].y+e[3*t][3*n].y)+3*(e[3*t][3*n+1].y+e[3*t+2][3*n+3].y)+-1*e[3*t][3*n+3].y)/9,e[3*t+2][3*n+2].y=(-4*e[3*t+3][3*n+3].y+6*(e[3*t+3][3*n+2].y+e[3*t+2][3*n+3].y)+-2*(e[3*t+3][3*n].y+e[3*t][3*n+3].y)+3*(e[3*t][3*n+2].y+e[3*t+2][3*n].y)+-1*e[3*t][3*n].y)/9}}this.nodes=e,this.colors=s}paintMesh(t,e){let s=(this.nodes.length-1)/3,r=(this.nodes[0].length-1)/3;if(&quot;bilinear&quot;===this.type||s&lt;2||r&lt;2){let n;for(let o=0;o&lt;s;++o)for(let s=0;s&lt;r;++s){let r=[];for(let t=3*o,e=3*o+4;t&lt;e;++t)r.push(this.nodes[t].slice(3*s,3*s+4));let i=[];i.push(this.colors[o].slice(s,s+2)),i.push(this.colors[o+1].slice(s,s+2)),(n=new m(r,i)).paint(t,e)}}else{let n,o,a,h,l,d,u;const x=s,g=r;s++,r++;let w=new Array(s);for(let t=0;t&lt;s;++t){w[t]=new Array(r);for(let e=0;e&lt;r;++e)w[t][e]=[],w[t][e][0]=this.nodes[3*t][3*e],w[t][e][1]=this.colors[t][e]}for(let t=0;t&lt;s;++t)for(let e=0;e&lt;r;++e)0!==t&amp;&amp;t!==x&amp;&amp;(n=i(w[t-1][e][0],w[t][e][0]),o=i(w[t+1][e][0],w[t][e][0]),w[t][e][2]=c(w[t-1][e][1],w[t][e][1],w[t+1][e][1],n,o)),0!==e&amp;&amp;e!==g&amp;&amp;(n=i(w[t][e-1][0],w[t][e][0]),o=i(w[t][e+1][0],w[t][e][0]),w[t][e][3]=c(w[t][e-1][1],w[t][e][1],w[t][e+1][1],n,o));for(let t=0;t&lt;r;++t){w[0][t][2]=[],w[x][t][2]=[];for(let e=0;e&lt;4;++e)n=i(w[1][t][0],w[0][t][0]),o=i(w[x][t][0],w[x-1][t][0]),w[0][t][2][e]=n&gt;0?2*(w[1][t][1][e]-w[0][t][1][e])/n-w[1][t][2][e]:0,w[x][t][2][e]=o&gt;0?2*(w[x][t][1][e]-w[x-1][t][1][e])/o-w[x-1][t][2][e]:0}for(let t=0;t&lt;s;++t){w[t][0][3]=[],w[t][g][3]=[];for(let e=0;e&lt;4;++e)n=i(w[t][1][0],w[t][0][0]),o=i(w[t][g][0],w[t][g-1][0]),w[t][0][3][e]=n&gt;0?2*(w[t][1][1][e]-w[t][0][1][e])/n-w[t][1][3][e]:0,w[t][g][3][e]=o&gt;0?2*(w[t][g][1][e]-w[t][g-1][1][e])/o-w[t][g-1][3][e]:0}for(let s=0;s&lt;x;++s)for(let r=0;r&lt;g;++r){let n=i(w[s][r][0],w[s+1][r][0]),o=i(w[s][r+1][0],w[s+1][r+1][0]),c=i(w[s][r][0],w[s][r+1][0]),x=i(w[s+1][r][0],w[s+1][r+1][0]),g=[[],[],[],[]];for(let t=0;t&lt;4;++t){(d=[])[0]=w[s][r][1][t],d[1]=w[s+1][r][1][t],d[2]=w[s][r+1][1][t],d[3]=w[s+1][r+1][1][t],d[4]=w[s][r][2][t]*n,d[5]=w[s+1][r][2][t]*n,d[6]=w[s][r+1][2][t]*o,d[7]=w[s+1][r+1][2][t]*o,d[8]=w[s][r][3][t]*c,d[9]=w[s+1][r][3][t]*x,d[10]=w[s][r+1][3][t]*c,d[11]=w[s+1][r+1][3][t]*x,d[12]=0,d[13]=0,d[14]=0,d[15]=0,u=f(d);for(let e=0;e&lt;9;++e){g[t][e]=[];for(let s=0;s&lt;9;++s)g[t][e][s]=p(u,e/8,s/8),g[t][e][s]&gt;255?g[t][e][s]=255:g[t][e][s]&lt;0&amp;&amp;(g[t][e][s]=0)}}h=[];for(let t=3*s,e=3*s+4;t&lt;e;++t)h.push(this.nodes[t].slice(3*r,3*r+4));l=y(h);for(let s=0;s&lt;8;++s)for(let r=0;r&lt;8;++r)(a=new m(l[s][r],[[[g[0][s][r],g[1][s][r],g[2][s][r],g[3][s][r]],[g[0][s][r+1],g[1][s][r+1],g[2][s][r+1],g[3][s][r+1]]],[[g[0][s+1][r],g[1][s+1][r],g[2][s+1][r],g[3][s+1][r]],[g[0][s+1][r+1],g[1][s+1][r+1],g[2][s+1][r+1],g[3][s+1][r+1]]]])).paint(t,e)}}}transform(t){if(t instanceof x)for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].add(t);else if(t instanceof g)for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].transform(t)}scale(t){for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].scale(t)}}document.querySelectorAll(&quot;rect,circle,ellipse,path,text&quot;).forEach((r,n)=&gt;{let o=r.getAttribute(&quot;id&quot;);o||(o=&quot;patchjs_shape&quot;+n,r.setAttribute(&quot;id&quot;,o));const i=r.style.fill.match(/^url\(\s*&quot;?\s*#([^\s&quot;]+)&quot;?\s*\)/),a=r.style.stroke.match(/^url\(\s*&quot;?\s*#([^\s&quot;]+)&quot;?\s*\)/);if(i&amp;&amp;i[1]){const a=document.getElementById(i[1]);if(a&amp;&amp;&quot;meshgradient&quot;===a.nodeName){const i=r.getBBox();let l=document.createElementNS(s,&quot;canvas&quot;);d(l,{width:i.width,height:i.height});const c=l.getContext(&quot;2d&quot;);let u=c.createImageData(i.width,i.height);const f=new b(a);&quot;objectBoundingBox&quot;===a.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;f.scale(new x(i.width,i.height));const p=a.getAttribute(&quot;gradientTransform&quot;);null!=p&amp;&amp;f.transform(h(p)),&quot;userSpaceOnUse&quot;===a.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;f.transform(new x(-i.x,-i.y)),f.paintMesh(u.data,l.width),c.putImageData(u,0,0);const y=document.createElementNS(t,&quot;image&quot;);d(y,{width:i.width,height:i.height,x:i.x,y:i.y});let g=l.toDataURL();y.setAttributeNS(e,&quot;xlink:href&quot;,g),r.parentNode.insertBefore(y,r),r.style.fill=&quot;none&quot;;const w=document.createElementNS(t,&quot;use&quot;);w.setAttributeNS(e,&quot;xlink:href&quot;,&quot;#&quot;+o);const m=&quot;patchjs_clip&quot;+n,M=document.createElementNS(t,&quot;clipPath&quot;);M.setAttribute(&quot;id&quot;,m),M.appendChild(w),r.parentElement.insertBefore(M,r),y.setAttribute(&quot;clip-path&quot;,&quot;url(#&quot;+m+&quot;)&quot;),u=null,l=null,g=null}}if(a&amp;&amp;a[1]){const o=document.getElementById(a[1]);if(o&amp;&amp;&quot;meshgradient&quot;===o.nodeName){const i=parseFloat(r.style.strokeWidth.slice(0,-2))*(parseFloat(r.style.strokeMiterlimit)||parseFloat(r.getAttribute(&quot;stroke-miterlimit&quot;))||1),a=r.getBBox(),l=Math.trunc(a.width+i),c=Math.trunc(a.height+i),u=Math.trunc(a.x-i/2),f=Math.trunc(a.y-i/2);let p=document.createElementNS(s,&quot;canvas&quot;);d(p,{width:l,height:c});const y=p.getContext(&quot;2d&quot;);let g=y.createImageData(l,c);const w=new b(o);&quot;objectBoundingBox&quot;===o.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;w.scale(new x(l,c));const m=o.getAttribute(&quot;gradientTransform&quot;);null!=m&amp;&amp;w.transform(h(m)),&quot;userSpaceOnUse&quot;===o.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;w.transform(new x(-u,-f)),w.paintMesh(g.data,p.width),y.putImageData(g,0,0);const M=document.createElementNS(t,&quot;image&quot;);d(M,{width:l,height:c,x:0,y:0});let S=p.toDataURL();M.setAttributeNS(e,&quot;xlink:href&quot;,S);const k=&quot;pattern_clip&quot;+n,A=document.createElementNS(t,&quot;pattern&quot;);d(A,{id:k,patternUnits:&quot;userSpaceOnUse&quot;,width:l,height:c,x:u,y:f}),A.appendChild(M),o.parentNode.appendChild(A),r.style.stroke=&quot;url(#&quot;+k+&quot;)&quot;,g=null,p=null,S=null}}})}();
</script><script
     id="script104539"
     type="text/javascript">
!function(){const t=&quot;http://www.w3.org/2000/svg&quot;,e=&quot;http://www.w3.org/1999/xlink&quot;,s=&quot;http://www.w3.org/1999/xhtml&quot;,r=2;if(document.createElementNS(t,&quot;meshgradient&quot;).x)return;const n=(t,e,s,r)=&gt;{let n=new x(.5*(e.x+s.x),.5*(e.y+s.y)),o=new x(.5*(t.x+e.x),.5*(t.y+e.y)),i=new x(.5*(s.x+r.x),.5*(s.y+r.y)),a=new x(.5*(n.x+o.x),.5*(n.y+o.y)),h=new x(.5*(n.x+i.x),.5*(n.y+i.y)),l=new x(.5*(a.x+h.x),.5*(a.y+h.y));return[[t,o,a,l],[l,h,i,r]]},o=t=&gt;{let e=t[0].distSquared(t[1]),s=t[2].distSquared(t[3]),r=.25*t[0].distSquared(t[2]),n=.25*t[1].distSquared(t[3]),o=e&gt;s?e:s,i=r&gt;n?r:n;return 18*(o&gt;i?o:i)},i=(t,e)=&gt;Math.sqrt(t.distSquared(e)),a=(t,e)=&gt;t.scale(2/3).add(e.scale(1/3)),h=t=&gt;{let e,s,r,n,o,i,a,h=new g;return t.match(/(\w+\(\s*[^)]+\))+/g).forEach(t=&gt;{let l=t.match(/[\w.-]+/g),d=l.shift();switch(d){case&quot;translate&quot;:2===l.length?e=new g(1,0,0,1,l[0],l[1]):(console.error(&quot;mesh.js: translate does not have 2 arguments!&quot;),e=new g(1,0,0,1,0,0)),h=h.append(e);break;case&quot;scale&quot;:1===l.length?s=new g(l[0],0,0,l[0],0,0):2===l.length?s=new g(l[0],0,0,l[1],0,0):(console.error(&quot;mesh.js: scale does not have 1 or 2 arguments!&quot;),s=new g(1,0,0,1,0,0)),h=h.append(s);break;case&quot;rotate&quot;:if(3===l.length&amp;&amp;(e=new g(1,0,0,1,l[1],l[2]),h=h.append(e)),l[0]){r=l[0]*Math.PI/180;let t=Math.cos(r),e=Math.sin(r);Math.abs(t)&lt;1e-16&amp;&amp;(t=0),Math.abs(e)&lt;1e-16&amp;&amp;(e=0),a=new g(t,e,-e,t,0,0),h=h.append(a)}else console.error(&quot;math.js: No argument to rotate transform!&quot;);3===l.length&amp;&amp;(e=new g(1,0,0,1,-l[1],-l[2]),h=h.append(e));break;case&quot;skewX&quot;:l[0]?(r=l[0]*Math.PI/180,n=Math.tan(r),o=new g(1,0,n,1,0,0),h=h.append(o)):console.error(&quot;math.js: No argument to skewX transform!&quot;);break;case&quot;skewY&quot;:l[0]?(r=l[0]*Math.PI/180,n=Math.tan(r),i=new g(1,n,0,1,0,0),h=h.append(i)):console.error(&quot;math.js: No argument to skewY transform!&quot;);break;case&quot;matrix&quot;:6===l.length?h=h.append(new g(...l)):console.error(&quot;math.js: Incorrect number of arguments for matrix!&quot;);break;default:console.error(&quot;mesh.js: Unhandled transform type: &quot;+d)}}),h},l=t=&gt;{let e=[],s=t.split(/[ ,]+/);for(let t=0,r=s.length-1;t&lt;r;t+=2)e.push(new x(parseFloat(s[t]),parseFloat(s[t+1])));return e},d=(t,e)=&gt;{for(let s in e)t.setAttribute(s,e[s])},c=(t,e,s,r,n)=&gt;{let o,i,a=[0,0,0,0];for(let h=0;h&lt;3;++h)e[h]&lt;t[h]&amp;&amp;e[h]&lt;s[h]||t[h]&lt;e[h]&amp;&amp;s[h]&lt;e[h]?a[h]=0:(a[h]=.5*((e[h]-t[h])/r+(s[h]-e[h])/n),o=Math.abs(3*(e[h]-t[h])/r),i=Math.abs(3*(s[h]-e[h])/n),a[h]&gt;o?a[h]=o:a[h]&gt;i&amp;&amp;(a[h]=i));return a},u=[[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0],[-3,3,0,0,-2,-1,0,0,0,0,0,0,0,0,0,0],[2,-2,0,0,1,1,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0],[0,0,0,0,0,0,0,0,-3,3,0,0,-2,-1,0,0],[0,0,0,0,0,0,0,0,2,-2,0,0,1,1,0,0],[-3,0,3,0,0,0,0,0,-2,0,-1,0,0,0,0,0],[0,0,0,0,-3,0,3,0,0,0,0,0,-2,0,-1,0],[9,-9,-9,9,6,3,-6,-3,6,-6,3,-3,4,2,2,1],[-6,6,6,-6,-3,-3,3,3,-4,4,-2,2,-2,-2,-1,-1],[2,0,-2,0,0,0,0,0,1,0,1,0,0,0,0,0],[0,0,0,0,2,0,-2,0,0,0,0,0,1,0,1,0],[-6,6,6,-6,-4,-2,4,2,-3,3,-3,3,-2,-1,-2,-1],[4,-4,-4,4,2,2,-2,-2,2,-2,2,-2,1,1,1,1]],f=t=&gt;{let e=[];for(let s=0;s&lt;16;++s){e[s]=0;for(let r=0;r&lt;16;++r)e[s]+=u[s][r]*t[r]}return e},p=(t,e,s)=&gt;{const r=e*e,n=s*s,o=e*e*e,i=s*s*s;return t[0]+t[1]*e+t[2]*r+t[3]*o+t[4]*s+t[5]*s*e+t[6]*s*r+t[7]*s*o+t[8]*n+t[9]*n*e+t[10]*n*r+t[11]*n*o+t[12]*i+t[13]*i*e+t[14]*i*r+t[15]*i*o},y=t=&gt;{let e=[],s=[],r=[];for(let s=0;s&lt;4;++s)e[s]=[],e[s][0]=n(t[0][s],t[1][s],t[2][s],t[3][s]),e[s][1]=[],e[s][1].push(...n(...e[s][0][0])),e[s][1].push(...n(...e[s][0][1])),e[s][2]=[],e[s][2].push(...n(...e[s][1][0])),e[s][2].push(...n(...e[s][1][1])),e[s][2].push(...n(...e[s][1][2])),e[s][2].push(...n(...e[s][1][3]));for(let t=0;t&lt;8;++t){s[t]=[];for(let r=0;r&lt;4;++r)s[t][r]=[],s[t][r][0]=n(e[0][2][t][r],e[1][2][t][r],e[2][2][t][r],e[3][2][t][r]),s[t][r][1]=[],s[t][r][1].push(...n(...s[t][r][0][0])),s[t][r][1].push(...n(...s[t][r][0][1])),s[t][r][2]=[],s[t][r][2].push(...n(...s[t][r][1][0])),s[t][r][2].push(...n(...s[t][r][1][1])),s[t][r][2].push(...n(...s[t][r][1][2])),s[t][r][2].push(...n(...s[t][r][1][3]))}for(let t=0;t&lt;8;++t){r[t]=[];for(let e=0;e&lt;8;++e)r[t][e]=[],r[t][e][0]=s[t][0][2][e],r[t][e][1]=s[t][1][2][e],r[t][e][2]=s[t][2][2][e],r[t][e][3]=s[t][3][2][e]}return r};class x{constructor(t,e){this.x=t||0,this.y=e||0}toString(){return`(x=${this.x}, y=${this.y})`}clone(){return new x(this.x,this.y)}add(t){return new x(this.x+t.x,this.y+t.y)}scale(t){return void 0===t.x?new x(this.x*t,this.y*t):new x(this.x*t.x,this.y*t.y)}distSquared(t){let e=this.x-t.x,s=this.y-t.y;return e*e+s*s}transform(t){let e=this.x*t.a+this.y*t.c+t.e,s=this.x*t.b+this.y*t.d+t.f;return new x(e,s)}}class g{constructor(t,e,s,r,n,o){void 0===t?(this.a=1,this.b=0,this.c=0,this.d=1,this.e=0,this.f=0):(this.a=t,this.b=e,this.c=s,this.d=r,this.e=n,this.f=o)}toString(){return`affine: ${this.a} ${this.c} ${this.e} \n       ${this.b} ${this.d} ${this.f}`}append(t){t instanceof g||console.error(&quot;mesh.js: argument to Affine.append is not affine!&quot;);let e=this.a*t.a+this.c*t.b,s=this.b*t.a+this.d*t.b,r=this.a*t.c+this.c*t.d,n=this.b*t.c+this.d*t.d,o=this.a*t.e+this.c*t.f+this.e,i=this.b*t.e+this.d*t.f+this.f;return new g(e,s,r,n,o,i)}}class w{constructor(t,e){this.nodes=t,this.colors=e}paintCurve(t,e){if(o(this.nodes)&gt;r){const s=n(...this.nodes);let r=[[],[]],o=[[],[]];for(let t=0;t&lt;4;++t)r[0][t]=this.colors[0][t],r[1][t]=(this.colors[0][t]+this.colors[1][t])/2,o[0][t]=r[1][t],o[1][t]=this.colors[1][t];let i=new w(s[0],r),a=new w(s[1],o);i.paintCurve(t,e),a.paintCurve(t,e)}else{let s=Math.round(this.nodes[0].x);if(s&gt;=0&amp;&amp;s&lt;e){let r=4*(~~this.nodes[0].y*e+s);t[r]=Math.round(this.colors[0][0]),t[r+1]=Math.round(this.colors[0][1]),t[r+2]=Math.round(this.colors[0][2]),t[r+3]=Math.round(this.colors[0][3])}}}}class m{constructor(t,e){this.nodes=t,this.colors=e}split(){let t=[[],[],[],[]],e=[[],[],[],[]],s=[[[],[]],[[],[]]],r=[[[],[]],[[],[]]];for(let s=0;s&lt;4;++s){const r=n(this.nodes[0][s],this.nodes[1][s],this.nodes[2][s],this.nodes[3][s]);t[0][s]=r[0][0],t[1][s]=r[0][1],t[2][s]=r[0][2],t[3][s]=r[0][3],e[0][s]=r[1][0],e[1][s]=r[1][1],e[2][s]=r[1][2],e[3][s]=r[1][3]}for(let t=0;t&lt;4;++t)s[0][0][t]=this.colors[0][0][t],s[0][1][t]=this.colors[0][1][t],s[1][0][t]=(this.colors[0][0][t]+this.colors[1][0][t])/2,s[1][1][t]=(this.colors[0][1][t]+this.colors[1][1][t])/2,r[0][0][t]=s[1][0][t],r[0][1][t]=s[1][1][t],r[1][0][t]=this.colors[1][0][t],r[1][1][t]=this.colors[1][1][t];return[new m(t,s),new m(e,r)]}paint(t,e){let s,n=!1;for(let t=0;t&lt;4;++t)if((s=o([this.nodes[0][t],this.nodes[1][t],this.nodes[2][t],this.nodes[3][t]]))&gt;r){n=!0;break}if(n){let s=this.split();s[0].paint(t,e),s[1].paint(t,e)}else{new w([...this.nodes[0]],[...this.colors[0]]).paintCurve(t,e)}}}class b{constructor(t){this.readMesh(t),this.type=t.getAttribute(&quot;type&quot;)||&quot;bilinear&quot;}readMesh(t){let e=[[]],s=[[]],r=Number(t.getAttribute(&quot;x&quot;)),n=Number(t.getAttribute(&quot;y&quot;));e[0][0]=new x(r,n);let o=t.children;for(let t=0,r=o.length;t&lt;r;++t){e[3*t+1]=[],e[3*t+2]=[],e[3*t+3]=[],s[t+1]=[];let r=o[t].children;for(let n=0,o=r.length;n&lt;o;++n){let o=r[n].children;for(let r=0,i=o.length;r&lt;i;++r){let i=r;0!==t&amp;&amp;++i;let h,d=o[r].getAttribute(&quot;path&quot;),c=&quot;l&quot;;null!=d&amp;&amp;(c=(h=d.match(/\s*([lLcC])\s*(.*)/))[1]);let u=l(h[2]);switch(c){case&quot;l&quot;:0===i?(e[3*t][3*n+3]=u[0].add(e[3*t][3*n]),e[3*t][3*n+1]=a(e[3*t][3*n],e[3*t][3*n+3]),e[3*t][3*n+2]=a(e[3*t][3*n+3],e[3*t][3*n])):1===i?(e[3*t+3][3*n+3]=u[0].add(e[3*t][3*n+3]),e[3*t+1][3*n+3]=a(e[3*t][3*n+3],e[3*t+3][3*n+3]),e[3*t+2][3*n+3]=a(e[3*t+3][3*n+3],e[3*t][3*n+3])):2===i?(0===n&amp;&amp;(e[3*t+3][3*n+0]=u[0].add(e[3*t+3][3*n+3])),e[3*t+3][3*n+1]=a(e[3*t+3][3*n],e[3*t+3][3*n+3]),e[3*t+3][3*n+2]=a(e[3*t+3][3*n+3],e[3*t+3][3*n])):(e[3*t+1][3*n]=a(e[3*t][3*n],e[3*t+3][3*n]),e[3*t+2][3*n]=a(e[3*t+3][3*n],e[3*t][3*n]));break;case&quot;L&quot;:0===i?(e[3*t][3*n+3]=u[0],e[3*t][3*n+1]=a(e[3*t][3*n],e[3*t][3*n+3]),e[3*t][3*n+2]=a(e[3*t][3*n+3],e[3*t][3*n])):1===i?(e[3*t+3][3*n+3]=u[0],e[3*t+1][3*n+3]=a(e[3*t][3*n+3],e[3*t+3][3*n+3]),e[3*t+2][3*n+3]=a(e[3*t+3][3*n+3],e[3*t][3*n+3])):2===i?(0===n&amp;&amp;(e[3*t+3][3*n+0]=u[0]),e[3*t+3][3*n+1]=a(e[3*t+3][3*n],e[3*t+3][3*n+3]),e[3*t+3][3*n+2]=a(e[3*t+3][3*n+3],e[3*t+3][3*n])):(e[3*t+1][3*n]=a(e[3*t][3*n],e[3*t+3][3*n]),e[3*t+2][3*n]=a(e[3*t+3][3*n],e[3*t][3*n]));break;case&quot;c&quot;:0===i?(e[3*t][3*n+1]=u[0].add(e[3*t][3*n]),e[3*t][3*n+2]=u[1].add(e[3*t][3*n]),e[3*t][3*n+3]=u[2].add(e[3*t][3*n])):1===i?(e[3*t+1][3*n+3]=u[0].add(e[3*t][3*n+3]),e[3*t+2][3*n+3]=u[1].add(e[3*t][3*n+3]),e[3*t+3][3*n+3]=u[2].add(e[3*t][3*n+3])):2===i?(e[3*t+3][3*n+2]=u[0].add(e[3*t+3][3*n+3]),e[3*t+3][3*n+1]=u[1].add(e[3*t+3][3*n+3]),0===n&amp;&amp;(e[3*t+3][3*n+0]=u[2].add(e[3*t+3][3*n+3]))):(e[3*t+2][3*n]=u[0].add(e[3*t+3][3*n]),e[3*t+1][3*n]=u[1].add(e[3*t+3][3*n]));break;case&quot;C&quot;:0===i?(e[3*t][3*n+1]=u[0],e[3*t][3*n+2]=u[1],e[3*t][3*n+3]=u[2]):1===i?(e[3*t+1][3*n+3]=u[0],e[3*t+2][3*n+3]=u[1],e[3*t+3][3*n+3]=u[2]):2===i?(e[3*t+3][3*n+2]=u[0],e[3*t+3][3*n+1]=u[1],0===n&amp;&amp;(e[3*t+3][3*n+0]=u[2])):(e[3*t+2][3*n]=u[0],e[3*t+1][3*n]=u[1]);break;default:console.error(&quot;mesh.js: &quot;+c+&quot; invalid path type.&quot;)}if(0===t&amp;&amp;0===n||r&gt;0){let e=window.getComputedStyle(o[r]).stopColor.match(/^rgb\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)$/i),a=window.getComputedStyle(o[r]).stopOpacity,h=255;a&amp;&amp;(h=Math.floor(255*a)),e&amp;&amp;(0===i?(s[t][n]=[],s[t][n][0]=Math.floor(e[1]),s[t][n][1]=Math.floor(e[2]),s[t][n][2]=Math.floor(e[3]),s[t][n][3]=h):1===i?(s[t][n+1]=[],s[t][n+1][0]=Math.floor(e[1]),s[t][n+1][1]=Math.floor(e[2]),s[t][n+1][2]=Math.floor(e[3]),s[t][n+1][3]=h):2===i?(s[t+1][n+1]=[],s[t+1][n+1][0]=Math.floor(e[1]),s[t+1][n+1][1]=Math.floor(e[2]),s[t+1][n+1][2]=Math.floor(e[3]),s[t+1][n+1][3]=h):3===i&amp;&amp;(s[t+1][n]=[],s[t+1][n][0]=Math.floor(e[1]),s[t+1][n][1]=Math.floor(e[2]),s[t+1][n][2]=Math.floor(e[3]),s[t+1][n][3]=h))}}e[3*t+1][3*n+1]=new x,e[3*t+1][3*n+2]=new x,e[3*t+2][3*n+1]=new x,e[3*t+2][3*n+2]=new x,e[3*t+1][3*n+1].x=(-4*e[3*t][3*n].x+6*(e[3*t][3*n+1].x+e[3*t+1][3*n].x)+-2*(e[3*t][3*n+3].x+e[3*t+3][3*n].x)+3*(e[3*t+3][3*n+1].x+e[3*t+1][3*n+3].x)+-1*e[3*t+3][3*n+3].x)/9,e[3*t+1][3*n+2].x=(-4*e[3*t][3*n+3].x+6*(e[3*t][3*n+2].x+e[3*t+1][3*n+3].x)+-2*(e[3*t][3*n].x+e[3*t+3][3*n+3].x)+3*(e[3*t+3][3*n+2].x+e[3*t+1][3*n].x)+-1*e[3*t+3][3*n].x)/9,e[3*t+2][3*n+1].x=(-4*e[3*t+3][3*n].x+6*(e[3*t+3][3*n+1].x+e[3*t+2][3*n].x)+-2*(e[3*t+3][3*n+3].x+e[3*t][3*n].x)+3*(e[3*t][3*n+1].x+e[3*t+2][3*n+3].x)+-1*e[3*t][3*n+3].x)/9,e[3*t+2][3*n+2].x=(-4*e[3*t+3][3*n+3].x+6*(e[3*t+3][3*n+2].x+e[3*t+2][3*n+3].x)+-2*(e[3*t+3][3*n].x+e[3*t][3*n+3].x)+3*(e[3*t][3*n+2].x+e[3*t+2][3*n].x)+-1*e[3*t][3*n].x)/9,e[3*t+1][3*n+1].y=(-4*e[3*t][3*n].y+6*(e[3*t][3*n+1].y+e[3*t+1][3*n].y)+-2*(e[3*t][3*n+3].y+e[3*t+3][3*n].y)+3*(e[3*t+3][3*n+1].y+e[3*t+1][3*n+3].y)+-1*e[3*t+3][3*n+3].y)/9,e[3*t+1][3*n+2].y=(-4*e[3*t][3*n+3].y+6*(e[3*t][3*n+2].y+e[3*t+1][3*n+3].y)+-2*(e[3*t][3*n].y+e[3*t+3][3*n+3].y)+3*(e[3*t+3][3*n+2].y+e[3*t+1][3*n].y)+-1*e[3*t+3][3*n].y)/9,e[3*t+2][3*n+1].y=(-4*e[3*t+3][3*n].y+6*(e[3*t+3][3*n+1].y+e[3*t+2][3*n].y)+-2*(e[3*t+3][3*n+3].y+e[3*t][3*n].y)+3*(e[3*t][3*n+1].y+e[3*t+2][3*n+3].y)+-1*e[3*t][3*n+3].y)/9,e[3*t+2][3*n+2].y=(-4*e[3*t+3][3*n+3].y+6*(e[3*t+3][3*n+2].y+e[3*t+2][3*n+3].y)+-2*(e[3*t+3][3*n].y+e[3*t][3*n+3].y)+3*(e[3*t][3*n+2].y+e[3*t+2][3*n].y)+-1*e[3*t][3*n].y)/9}}this.nodes=e,this.colors=s}paintMesh(t,e){let s=(this.nodes.length-1)/3,r=(this.nodes[0].length-1)/3;if(&quot;bilinear&quot;===this.type||s&lt;2||r&lt;2){let n;for(let o=0;o&lt;s;++o)for(let s=0;s&lt;r;++s){let r=[];for(let t=3*o,e=3*o+4;t&lt;e;++t)r.push(this.nodes[t].slice(3*s,3*s+4));let i=[];i.push(this.colors[o].slice(s,s+2)),i.push(this.colors[o+1].slice(s,s+2)),(n=new m(r,i)).paint(t,e)}}else{let n,o,a,h,l,d,u;const x=s,g=r;s++,r++;let w=new Array(s);for(let t=0;t&lt;s;++t){w[t]=new Array(r);for(let e=0;e&lt;r;++e)w[t][e]=[],w[t][e][0]=this.nodes[3*t][3*e],w[t][e][1]=this.colors[t][e]}for(let t=0;t&lt;s;++t)for(let e=0;e&lt;r;++e)0!==t&amp;&amp;t!==x&amp;&amp;(n=i(w[t-1][e][0],w[t][e][0]),o=i(w[t+1][e][0],w[t][e][0]),w[t][e][2]=c(w[t-1][e][1],w[t][e][1],w[t+1][e][1],n,o)),0!==e&amp;&amp;e!==g&amp;&amp;(n=i(w[t][e-1][0],w[t][e][0]),o=i(w[t][e+1][0],w[t][e][0]),w[t][e][3]=c(w[t][e-1][1],w[t][e][1],w[t][e+1][1],n,o));for(let t=0;t&lt;r;++t){w[0][t][2]=[],w[x][t][2]=[];for(let e=0;e&lt;4;++e)n=i(w[1][t][0],w[0][t][0]),o=i(w[x][t][0],w[x-1][t][0]),w[0][t][2][e]=n&gt;0?2*(w[1][t][1][e]-w[0][t][1][e])/n-w[1][t][2][e]:0,w[x][t][2][e]=o&gt;0?2*(w[x][t][1][e]-w[x-1][t][1][e])/o-w[x-1][t][2][e]:0}for(let t=0;t&lt;s;++t){w[t][0][3]=[],w[t][g][3]=[];for(let e=0;e&lt;4;++e)n=i(w[t][1][0],w[t][0][0]),o=i(w[t][g][0],w[t][g-1][0]),w[t][0][3][e]=n&gt;0?2*(w[t][1][1][e]-w[t][0][1][e])/n-w[t][1][3][e]:0,w[t][g][3][e]=o&gt;0?2*(w[t][g][1][e]-w[t][g-1][1][e])/o-w[t][g-1][3][e]:0}for(let s=0;s&lt;x;++s)for(let r=0;r&lt;g;++r){let n=i(w[s][r][0],w[s+1][r][0]),o=i(w[s][r+1][0],w[s+1][r+1][0]),c=i(w[s][r][0],w[s][r+1][0]),x=i(w[s+1][r][0],w[s+1][r+1][0]),g=[[],[],[],[]];for(let t=0;t&lt;4;++t){(d=[])[0]=w[s][r][1][t],d[1]=w[s+1][r][1][t],d[2]=w[s][r+1][1][t],d[3]=w[s+1][r+1][1][t],d[4]=w[s][r][2][t]*n,d[5]=w[s+1][r][2][t]*n,d[6]=w[s][r+1][2][t]*o,d[7]=w[s+1][r+1][2][t]*o,d[8]=w[s][r][3][t]*c,d[9]=w[s+1][r][3][t]*x,d[10]=w[s][r+1][3][t]*c,d[11]=w[s+1][r+1][3][t]*x,d[12]=0,d[13]=0,d[14]=0,d[15]=0,u=f(d);for(let e=0;e&lt;9;++e){g[t][e]=[];for(let s=0;s&lt;9;++s)g[t][e][s]=p(u,e/8,s/8),g[t][e][s]&gt;255?g[t][e][s]=255:g[t][e][s]&lt;0&amp;&amp;(g[t][e][s]=0)}}h=[];for(let t=3*s,e=3*s+4;t&lt;e;++t)h.push(this.nodes[t].slice(3*r,3*r+4));l=y(h);for(let s=0;s&lt;8;++s)for(let r=0;r&lt;8;++r)(a=new m(l[s][r],[[[g[0][s][r],g[1][s][r],g[2][s][r],g[3][s][r]],[g[0][s][r+1],g[1][s][r+1],g[2][s][r+1],g[3][s][r+1]]],[[g[0][s+1][r],g[1][s+1][r],g[2][s+1][r],g[3][s+1][r]],[g[0][s+1][r+1],g[1][s+1][r+1],g[2][s+1][r+1],g[3][s+1][r+1]]]])).paint(t,e)}}}transform(t){if(t instanceof x)for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].add(t);else if(t instanceof g)for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].transform(t)}scale(t){for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].scale(t)}}document.querySelectorAll(&quot;rect,circle,ellipse,path,text&quot;).forEach((r,n)=&gt;{let o=r.getAttribute(&quot;id&quot;);o||(o=&quot;patchjs_shape&quot;+n,r.setAttribute(&quot;id&quot;,o));const i=r.style.fill.match(/^url\(\s*&quot;?\s*#([^\s&quot;]+)&quot;?\s*\)/),a=r.style.stroke.match(/^url\(\s*&quot;?\s*#([^\s&quot;]+)&quot;?\s*\)/);if(i&amp;&amp;i[1]){const a=document.getElementById(i[1]);if(a&amp;&amp;&quot;meshgradient&quot;===a.nodeName){const i=r.getBBox();let l=document.createElementNS(s,&quot;canvas&quot;);d(l,{width:i.width,height:i.height});const c=l.getContext(&quot;2d&quot;);let u=c.createImageData(i.width,i.height);const f=new b(a);&quot;objectBoundingBox&quot;===a.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;f.scale(new x(i.width,i.height));const p=a.getAttribute(&quot;gradientTransform&quot;);null!=p&amp;&amp;f.transform(h(p)),&quot;userSpaceOnUse&quot;===a.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;f.transform(new x(-i.x,-i.y)),f.paintMesh(u.data,l.width),c.putImageData(u,0,0);const y=document.createElementNS(t,&quot;image&quot;);d(y,{width:i.width,height:i.height,x:i.x,y:i.y});let g=l.toDataURL();y.setAttributeNS(e,&quot;xlink:href&quot;,g),r.parentNode.insertBefore(y,r),r.style.fill=&quot;none&quot;;const w=document.createElementNS(t,&quot;use&quot;);w.setAttributeNS(e,&quot;xlink:href&quot;,&quot;#&quot;+o);const m=&quot;patchjs_clip&quot;+n,M=document.createElementNS(t,&quot;clipPath&quot;);M.setAttribute(&quot;id&quot;,m),M.appendChild(w),r.parentElement.insertBefore(M,r),y.setAttribute(&quot;clip-path&quot;,&quot;url(#&quot;+m+&quot;)&quot;),u=null,l=null,g=null}}if(a&amp;&amp;a[1]){const o=document.getElementById(a[1]);if(o&amp;&amp;&quot;meshgradient&quot;===o.nodeName){const i=parseFloat(r.style.strokeWidth.slice(0,-2))*(parseFloat(r.style.strokeMiterlimit)||parseFloat(r.getAttribute(&quot;stroke-miterlimit&quot;))||1),a=r.getBBox(),l=Math.trunc(a.width+i),c=Math.trunc(a.height+i),u=Math.trunc(a.x-i/2),f=Math.trunc(a.y-i/2);let p=document.createElementNS(s,&quot;canvas&quot;);d(p,{width:l,height:c});const y=p.getContext(&quot;2d&quot;);let g=y.createImageData(l,c);const w=new b(o);&quot;objectBoundingBox&quot;===o.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;w.scale(new x(l,c));const m=o.getAttribute(&quot;gradientTransform&quot;);null!=m&amp;&amp;w.transform(h(m)),&quot;userSpaceOnUse&quot;===o.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;w.transform(new x(-u,-f)),w.paintMesh(g.data,p.width),y.putImageData(g,0,0);const M=document.createElementNS(t,&quot;image&quot;);d(M,{width:l,height:c,x:0,y:0});let S=p.toDataURL();M.setAttributeNS(e,&quot;xlink:href&quot;,S);const k=&quot;pattern_clip&quot;+n,A=document.createElementNS(t,&quot;pattern&quot;);d(A,{id:k,patternUnits:&quot;userSpaceOnUse&quot;,width:l,height:c,x:u,y:f}),A.appendChild(M),o.parentNode.appendChild(A),r.style.stroke=&quot;url(#&quot;+k+&quot;)&quot;,g=null,p=null,S=null}}})}();
</script><path
     style="font-style:italic;font-weight:bold;font-size:96px;line-height:1;font-family:Calibri;-inkscape-font-specification:'Calibri Bold Italic';font-variant-ligatures:none;text-align:center;letter-spacing:1px;word-spacing:1px;text-orientation:upright;text-anchor:middle;fill:url(#radialGradient2);stroke:#e1ae53;stroke-width:4.19878;stroke-linejoin:bevel;stroke-opacity:0.836773;paint-order:stroke fill markers"
     d="m 985.4239,183.44418 q -0.40647,0.332 -1.25166,0.8528 -0.80371,0.5717 -1.84287,1.1662 -1.03914,0.5945 -2.21212,1.1289 -1.08061,0.5437 -2.18413,0.852 -1.01115,0.3176 -1.85125,0.3261 -0.84023,0.01 -1.21362,-0.4488 -0.58107,-0.7115 -0.8427,-2.2765 -0.21085,-1.6066 -0.786,-3.7628 -0.48265,-2.1469 -1.57435,-4.7283 -1.0408,-2.6228 -3.19869,-5.2651 -2.24095,-2.744 -4.58006,-4.0524 -2.2976,-1.2577 -4.56398,-1.4398 -2.21544,-0.2235 -4.28865,0.4532 -1.98096,0.6859 -3.55616,1.9724 -1.82928,1.4939 -2.50508,3.5706 -0.625,2.0351 -0.59962,4.5554 0.0762,2.4789 0.53522,5.3228 0.50048,2.8946 0.89939,5.8723 0.44048,3.0286 0.54371,6.1629 0.19573,3.1438 -0.49023,6.2451 -0.63516,3.0599 -2.3781,6.0079 -1.69373,2.9056 -4.89346,5.5209 -4.77651,3.9008 -10.46931,5.3313 -5.642,1.3889 -11.59573,0.3218 -5.86136,-1.0577 -11.69743,-4.6774 -5.79449,-3.5688 -10.77428,-9.6665 -2.69737,-3.3029 -4.4208,-6.5541 -1.77423,-3.2097 -2.79648,-6.0172 -0.98066,-2.7567 -1.37106,-4.8942 -0.3396,-2.1791 -0.1584,-3.513 0.18121,-1.3339 1.70561,-2.5788 0.40659,-0.3319 1.30257,-0.8943 0.89597,-0.5624 1.93512,-1.1569 1.13152,-0.5852 2.30438,-1.1196 1.22378,-0.5759 2.32731,-0.8842 1.10351,-0.3082 1.94362,-0.3167 0.88169,0.042 1.29666,0.5505 0.70544,0.8638 0.84683,2.6965 0.23377,1.842 0.72079,4.409 0.53781,2.5254 1.7167,5.6285 1.17888,3.103 3.95917,6.5075 2.44849,2.9981 5.03661,4.6114 2.62957,1.6641 5.19571,2.1096 2.56603,0.4454 4.91625,-0.2033 2.44247,-0.6394 4.52584,-2.3408 1.88008,-1.5355 2.55587,-3.6121 0.6758,-2.0766 0.59962,-4.5554 0.0161,-2.4696 -0.49375,-5.272 -0.46835,-2.7516 -0.86725,-5.7293 -0.39891,-2.9777 -0.55305,-6.0705 -0.11257,-3.042 0.5226,-6.1019 0.72742,-3.0506 2.47035,-5.9986 1.74259,-2.9483 5.04584,-5.6454 4.57322,-3.7349 9.929,-5.0594 5.35579,-1.3246 10.75564,-0.3134 5.45063,0.9697 10.66832,4.2471 5.2686,3.236 9.7089,8.6731 2.07499,2.5407 3.53582,5.1593 1.51176,2.5772 2.43739,4.9552 0.97652,2.3367 1.34401,4.2387 0.36761,1.9022 0.2744,2.8253 -0.0423,0.8816 -0.4353,1.5414 -0.30061,0.669 -1.11368,1.333 z m 37.5521,50.4831 q -2.416,2.7679 -5.6901,5.222 -3.2247,2.4974 -7.1541,4.2055 -3.8861,1.6588 -8.3968,2.337 -4.41799,0.672 -9.39958,-0.1057 -4.88893,-0.784 -10.12555,-3.2648 -5.19352,-2.5302 -10.87755,-7.4915 l -6.67256,-5.8241 -21.9629,16.8818 q -0.53018,0.408 -1.27077,0.4583 -0.7406,0.05 -1.79653,-0.436 -1.05598,-0.4862 -2.42727,-1.509 -1.4145,-0.9735 -3.29279,-2.6129 -1.82874,-1.5961 -2.93499,-2.823 -1.09993,-1.1342 -1.57625,-1.9854 -0.4762,-0.851 -0.42132,-1.4127 0.098,-0.6111 0.72118,-1.0252 l 61.77598,-47.5298 q 2.47248,-1.9348 4.94762,-1.7773 2.51811,0.108 4.69278,2.0062 l 13.9878,12.209 q 2.5702,2.2434 4.424,4.2099 1.897,1.917 3.5291,4.0381 2.4973,3.2248 3.7911,6.5312 1.3435,3.3496 1.3845,6.6946 0.084,3.2956 -1.2262,6.5929 -1.2674,3.2478 -4.0285,6.4111 z m -14.9854,-10.4674 q 2.0708,-2.3724 2.444,-5.0946 0.3731,-2.7222 -1.3954,-5.485 -0.7359,-1.2519 -1.9347,-2.4724 -1.1557,-1.27 -2.7374,-2.6505 l -5.73342,-5.0044 -23.18968,17.988 5.93119,5.177 q 2.81724,2.459 5.35513,3.5421 2.63053,1.0769 5.06245,1.2838 2.48123,0.2499 4.81352,-0.3269 2.3816,-0.5337 4.44771,-1.6039 2.1157,-1.0271 3.8359,-2.3993 1.7633,-1.4217 3.1007,-2.9539 z m 33.6278,85.677 q -0.9084,2.2047 -1.6602,3.3612 -0.701,1.1861 -1.8522,1.3492 -1.0674,0.1362 -2.8896,-0.7767 -1.8553,-0.8561 -4.9141,-2.6434 -2.1526,-1.2574 -3.4458,-2.1654 -1.3262,-0.8511 -1.9302,-1.5079 -0.604,-0.6569 -0.6225,-1.2755 -0.018,-0.6187 0.3883,-1.4448 l 6.6232,-15.886 -27.5293,-16.0861 -15.99741,9.9525 q -0.85996,0.5613 -1.70074,0.8298 -0.80773,0.2119 -1.93608,-0.068 -1.12847,-0.2794 -2.83742,-1.1261 -1.65216,-0.8134 -4.08789,-2.2366 -2.60577,-1.5226 -3.92253,-2.52 -1.37347,-1.0305 -1.46253,-1.9184 -0.11258,-0.9776 0.97859,-1.9357 1.03496,-0.9909 3.26971,-2.3446 l 73.5703,-44.2419 q 1.1291,-0.632 2.0266,-0.8674 0.9306,-0.2921 2.1156,0.02 1.2749,0.289 3.064,1.2585 1.8788,0.9458 4.7676,2.6338 3.3421,1.9529 5.2018,3.1915 1.9495,1.215 2.8272,2.1839 0.9107,0.912 0.8865,1.7337 -0.024,0.8217 -0.5398,1.9642 z m 9.1495,-66.7636 -0.057,-0.033 -34.5747,21.589 20.6185,12.048 z m 89.8303,27.8852 q -0.6187,1.7297 -2.2749,4.412 -1.5948,2.7043 -3.1619,4.1645 -1.4836,1.4202 -2.5955,1.0225 -0.8029,-0.2872 -1.5614,-1.6734 -0.7363,-1.4478 -2.1078,-3.2623 -1.3716,-1.8145 -3.7978,-3.7972 -2.4042,-2.0445 -6.5429,-3.525 -4.5713,-1.6351 -9.0023,-1.1299 -4.409,0.4436 -8.4568,2.4098 -4.0257,1.9045 -7.6416,5.0007 -3.6159,3.0962 -6.6011,6.7664 -2.9234,3.6923 -5.1672,7.6277 -2.1602,3.8956 -3.4414,7.4786 -1.5469,4.3241 -1.6678,7.9737 -0.059,3.6717 1.2059,6.563 1.2651,2.8912 3.8324,5.0637 2.5895,2.1108 6.2959,3.4366 4.3859,1.5689 7.806,1.7471 3.4817,0.2003 6.0416,-0.1382 2.6216,-0.3164 4.3738,-0.7348 1.8139,-0.3963 2.9877,0.024 0.803,0.2873 0.8291,0.9933 0.1101,0.6665 -0.2656,1.7167 -0.154,0.4327 -0.5876,1.253 -0.4333,0.8204 -1.0162,1.8661 -0.5663,0.9808 -1.2675,2.1953 -0.688,1.1477 -1.3956,2.1486 -0.6847,0.9395 -1.4483,1.7116 -0.68,0.7322 -1.6026,1.1686 -0.9225,0.4364 -3.297,0.8413 -2.3524,0.343 -5.5254,0.2531 -3.1729,-0.09 -6.9768,-0.7537 -3.8258,-0.602 -7.9028,-2.0604 -6.7333,-2.4086 -11.5285,-6.1445 -4.7335,-3.7138 -7.1979,-8.7063 -2.4645,-4.9925 -2.5364,-11.2195 -0.072,-6.227 2.5576,-13.5779 2.055,-5.7449 5.4384,-11.5023 3.4049,-5.8195 7.874,-10.9098 4.5304,-5.0684 10.0753,-9.0772 5.5449,-4.0088 11.901,-6.1944 6.4399,-2.2255 13.5804,-2.319 7.2022,-0.071 14.9238,2.6906 4.3241,1.5468 7.8226,3.8434 3.5823,2.2569 5.8936,4.7559 2.373,2.5211 3.0429,4.1543 0.754,1.5935 0.091,3.4467 z m 59.8059,7.9181 q -0.1057,0.3791 -0.4952,1.2923 -0.3264,0.9307 -0.8497,2.0791 -0.5054,1.0853 -1.1731,2.2615 -0.6641,1.1782 -1.4712,2.1107 -0.7235,0.8885 -1.6118,1.3908 -0.8254,0.5197 -1.5839,0.3091 l -29.2047,-8.1107 -9.5932,18.8519 24.7797,6.8818 q 0.8849,0.2457 1.0887,0.9832 0.2037,0.7375 -0.1123,1.8753 -0.1229,0.4425 -0.5126,1.3556 -0.309,0.8675 -0.8322,2.0159 -0.5054,1.0853 -1.1559,2.1981 -0.6445,1.1162 -1.4362,1.9842 -0.7234,0.8885 -1.531,1.3452 -0.8078,0.4565 -1.5663,0.2458 l -24.7165,-6.8642 -11.0856,21.7738 29.5839,8.216 q 0.7585,0.2107 0.9448,1.0114 0.2037,0.7374 -0.1474,2.0017 -0.123,0.4425 -0.4496,1.3731 -0.3264,0.9307 -0.9128,2.0615 -0.5054,1.0854 -1.1559,2.1981 -0.6445,1.1163 -1.4538,2.0475 -0.7233,0.8885 -1.531,1.3451 -0.8078,0.4566 -1.6295,0.2284 l -41.0888,-11.4112 q -1.0114,-0.2808 -1.7629,-0.7619 -0.734,-0.5443 -1.1274,-1.3345 -0.3126,-0.8358 -0.239,-1.8367 0.091,-1.064 0.7304,-2.3845 l 34.089,-67.3372 q 1.3414,-2.6234 3.3817,-3.3505 2.0578,-0.7903 4.1439,-0.2109 l 40.7095,11.3058 q 1.6434,0.4564 0.9764,2.8585 z m 76.1148,29.3568 q -0.1654,0.4285 -0.6671,1.3597 -0.4159,0.8944 -1.1117,1.9615 -0.631,1.0929 -1.4978,2.2343 -0.7788,1.1056 -1.6714,1.956 -0.8308,0.8744 -1.7643,1.287 -0.8723,0.4362 -1.6065,0.1521 l -19.8849,-7.6953 -37.4222,58.8902 q -0.4207,0.5406 -1.0992,0.8408 -0.6789,0.3001 -1.8375,0.2034 -1.0973,-0.073 -2.7592,-0.5049 -1.6005,-0.4084 -3.9868,-1.3319 -2.3248,-0.8996 -3.7835,-1.6752 -1.4586,-0.7755 -2.1968,-1.4129 -0.6769,-0.6137 -0.7935,-1.2216 -0.055,-0.5842 0.3039,-1.1487 l 37.4222,-58.8901 -19.7013,-7.6243 q -0.9178,-0.3552 -1.0244,-1.1702 -0.045,-0.7914 0.4043,-1.954 0.1892,-0.4896 0.6058,-1.3835 0.501,-0.9318 1.1346,-2.0231 0.7178,-1.1293 1.4978,-2.2343 0.8644,-1.1428 1.7563,-1.9935 0.8921,-0.8507 1.7407,-1.2257 0.8723,-0.4363 1.6065,-0.1522 l 55.8,21.5942 q 0.7342,0.284 0.8409,1.0992 0.1678,0.8387 -0.3058,2.0624 z m -17.427,81.6109 q -0.4078,0.5304 -1.111,0.7686 -0.7029,0.2384 -1.8482,0.039 -1.0865,-0.1703 -2.6742,-0.8075 -1.6167,-0.5783 -3.8524,-1.6816 -2.2944,-1.1322 -3.6782,-2.0346 -1.3539,-0.8144 -2.0324,-1.515 -0.6784,-0.7006 -0.7404,-1.3165 -0.062,-0.6158 0.405,-1.117 l 49.9495,-64.8981 q 0.3486,-0.5597 1.0521,-0.7977 0.7617,-0.2094 1.8483,-0.039 1.1452,0.1994 2.6742,0.8075 1.6167,0.5784 3.8522,1.6816 2.2357,1.1032 3.5607,1.9765 1.4127,0.8435 2.0911,1.544 0.7374,0.7297 0.7404,1.3164 0.062,0.6159 -0.346,1.1462 z m 100.6816,63.5105 q -0.5374,0.4245 -1.1609,0.6286 -0.6235,0.2042 -1.6177,-0.092 -0.9406,-0.2582 -2.3593,-1.0915 -1.4564,-0.7796 -3.4449,-2.1719 -2.0957,-1.4676 -3.2727,-2.532 -1.2144,-1.0106 -1.7248,-1.7685 -0.5107,-0.758 -0.4246,-1.3385 0.14,-0.5427 0.624,-1.0048 l 50.9116,-48.6856 -0.1072,-0.075 -71.1339,34.4448 q -1.5856,0.892 -3.8053,0.059 -2.1281,-0.8495 -5.5138,-3.2204 -3.4931,-2.446 -4.6376,-4.1285 -1.0532,-1.6986 -0.4672,-2.6498 l 31.5329,-62.4159 -0.1071,-0.075 -51.0028,48.7019 q -0.4839,0.4621 -1.1612,0.6286 -0.6235,0.2041 -1.6177,-0.092 -0.9405,-0.2582 -2.3592,-1.0915 -1.4028,-0.7419 -3.445,-2.172 -2.042,-1.4299 -3.2189,-2.4943 -1.2144,-1.0107 -1.7249,-1.7686 -0.5105,-0.7579 -0.4244,-1.3383 0.086,-0.5804 0.624,-1.0048 l 55.7496,-53.3071 q 1.2095,-1.1553 2.4996,-1.8538 1.3437,-0.6608 2.639,-0.7949 1.3867,-0.1503 2.725,0.2262 1.3382,0.3764 2.5741,1.2419 l 8.8136,6.1717 q 2.3645,1.6557 3.7293,3.2522 1.4025,1.5428 1.7999,3.2627 0.3975,1.72 -0.1565,3.6548 -0.5001,1.9724 -1.828,4.3262 l -22.2589,46.0839 0.2688,0.1881 52.8369,-24.6715 q 2.5425,-1.3432 4.671,-2.0953 2.1661,-0.8058 4.1332,-0.87 2.0585,-0.08 3.9718,0.6188 1.951,0.6453 4.1542,2.1882 l 9.9957,6.9995 q 1.3434,0.9408 2.0473,1.9943 0.7039,1.0536 0.7146,2.1823 0.1017,1.1125 -0.5433,2.2626 -0.5542,1.1338 -1.7094,2.3269 z m 118.1602,7.3482 q -0.2867,0.2697 -1.0938,0.8479 -0.7621,0.6261 -1.8054,1.3362 -0.9953,0.6653 -2.176,1.3248 -1.1809,0.6595 -2.3531,1.0408 -1.0794,0.3841 -2.0995,0.3525 -0.9751,0.016 -1.5142,-0.5576 l -20.7564,-22.0878 -17.9829,11.1371 17.6114,18.7412 q 0.629,0.6694 0.4204,1.4054 -0.2085,0.7362 -1.0691,1.5449 -0.335,0.3143 -1.1417,0.8927 -0.7142,0.5812 -1.7574,1.2914 -0.9953,0.6652 -2.1283,1.2798 -1.133,0.6146 -2.2574,0.9509 -1.0795,0.3842 -2.0068,0.3554 -0.9273,-0.029 -1.4665,-0.6026 l -17.5665,-18.6933 -20.7748,12.8605 21.0258,22.3746 q 0.5392,0.5738 0.2829,1.3549 -0.2086,0.736 -1.1648,1.6346 -0.335,0.3143 -1.0967,0.9406 -0.7621,0.6261 -1.8502,1.2885 -0.9954,0.6651 -2.1284,1.2797 -1.133,0.6146 -2.3052,0.9959 -1.0794,0.3842 -2.0067,0.3554 -0.9273,-0.029 -1.5114,-0.6504 l -29.2026,-31.0759 q -0.7189,-0.7649 -1.1116,-1.5661 -0.345,-0.8462 -0.2712,-1.7257 0.1664,-0.8767 0.7488,-1.694 0.6303,-0.8622 1.8616,-1.6595 l 64.0821,-39.8728 q 2.508,-1.5465 4.6294,-1.1093 2.1693,0.3923 3.6518,1.9701 l 28.933,30.789 q 1.1682,1.2431 -0.6486,2.9502 z"
     id="text1"
     aria-label="SPACETIME" /><path
     d="m 703.32319,530.05165 q 0,0.53125 -0.031,0.9375 -0.031,0.375 -0.125,0.65625 -0.062,0.25 -0.1875,0.46875 -0.094,0.1875 -0.5,0.59375 -0.375,0.375 -1.3125,0.96875 -0.9375,0.5625 -2.125,1.03125 -1.1563,0.4375 -2.5313,0.71875 -1.375,0.28125 -2.8437,0.28125 -3.0313,0 -5.375,-1 -2.3438,-1 -3.9375,-2.90625 -1.5625,-1.9375 -2.4063,-4.71875 -0.8125,-2.8125 -0.8125,-6.46875 0,-4.15625 1,-7.125 1.0313,-3 2.7813,-4.90625 1.7812,-1.90625 4.1562,-2.8125 2.4063,-0.9375 5.1875,-0.9375 1.3438,0 2.5938,0.25 1.2812,0.25 2.3437,0.65625 1.0625,0.40625 1.875,0.9375 0.8438,0.53125 1.2188,0.90625 0.375,0.375 0.5,0.59375 0.1562,0.21875 0.25,0.53125 0.094,0.28125 0.125,0.65625 0.031,0.375 0.031,0.9375 0,1.21875 -0.2813,1.71875 -0.2812,0.46875 -0.6875,0.46875 -0.4687,0 -1.0937,-0.5 -0.5938,-0.53125 -1.5313,-1.15625 -0.9375,-0.625 -2.2812,-1.125 -1.3125,-0.53125 -3.125,-0.53125 -3.7188,0 -5.7188,2.875 -1.9687,2.84375 -1.9687,8.28125 0,2.71875 0.5,4.78125 0.5312,2.03125 1.5312,3.40625 1,1.375 2.4375,2.0625 1.4688,0.65625 3.3438,0.65625 1.7812,0 3.125,-0.5625 1.3437,-0.5625 2.3125,-1.21875 1,-0.6875 1.6562,-1.21875 0.6875,-0.5625 1.0625,-0.5625 0.2188,0 0.375,0.125 0.1563,0.125 0.25,0.4375 0.125,0.28125 0.1563,0.75 0.062,0.4375 0.062,1.0625 z m 33.4687,-10.09375 q 0,3.4375 -0.9062,6.34375 -0.9063,2.875 -2.7188,4.96875 -1.7812,2.09375 -4.5,3.28125 -2.6875,1.15625 -6.25,1.15625 -3.4687,0 -6.0625,-1.03125 -2.5625,-1.03125 -4.2812,-3 -1.7188,-1.96875 -2.5625,-4.78125 -0.8438,-2.8125 -0.8438,-6.375 0,-3.4375 0.875,-6.3125 0.9063,-2.90625 2.6875,-5 1.8125,-2.09375 4.5,-3.25 2.6875,-1.15625 6.2813,-1.15625 3.4687,0 6.0312,1.03125 2.5938,1.03125 4.3125,3 1.7188,1.96875 2.5625,4.78125 0.875,2.8125 0.875,6.34375 z m -5.4375,0.34375 q 0,-2.28125 -0.4375,-4.3125 -0.4062,-2.03125 -1.375,-3.5625 -0.9687,-1.53125 -2.625,-2.40625 -1.6562,-0.90625 -4.125,-0.90625 -2.2812,0 -3.9375,0.8125 -1.625,0.8125 -2.6875,2.3125 -1.0625,1.46875 -1.5937,3.5 -0.5,2.03125 -0.5,4.4375 0,2.3125 0.4062,4.34375 0.4375,2.03125 1.4063,3.5625 1,1.5 2.6562,2.40625 1.6563,0.875 4.125,0.875 2.25,0 3.9063,-0.8125 1.6562,-0.8125 2.7187,-2.28125 1.0625,-1.46875 1.5625,-3.5 0.5,-2.03125 0.5,-4.46875 z m 38.25,14.03125 q 0,0.25 -0.125,0.4375 -0.125,0.15625 -0.4062,0.28125 -0.2813,0.125 -0.7813,0.1875 -0.5,0.0625 -1.25,0.0625 -0.7812,0 -1.2812,-0.0625 -0.5,-0.0625 -0.7813,-0.1875 -0.2812,-0.125 -0.4062,-0.28125 -0.125,-0.1875 -0.125,-0.4375 v -16.46875 q 0,-2.40625 -0.375,-3.875 -0.375,-1.46875 -1.0938,-2.53125 -0.7187,-1.0625 -1.875,-1.625 -1.125,-0.5625 -2.625,-0.5625 -1.9375,0 -3.875,1.375 -1.9375,1.375 -4.0625,4.03125 v 19.65625 q 0,0.25 -0.125,0.4375 -0.125,0.15625 -0.4062,0.28125 -0.2813,0.125 -0.7813,0.1875 -0.5,0.0625 -1.2812,0.0625 -0.75,0 -1.25,-0.0625 -0.5,-0.0625 -0.8125,-0.1875 -0.2813,-0.125 -0.4063,-0.28125 -0.094,-0.1875 -0.094,-0.4375 v -28.125 q 0,-0.25 0.094,-0.40625 0.094,-0.1875 0.375,-0.3125 0.2813,-0.15625 0.7188,-0.1875 0.4375,-0.0625 1.1562,-0.0625 0.6875,0 1.125,0.0625 0.4688,0.0312 0.7188,0.1875 0.25,0.125 0.3437,0.3125 0.125,0.15625 0.125,0.40625 v 3.71875 q 2.375,-2.65625 4.7188,-3.875 2.375,-1.25 4.7812,-1.25 2.8125,0 4.7188,0.96875 1.9375,0.9375 3.125,2.53125 1.1875,1.59375 1.6875,3.75 0.5312,2.125 0.5312,5.125 z m 30.625,-4.28125 q 0,0.53125 -0.031,0.9375 -0.031,0.375 -0.125,0.65625 -0.062,0.25 -0.1875,0.46875 -0.094,0.1875 -0.5,0.59375 -0.375,0.375 -1.3125,0.96875 -0.9375,0.5625 -2.125,1.03125 -1.1562,0.4375 -2.5312,0.71875 -1.375,0.28125 -2.8438,0.28125 -3.0312,0 -5.375,-1 -2.3437,-1 -3.9375,-2.90625 -1.5625,-1.9375 -2.4062,-4.71875 -0.8125,-2.8125 -0.8125,-6.46875 0,-4.15625 1,-7.125 1.0312,-3 2.7812,-4.90625 1.7813,-1.90625 4.1563,-2.8125 2.4062,-0.9375 5.1875,-0.9375 1.3437,0 2.5937,0.25 1.2813,0.25 2.3438,0.65625 1.0625,0.40625 1.875,0.9375 0.8437,0.53125 1.2187,0.90625 0.375,0.375 0.5,0.59375 0.1563,0.21875 0.25,0.53125 0.094,0.28125 0.125,0.65625 0.031,0.375 0.031,0.9375 0,1.21875 -0.2812,1.71875 -0.2813,0.46875 -0.6875,0.46875 -0.4688,0 -1.0938,-0.5 -0.5937,-0.53125 -1.5312,-1.15625 -0.9375,-0.625 -2.2813,-1.125 -1.3125,-0.53125 -3.125,-0.53125 -3.7187,0 -5.7187,2.875 -1.9688,2.84375 -1.9688,8.28125 0,2.71875 0.5,4.78125 0.5313,2.03125 1.5313,3.40625 1,1.375 2.4375,2.0625 1.4687,0.65625 3.3437,0.65625 1.7813,0 3.125,-0.5625 1.3438,-0.5625 2.3125,-1.21875 1,-0.6875 1.6563,-1.21875 0.6875,-0.5625 1.0625,-0.5625 0.2187,0 0.375,0.125 0.1562,0.125 0.25,0.4375 0.125,0.28125 0.1562,0.75 0.062,0.4375 0.062,1.0625 z m 31.8438,-11 q 0,1.21875 -0.625,1.75 -0.5938,0.5 -1.375,0.5 h -18.4375 q 0,2.34375 0.4687,4.21875 0.4688,1.875 1.5625,3.21875 1.0938,1.34375 2.8438,2.0625 1.75,0.71875 4.2812,0.71875 2,0 3.5625,-0.3125 1.5625,-0.34375 2.6875,-0.75 1.1563,-0.40625 1.875,-0.71875 0.75,-0.34375 1.125,-0.34375 0.2188,0 0.375,0.125 0.1875,0.0937 0.2813,0.3125 0.094,0.21875 0.125,0.625 0.062,0.375 0.062,0.9375 0,0.40625 -0.031,0.71875 -0.031,0.28125 -0.094,0.53125 -0.031,0.21875 -0.1563,0.40625 -0.094,0.1875 -0.2812,0.375 -0.1563,0.15625 -1,0.5625 -0.8438,0.375 -2.1875,0.75 -1.3438,0.375 -3.125,0.65625 -1.75,0.3125 -3.75,0.3125 -3.4688,0 -6.0938,-0.96875 -2.5937,-0.96875 -4.375,-2.875 -1.7812,-1.90625 -2.6875,-4.78125 -0.9062,-2.875 -0.9062,-6.6875 0,-3.625 0.9375,-6.5 0.9375,-2.90625 2.6875,-4.90625 1.7812,-2.03125 4.2812,-3.09375 2.5,-1.09375 5.5938,-1.09375 3.3125,0 5.625,1.0625 2.3437,1.0625 3.8437,2.875 1.5,1.78125 2.1875,4.21875 0.7188,2.40625 0.7188,5.15625 z m -5.1875,-1.53125 q 0.094,-4.0625 -1.8125,-6.375 -1.875,-2.3125 -5.5938,-2.3125 -1.9062,0 -3.3437,0.71875 -1.4375,0.71875 -2.4063,1.90625 -0.9687,1.1875 -1.5,2.78125 -0.5312,1.5625 -0.5937,3.28125 z m 39.9062,2.3125 q 0,3.6875 -0.8125,6.625 -0.7812,2.9375 -2.3437,5 -1.5313,2.03125 -3.8125,3.15625 -2.2813,1.09375 -5.2188,1.09375 -1.25,0 -2.3125,-0.25 -1.0625,-0.25 -2.0937,-0.78125 -1,-0.53125 -2,-1.34375 -1,-0.8125 -2.125,-1.90625 v 14.0625 q 0,0.25 -0.125,0.4375 -0.125,0.1875 -0.4063,0.3125 -0.2812,0.125 -0.7812,0.1875 -0.5,0.0625 -1.2813,0.0625 -0.75,0 -1.25,-0.0625 -0.5,-0.0625 -0.8125,-0.1875 -0.2812,-0.125 -0.4062,-0.3125 -0.094,-0.1875 -0.094,-0.4375 V 506.2079 q 0,-0.28125 0.094,-0.4375 0.094,-0.1875 0.375,-0.3125 0.2812,-0.125 0.7187,-0.15625 0.4375,-0.0625 1.0625,-0.0625 0.6563,0 1.0625,0.0625 0.4375,0.0312 0.7188,0.15625 0.2812,0.125 0.375,0.3125 0.125,0.15625 0.125,0.4375 v 3.78125 q 1.2812,-1.3125 2.4687,-2.28125 1.1875,-0.96875 2.375,-1.59375 1.2188,-0.65625 2.4688,-0.96875 1.2812,-0.34375 2.6875,-0.34375 3.0625,0 5.2187,1.1875 2.1563,1.1875 3.5,3.25 1.375,2.0625 2,4.8125 0.625,2.71875 0.625,5.78125 z m -5.4375,0.59375 q 0,-2.15625 -0.3437,-4.15625 -0.3125,-2.03125 -1.125,-3.59375 -0.7813,-1.5625 -2.125,-2.5 -1.3438,-0.9375 -3.3438,-0.9375 -1,0 -1.9687,0.3125 -0.9688,0.28125 -1.9688,0.9375 -1,0.625 -2.0937,1.6875 -1.0938,1.03125 -2.3125,2.5625 v 11.1875 q 2.125,2.59375 4.0312,3.96875 1.9063,1.375 4,1.375 1.9375,0 3.3125,-0.9375 1.4063,-0.9375 2.25,-2.5 0.875,-1.5625 1.2813,-3.5 0.4062,-1.9375 0.4062,-3.90625 z m 28.5313,11.84375 q 0,0.90625 -0.125,1.4375 -0.125,0.53125 -0.375,0.78125 -0.25,0.25 -0.75,0.46875 -0.5,0.21875 -1.1563,0.34375 -0.625,0.15625 -1.3437,0.25 -0.7188,0.0937 -1.4375,0.0937 -2.1875,0 -3.75,-0.5625 -1.5625,-0.59375 -2.5625,-1.75 -1,-1.1875 -1.4688,-2.96875 -0.4375,-1.8125 -0.4375,-4.25 v -16.4375 h -3.9375 q -0.4687,0 -0.75,-0.5 -0.2812,-0.5 -0.2812,-1.625 0,-0.59375 0.062,-1 0.094,-0.40625 0.2187,-0.65625 0.125,-0.28125 0.3125,-0.375 0.2188,-0.125 0.4688,-0.125 h 3.9062 v -6.6875 q 0,-0.21875 0.094,-0.40625 0.125,-0.1875 0.4063,-0.3125 0.3125,-0.15625 0.8125,-0.21875 0.5,-0.0625 1.25,-0.0625 0.7812,0 1.2812,0.0625 0.5,0.0625 0.7813,0.21875 0.2812,0.125 0.4062,0.3125 0.125,0.1875 0.125,0.40625 v 6.6875 h 7.2188 q 0.25,0 0.4375,0.125 0.1875,0.0937 0.3125,0.375 0.1562,0.25 0.2187,0.65625 0.062,0.40625 0.062,1 0,1.125 -0.2812,1.625 -0.2813,0.5 -0.75,0.5 h -7.2188 v 15.6875 q 0,2.90625 0.8438,4.40625 0.875,1.46875 3.0937,1.46875 0.7188,0 1.2813,-0.125 0.5625,-0.15625 1,-0.3125 0.4375,-0.15625 0.75,-0.28125 0.3125,-0.15625 0.5625,-0.15625 0.1562,0 0.2812,0.0937 0.1563,0.0625 0.2188,0.28125 0.094,0.21875 0.1562,0.59375 0.062,0.375 0.062,0.9375 z"
     id="text13"
     style="font-size:64px;line-height:1;font-family:Calibri;-inkscape-font-specification:Calibri;font-variant-ligatures:none;text-align:center;letter-spacing:1px;word-spacing:1px;text-orientation:upright;text-anchor:middle;fill:#fe4eba;fill-opacity:1;stroke-width:3;stroke-linejoin:bevel;stroke-opacity:0.836773;paint-order:stroke fill markers"
     aria-label="concept" /><path
     d="m 618.51476,638.58536 v 2.95313 q 0,0.60937 -0.14062,0.98437 -0.11719,0.375 -0.39844,0.58594 -0.25781,0.21094 -0.67969,0.28125 -0.39844,0.0703 -0.96094,0.0703 -0.5625,0 -0.96093,-0.0703 -0.39844,-0.0703 -0.65625,-0.28125 -0.25782,-0.21094 -0.39844,-0.58594 -0.11719,-0.375 -0.11719,-0.98437 0,-0.70313 0.0703,-1.28907 0.0703,-0.60937 0.21094,-1.14843 0.16406,-0.53907 0.42188,-1.05469 0.28125,-0.53906 0.65625,-1.125 l 3.16406,-4.80469 q 0.11719,-0.1875 0.25781,-0.30469 0.14063,-0.11718 0.35156,-0.1875 0.21094,-0.0937 0.49219,-0.14062 0.30469,-0.0469 0.72656,-0.0469 0.375,0 0.63282,0.0469 0.25781,0.0234 0.375,0.11719 0.11718,0.0703 0.11718,0.21093 0.0234,0.14063 -0.0937,0.32813 z m -8.39062,0 v 2.95313 q 0,0.60937 -0.14063,0.98437 -0.11719,0.375 -0.39844,0.58594 -0.25781,0.21094 -0.67968,0.28125 -0.39844,0.0703 -0.96094,0.0703 -0.5625,0 -0.96094,-0.0703 -0.39844,-0.0703 -0.65625,-0.28125 -0.25781,-0.21094 -0.39844,-0.58594 -0.11718,-0.375 -0.11718,-0.98437 0,-0.70313 0.0703,-1.28907 0.0703,-0.60937 0.21094,-1.14843 0.16406,-0.53907 0.42187,-1.05469 0.28125,-0.53906 0.65625,-1.125 l 3.16406,-4.80469 q 0.11719,-0.1875 0.25782,-0.30469 0.14062,-0.11718 0.35156,-0.1875 0.21094,-0.0937 0.49219,-0.14062 0.30468,-0.0469 0.72656,-0.0469 0.375,0 0.60937,0.0469 0.25782,0.0234 0.375,0.11719 0.14063,0.0703 0.14063,0.21093 0,0.14063 -0.0937,0.32813 z m 36.57812,14.20313 q 0,2.76562 -0.60937,4.96875 -0.58594,2.20312 -1.75782,3.75 -1.14843,1.52343 -2.85937,2.36718 -1.71094,0.82032 -3.91406,0.82032 -0.9375,0 -1.73438,-0.1875 -0.79687,-0.1875 -1.57031,-0.58594 -0.75,-0.39844 -1.5,-1.00781 -0.75,-0.60938 -1.59375,-1.42969 v 10.54687 q 0,0.1875 -0.0937,0.32813 -0.0937,0.14062 -0.30469,0.23437 -0.21094,0.0937 -0.58594,0.14063 -0.375,0.0469 -0.96093,0.0469 -0.5625,0 -0.9375,-0.0469 -0.375,-0.0469 -0.60938,-0.14063 -0.21094,-0.0937 -0.30469,-0.23437 -0.0703,-0.14063 -0.0703,-0.32813 v -29.46093 q 0,-0.21094 0.0703,-0.32813 0.0703,-0.14062 0.28125,-0.23437 0.21094,-0.0937 0.53907,-0.11719 0.32812,-0.0469 0.79687,-0.0469 0.49219,0 0.79688,0.0469 0.32812,0.0234 0.53906,0.11719 0.21094,0.0937 0.28125,0.23437 0.0937,0.11719 0.0937,0.32813 v 2.83593 q 0.96094,-0.98437 1.85156,-1.71093 0.89063,-0.72657 1.78125,-1.19532 0.91406,-0.49218 1.85156,-0.72656 0.96094,-0.25781 2.01563,-0.25781 2.29687,0 3.91406,0.89062 1.61719,0.89063 2.625,2.4375 1.03125,1.54688 1.5,3.60938 0.46875,2.03906 0.46875,4.33594 z m -4.07812,0.44531 q 0,-1.61719 -0.25782,-3.11719 -0.23437,-1.52344 -0.84375,-2.69531 -0.58593,-1.17188 -1.59375,-1.875 -1.00781,-0.70313 -2.50781,-0.70313 -0.75,0 -1.47656,0.23438 -0.72656,0.21094 -1.47656,0.70312 -0.75,0.46875 -1.57032,1.26563 -0.82031,0.77344 -1.73437,1.92187 v 8.39063 q 1.59375,1.94531 3.02344,2.97656 1.42968,1.03125 3,1.03125 1.45312,0 2.48437,-0.70312 1.05469,-0.70313 1.6875,-1.875 0.65625,-1.17188 0.96094,-2.625 0.30469,-1.45313 0.30469,-2.92969 z m 23.2187,-9.28125 q 0,0.51562 -0.023,0.86719 -0.023,0.35156 -0.094,0.5625 -0.07,0.1875 -0.1875,0.30468 -0.094,0.0937 -0.2812,0.0937 -0.1875,0 -0.46875,-0.0937 -0.25781,-0.11718 -0.60938,-0.21093 -0.32812,-0.11719 -0.75,-0.21094 -0.42187,-0.0937 -0.91406,-0.0937 -0.58594,0 -1.14844,0.23437 -0.5625,0.23438 -1.19531,0.77344 -0.60937,0.53906 -1.28906,1.42969 -0.67969,0.89062 -1.5,2.17969 v 13.875 q 0,0.1875 -0.0937,0.32812 -0.0937,0.11719 -0.30469,0.21094 -0.21094,0.0937 -0.58594,0.14062 -0.375,0.0469 -0.96093,0.0469 -0.5625,0 -0.9375,-0.0469 -0.375,-0.0469 -0.60938,-0.14062 -0.21094,-0.0937 -0.30469,-0.21094 -0.0703,-0.14062 -0.0703,-0.32812 v -21.09375 q 0,-0.1875 0.0703,-0.30469 0.0703,-0.14063 0.28125,-0.23438 0.21094,-0.11718 0.53907,-0.14062 0.32812,-0.0469 0.86718,-0.0469 0.51563,0 0.84375,0.0469 0.35157,0.0234 0.53907,0.14062 0.1875,0.0937 0.25781,0.23438 0.0937,0.11719 0.0937,0.30469 v 3.07031 q 0.86719,-1.26563 1.61719,-2.0625 0.77343,-0.79688 1.45312,-1.24219 0.67969,-0.46875 1.33594,-0.63281 0.67969,-0.1875 1.35937,-0.1875 0.30469,0 0.67969,0.0469 0.39844,0.0234 0.82031,0.11719 0.42188,0.0937 0.74998,0.21094 0.3516,0.11719 0.4922,0.23437 0.1406,0.11719 0.1875,0.23438 0.047,0.0937 0.07,0.25781 0.047,0.16406 0.047,0.49219 0.023,0.30469 0.023,0.84375 z m 22.7735,8.25 q 0,0.91406 -0.4688,1.3125 -0.4453,0.375 -1.0312,0.375 h -13.8281 q 0,1.75781 0.3515,3.16406 0.3516,1.40625 1.1719,2.41406 0.8203,1.00782 2.1328,1.54688 1.3125,0.53906 3.2109,0.53906 1.5,0 2.6719,-0.23437 1.1719,-0.25782 2.0156,-0.5625 0.8672,-0.30469 1.4063,-0.53907 0.5625,-0.25781 0.8437,-0.25781 0.1641,0 0.2813,0.0937 0.1406,0.0703 0.2109,0.23438 0.07,0.16406 0.094,0.46875 0.047,0.28125 0.047,0.70312 0,0.30469 -0.023,0.53906 -0.023,0.21094 -0.07,0.39844 -0.023,0.16406 -0.1172,0.30469 -0.07,0.14062 -0.2109,0.28125 -0.1172,0.11719 -0.75,0.42187 -0.6328,0.28125 -1.6406,0.5625 -1.0078,0.28125 -2.3438,0.49219 -1.3125,0.23438 -2.8125,0.23438 -2.6015,0 -4.5703,-0.72657 -1.9453,-0.72656 -3.2812,-2.15625 -1.336,-1.42968 -2.0157,-3.58593 -0.6797,-2.15625 -0.6797,-5.01563 0,-2.71875 0.7032,-4.875 0.7031,-2.17969 2.0156,-3.67969 1.3359,-1.52343 3.2109,-2.32031 1.875,-0.82031 4.1953,-0.82031 2.4844,0 4.2188,0.79687 1.7578,0.79688 2.8828,2.15625 1.125,1.33594 1.6406,3.16407 0.5391,1.80468 0.5391,3.86718 z m -3.8906,-1.14844 q 0.07,-3.04687 -1.3594,-4.78125 -1.4063,-1.73437 -4.1953,-1.73437 -1.4297,0 -2.5078,0.53906 -1.0782,0.53906 -1.8047,1.42969 -0.7266,0.89062 -1.125,2.08593 -0.3985,1.17188 -0.4453,2.46094 z m 24.0156,6.86719 q 0,1.61719 -0.6094,2.88281 -0.5859,1.26563 -1.6875,2.13281 -1.1015,0.86719 -2.625,1.3125 -1.5234,0.44532 -3.3515,0.44532 -1.125,0 -2.1563,-0.1875 -1.0078,-0.16407 -1.8281,-0.42188 -0.7969,-0.28125 -1.3594,-0.5625 -0.5625,-0.30469 -0.8203,-0.53906 -0.2578,-0.23438 -0.375,-0.65625 -0.1172,-0.42188 -0.1172,-1.14844 0,-0.44531 0.047,-0.75 0.047,-0.30469 0.1172,-0.49219 0.07,-0.1875 0.1875,-0.25781 0.1406,-0.0937 0.3047,-0.0937 0.2578,0 0.75,0.32813 0.5156,0.30468 1.2422,0.67968 0.75,0.375 1.7578,0.70313 1.0078,0.30469 2.3203,0.30469 0.9844,0 1.7812,-0.21094 0.7969,-0.21094 1.3829,-0.60938 0.5859,-0.42187 0.8906,-1.05468 0.3281,-0.63282 0.3281,-1.5 0,-0.89063 -0.4687,-1.5 -0.4454,-0.60938 -1.1954,-1.07813 -0.75,-0.46875 -1.6875,-0.82031 -0.9375,-0.375 -1.9453,-0.77344 -0.9843,-0.39844 -1.9453,-0.89062 -0.9375,-0.51563 -1.6875,-1.24219 -0.75,-0.72656 -1.2187,-1.73438 -0.4453,-1.00781 -0.4453,-2.41406 0,-1.24219 0.4687,-2.36719 0.4922,-1.14843 1.4531,-1.99218 0.961,-0.86719 2.3907,-1.38282 1.4531,-0.51562 3.375,-0.51562 0.8437,0 1.6875,0.14062 0.8437,0.14063 1.5234,0.35157 0.6797,0.21093 1.1484,0.46875 0.4922,0.23437 0.7266,0.42187 0.2578,0.1875 0.3281,0.32813 0.094,0.14062 0.1172,0.32812 0.047,0.16406 0.07,0.42188 0.047,0.25781 0.047,0.63281 0,0.39844 -0.047,0.70312 -0.023,0.28125 -0.1172,0.46875 -0.07,0.1875 -0.1875,0.28125 -0.1172,0.0703 -0.2578,0.0703 -0.2109,0 -0.6094,-0.25782 -0.3984,-0.25781 -1.0312,-0.53906 -0.6328,-0.30469 -1.5,-0.5625 -0.8438,-0.25781 -1.9453,-0.25781 -0.9844,0 -1.7344,0.23437 -0.75,0.21094 -1.2422,0.63282 -0.4687,0.39843 -0.7266,0.96093 -0.2343,0.5625 -0.2343,1.21875 0,0.91407 0.4687,1.54688 0.4688,0.60937 1.2188,1.07812 0.75,0.46875 1.7109,0.84375 0.9609,0.375 1.9453,0.77344 1.0078,0.39844 1.9688,0.89063 0.9843,0.49218 1.7343,1.19531 0.75,0.70312 1.1954,1.6875 0.4687,0.98437 0.4687,2.34375 z m 24.5312,-5.71875 q 0,0.91406 -0.4687,1.3125 -0.4453,0.375 -1.0313,0.375 h -13.8281 q 0,1.75781 0.3516,3.16406 0.3515,1.40625 1.1719,2.41406 0.8203,1.00782 2.1328,1.54688 1.3125,0.53906 3.2109,0.53906 1.5,0 2.6719,-0.23437 1.1719,-0.25782 2.0156,-0.5625 0.8672,-0.30469 1.4063,-0.53907 0.5625,-0.25781 0.8437,-0.25781 0.1641,0 0.2813,0.0937 0.1406,0.0703 0.2109,0.23438 0.07,0.16406 0.094,0.46875 0.047,0.28125 0.047,0.70312 0,0.30469 -0.023,0.53906 -0.023,0.21094 -0.07,0.39844 -0.023,0.16406 -0.1172,0.30469 -0.07,0.14062 -0.211,0.28125 -0.1171,0.11719 -0.75,0.42187 -0.6328,0.28125 -1.6406,0.5625 -1.0078,0.28125 -2.3437,0.49219 -1.3125,0.23438 -2.8125,0.23438 -2.6016,0 -4.5703,-0.72657 -1.9454,-0.72656 -3.2813,-2.15625 -1.3359,-1.42968 -2.0156,-3.58593 -0.6797,-2.15625 -0.6797,-5.01563 0,-2.71875 0.7031,-4.875 0.7031,-2.17969 2.0156,-3.67969 1.336,-1.52343 3.211,-2.32031 1.875,-0.82031 4.1953,-0.82031 2.4844,0 4.2187,0.79687 1.7579,0.79688 2.8829,2.15625 1.125,1.33594 1.6406,3.16407 0.539,1.80468 0.539,3.86718 z m -3.8906,-1.14844 q 0.07,-3.04687 -1.3594,-4.78125 -1.4062,-1.73437 -4.1953,-1.73437 -1.4297,0 -2.5078,0.53906 -1.0781,0.53906 -1.8047,1.42969 -0.7265,0.89062 -1.125,2.08593 -0.3984,1.17188 -0.4453,2.46094 z m 28.9375,12.60938 q 0,0.1875 -0.094,0.32812 -0.094,0.11719 -0.3047,0.21094 -0.2109,0.0937 -0.5859,0.14062 -0.375,0.0469 -0.9375,0.0469 -0.586,0 -0.961,-0.0469 -0.375,-0.0469 -0.5859,-0.14062 -0.2109,-0.0937 -0.3047,-0.21094 -0.094,-0.14062 -0.094,-0.32812 v -12.35157 q 0,-1.80468 -0.2812,-2.90625 -0.2813,-1.10156 -0.8203,-1.89843 -0.5391,-0.79688 -1.4063,-1.21875 -0.8437,-0.42188 -1.9687,-0.42188 -1.4532,0 -2.9063,1.03125 -1.4531,1.03125 -3.0469,3.02344 v 14.74219 q 0,0.1875 -0.094,0.32812 -0.094,0.11719 -0.3047,0.21094 -0.2109,0.0937 -0.5859,0.14062 -0.375,0.0469 -0.9609,0.0469 -0.5625,0 -0.9375,-0.0469 -0.375,-0.0469 -0.6094,-0.14062 -0.2109,-0.0937 -0.3047,-0.21094 -0.07,-0.14062 -0.07,-0.32812 v -21.09375 q 0,-0.1875 0.07,-0.30469 0.07,-0.14063 0.2813,-0.23438 0.2109,-0.11718 0.539,-0.14062 0.3281,-0.0469 0.8672,-0.0469 0.5156,0 0.8438,0.0469 0.3515,0.0234 0.539,0.14062 0.1875,0.0937 0.2578,0.23438 0.094,0.11719 0.094,0.30469 v 2.78906 q 1.7813,-1.99219 3.5391,-2.90625 1.7812,-0.9375 3.5859,-0.9375 2.1094,0 3.5391,0.72656 1.4531,0.70313 2.3437,1.89844 0.8907,1.19531 1.2657,2.8125 0.3984,1.59375 0.3984,3.84375 z m 18.5781,-1.54688 q 0,0.67969 -0.094,1.07813 -0.094,0.39843 -0.2812,0.58593 -0.1875,0.1875 -0.5625,0.35157 -0.375,0.16406 -0.8672,0.25781 -0.4687,0.11719 -1.0078,0.1875 -0.5391,0.0703 -1.0781,0.0703 -1.6407,0 -2.8125,-0.42187 -1.1719,-0.44532 -1.9219,-1.3125 -0.75,-0.89063 -1.1016,-2.22657 -0.3281,-1.35937 -0.3281,-3.1875 v -12.32812 h -2.9531 q -0.3516,0 -0.5625,-0.375 -0.211,-0.375 -0.211,-1.21875 0,-0.44531 0.047,-0.75 0.07,-0.30469 0.1641,-0.49219 0.094,-0.21094 0.2344,-0.28125 0.164,-0.0937 0.3515,-0.0937 h 2.9297 v -5.01562 q 0,-0.16407 0.07,-0.30469 0.094,-0.14063 0.3047,-0.23438 0.2344,-0.11718 0.6094,-0.16406 0.375,-0.0469 0.9375,-0.0469 0.5859,0 0.9609,0.0469 0.375,0.0469 0.586,0.16406 0.2109,0.0937 0.3046,0.23438 0.094,0.14062 0.094,0.30469 v 5.01562 h 5.4141 q 0.1875,0 0.3281,0.0937 0.1407,0.0703 0.2344,0.28125 0.1172,0.1875 0.1641,0.49219 0.047,0.30469 0.047,0.75 0,0.84375 -0.211,1.21875 -0.2109,0.375 -0.5625,0.375 h -5.414 v 11.76562 q 0,2.17969 0.6328,3.30469 0.6562,1.10156 2.3203,1.10156 0.5391,0 0.9609,-0.0937 0.4219,-0.11718 0.75,-0.23437 0.3282,-0.11719 0.5625,-0.21094 0.2344,-0.11719 0.4219,-0.11719 0.1172,0 0.211,0.0703 0.1171,0.0469 0.164,0.21093 0.07,0.16407 0.1172,0.44532 0.047,0.28125 0.047,0.70312 z m 21.086,-28.78125 q 0,0.72656 -0.07,1.33594 -0.07,0.58594 -0.2344,1.125 -0.1406,0.53906 -0.4219,1.07812 -0.2578,0.51563 -0.6328,1.07813 l -3.1875,4.80469 q -0.094,0.1875 -0.2578,0.32812 -0.1406,0.11719 -0.3516,0.21094 -0.2109,0.0703 -0.4922,0.11719 -0.2812,0.0469 -0.7031,0.0469 -0.375,0 -0.6328,-0.0234 -0.2344,-0.0469 -0.375,-0.14062 -0.1172,-0.0937 -0.1172,-0.23438 0,-0.14062 0.07,-0.35156 l 3.0938,-6.39844 v -2.97656 q 0,-0.60937 0.1172,-0.98437 0.1172,-0.375 0.375,-0.5625 0.2812,-0.21094 0.6797,-0.28125 0.4218,-0.0703 1.0078,-0.0703 0.539,0 0.9375,0.0703 0.4218,0.0703 0.6797,0.28125 0.2578,0.1875 0.375,0.5625 0.1406,0.375 0.1406,0.98437 z m -8.3906,0 q 0,0.72656 -0.07,1.33594 -0.07,0.58594 -0.2344,1.125 -0.1406,0.53906 -0.4219,1.07812 -0.2578,0.51563 -0.6328,1.07813 l -3.1875,4.80469 q -0.094,0.1875 -0.2578,0.32812 -0.1406,0.11719 -0.3516,0.21094 -0.2109,0.0703 -0.4922,0.11719 -0.2812,0.0469 -0.7031,0.0469 -0.375,0 -0.6328,-0.0234 -0.2578,-0.0469 -0.375,-0.14062 -0.1172,-0.0937 -0.1406,-0.23438 0,-0.14062 0.094,-0.35156 l 3.0937,-6.39844 v -2.97656 q 0,-0.60937 0.1172,-0.98437 0.1172,-0.375 0.375,-0.5625 0.2813,-0.21094 0.6797,-0.28125 0.4219,-0.0703 1.0078,-0.0703 0.5625,0 0.9609,0.0703 0.3985,0.0703 0.6563,0.28125 0.2578,0.1875 0.375,0.5625 0.1406,0.375 0.1406,0.98437 z m 44.1796,27.11719 q 0,0.39844 -0.023,0.70312 -0.023,0.28125 -0.094,0.49219 -0.047,0.1875 -0.1406,0.35156 -0.07,0.14063 -0.375,0.44532 -0.2812,0.28125 -0.9844,0.72656 -0.7031,0.42187 -1.5937,0.77344 -0.8672,0.32812 -1.8985,0.53906 -1.0312,0.21094 -2.1328,0.21094 -2.2734,0 -4.0312,-0.75 -1.7578,-0.75 -2.9531,-2.17969 -1.1719,-1.45313 -1.8047,-3.53906 -0.6094,-2.10938 -0.6094,-4.85157 0,-3.11718 0.75,-5.34375 0.7734,-2.25 2.0859,-3.67968 1.336,-1.42969 3.1172,-2.10938 1.8047,-0.70312 3.8906,-0.70312 1.0079,0 1.9454,0.1875 0.9609,0.1875 1.7578,0.49218 0.7968,0.30469 1.4062,0.70313 0.6328,0.39844 0.9141,0.67969 0.2812,0.28125 0.375,0.44531 0.1172,0.16406 0.1875,0.39844 0.07,0.21093 0.094,0.49218 0.023,0.28125 0.023,0.70313 0,0.91406 -0.2109,1.28906 -0.211,0.35156 -0.5157,0.35156 -0.3515,0 -0.8203,-0.375 -0.4453,-0.39843 -1.1484,-0.86718 -0.7031,-0.46875 -1.711,-0.84375 -0.9843,-0.39844 -2.3437,-0.39844 -2.7891,0 -4.2891,2.15625 -1.4765,2.13281 -1.4765,6.21094 0,2.03906 0.375,3.58593 0.3984,1.52344 1.1484,2.55469 0.75,1.03125 1.8281,1.54688 1.1016,0.49218 2.5078,0.49218 1.336,0 2.3438,-0.42187 1.0078,-0.42188 1.7344,-0.91406 0.75,-0.51563 1.2422,-0.91407 0.5156,-0.42187 0.7968,-0.42187 0.1641,0 0.2813,0.0937 0.1172,0.0937 0.1875,0.32812 0.094,0.21094 0.1172,0.5625 0.047,0.32813 0.047,0.79688 z m 25.3516,-7.57031 q 0,2.57812 -0.6797,4.75781 -0.6797,2.15625 -2.039,3.72656 -1.336,1.57031 -3.375,2.46094 -2.0157,0.86719 -4.6875,0.86719 -2.6016,0 -4.5469,-0.77344 -1.9219,-0.77344 -3.211,-2.25 -1.289,-1.47656 -1.9218,-3.58594 -0.6328,-2.10937 -0.6328,-4.78125 0,-2.57812 0.6562,-4.73437 0.6797,-2.17969 2.0156,-3.75 1.3594,-1.57032 3.375,-2.4375 2.0157,-0.86719 4.711,-0.86719 2.6015,0 4.5234,0.77344 1.9453,0.77343 3.2344,2.25 1.289,1.47656 1.9219,3.58593 0.6562,2.10938 0.6562,4.75782 z m -4.0781,0.25781 q 0,-1.71094 -0.3281,-3.23438 -0.3047,-1.52343 -1.0313,-2.67187 -0.7266,-1.14844 -1.9687,-1.80469 -1.2422,-0.67969 -3.0938,-0.67969 -1.7109,0 -2.9531,0.60938 -1.2188,0.60937 -2.0156,1.73437 -0.7969,1.10157 -1.1954,2.625 -0.375,1.52344 -0.375,3.32813 0,1.73437 0.3047,3.25781 0.3282,1.52344 1.0547,2.67188 0.75,1.125 1.9922,1.80468 1.2422,0.65625 3.0938,0.65625 1.6875,0 2.9296,-0.60937 1.2422,-0.60938 2.0391,-1.71094 0.7969,-1.10156 1.1719,-2.625 0.375,-1.52344 0.375,-3.35156 z m 28.9375,10.52344 q 0,0.1875 -0.094,0.32812 -0.094,0.11719 -0.3047,0.21094 -0.2109,0.0937 -0.5859,0.14062 -0.375,0.0469 -0.9375,0.0469 -0.586,0 -0.961,-0.0469 -0.375,-0.0469 -0.5859,-0.14062 -0.211,-0.0937 -0.3047,-0.21094 -0.094,-0.14062 -0.094,-0.32812 v -12.35157 q 0,-1.80468 -0.2813,-2.90625 -0.2812,-1.10156 -0.8203,-1.89843 -0.539,-0.79688 -1.4062,-1.21875 -0.8438,-0.42188 -1.9688,-0.42188 -1.4531,0 -2.9062,1.03125 -1.4532,1.03125 -3.0469,3.02344 v 14.74219 q 0,0.1875 -0.094,0.32812 -0.094,0.11719 -0.3047,0.21094 -0.2109,0.0937 -0.5859,0.14062 -0.375,0.0469 -0.961,0.0469 -0.5625,0 -0.9375,-0.0469 -0.375,-0.0469 -0.6093,-0.14062 -0.211,-0.0937 -0.3047,-0.21094 -0.07,-0.14062 -0.07,-0.32812 v -21.09375 q 0,-0.1875 0.07,-0.30469 0.07,-0.14063 0.2812,-0.23438 0.211,-0.11718 0.5391,-0.14062 0.3281,-0.0469 0.8672,-0.0469 0.5156,0 0.8437,0.0469 0.3516,0.0234 0.5391,0.14062 0.1875,0.0937 0.2578,0.23438 0.094,0.11719 0.094,0.30469 v 2.78906 q 1.7812,-1.99219 3.5391,-2.90625 1.7812,-0.9375 3.5859,-0.9375 2.1094,0 3.5391,0.72656 1.4531,0.70313 2.3437,1.89844 0.8906,1.19531 1.2656,2.8125 0.3985,1.59375 0.3985,3.84375 z m 18.5781,-1.54688 q 0,0.67969 -0.094,1.07813 -0.094,0.39843 -0.2812,0.58593 -0.1875,0.1875 -0.5625,0.35157 -0.375,0.16406 -0.8672,0.25781 -0.4688,0.11719 -1.0078,0.1875 -0.5391,0.0703 -1.0782,0.0703 -1.6406,0 -2.8125,-0.42187 -1.1718,-0.44532 -1.9218,-1.3125 -0.75,-0.89063 -1.1016,-2.22657 -0.3281,-1.35937 -0.3281,-3.1875 v -12.32812 h -2.9532 q -0.3515,0 -0.5625,-0.375 -0.2109,-0.375 -0.2109,-1.21875 0,-0.44531 0.047,-0.75 0.07,-0.30469 0.1641,-0.49219 0.094,-0.21094 0.2343,-0.28125 0.1641,-0.0937 0.3516,-0.0937 h 2.9297 v -5.01562 q 0,-0.16407 0.07,-0.30469 0.094,-0.14063 0.3047,-0.23438 0.2344,-0.11718 0.6094,-0.16406 0.375,-0.0469 0.9375,-0.0469 0.5859,0 0.9609,0.0469 0.375,0.0469 0.5859,0.16406 0.211,0.0937 0.3047,0.23438 0.094,0.14062 0.094,0.30469 v 5.01562 h 5.4141 q 0.1875,0 0.3281,0.0937 0.1406,0.0703 0.2344,0.28125 0.1172,0.1875 0.164,0.49219 0.047,0.30469 0.047,0.75 0,0.84375 -0.2109,1.21875 -0.2109,0.375 -0.5625,0.375 h -5.4141 v 11.76562 q 0,2.17969 0.6329,3.30469 0.6562,1.10156 2.3203,1.10156 0.539,0 0.9609,-0.0937 0.4219,-0.11718 0.75,-0.23437 0.3281,-0.11719 0.5625,-0.21094 0.2344,-0.11719 0.4219,-0.11719 0.1172,0 0.2109,0.0703 0.1172,0.0469 0.1641,0.21093 0.07,0.16407 0.1172,0.44532 0.047,0.28125 0.047,0.70312 z m 23.5938,-9.91406 q 0,0.91406 -0.4688,1.3125 -0.4453,0.375 -1.0312,0.375 h -13.8282 q 0,1.75781 0.3516,3.16406 0.3516,1.40625 1.1719,2.41406 0.8203,1.00782 2.1328,1.54688 1.3125,0.53906 3.2109,0.53906 1.5,0 2.6719,-0.23437 1.1719,-0.25782 2.0156,-0.5625 0.8672,-0.30469 1.4063,-0.53907 0.5625,-0.25781 0.8437,-0.25781 0.1641,0 0.2813,0.0937 0.1406,0.0703 0.2109,0.23438 0.07,0.16406 0.094,0.46875 0.047,0.28125 0.047,0.70312 0,0.30469 -0.023,0.53906 -0.023,0.21094 -0.07,0.39844 -0.023,0.16406 -0.1172,0.30469 -0.07,0.14062 -0.2109,0.28125 -0.1172,0.11719 -0.75,0.42187 -0.6328,0.28125 -1.6406,0.5625 -1.0079,0.28125 -2.3438,0.49219 -1.3125,0.23438 -2.8125,0.23438 -2.6016,0 -4.5703,-0.72657 -1.9453,-0.72656 -3.2813,-2.15625 -1.3359,-1.42968 -2.0156,-3.58593 -0.6797,-2.15625 -0.6797,-5.01563 0,-2.71875 0.7032,-4.875 0.7031,-2.17969 2.0156,-3.67969 1.3359,-1.52343 3.2109,-2.32031 1.875,-0.82031 4.1953,-0.82031 2.4844,0 4.2188,0.79687 1.7578,0.79688 2.8828,2.15625 1.125,1.33594 1.6406,3.16407 0.5391,1.80468 0.5391,3.86718 z m -3.8907,-1.14844 q 0.07,-3.04687 -1.3593,-4.78125 -1.4063,-1.73437 -4.1954,-1.73437 -1.4296,0 -2.5078,0.53906 -1.0781,0.53906 -1.8047,1.42969 -0.7265,0.89062 -1.125,2.08593 -0.3984,1.17188 -0.4453,2.46094 z m 26.0313,12.16406 q 0.1875,0.32813 0.1875,0.5625 0,0.21094 -0.2344,0.35157 -0.2109,0.14062 -0.6797,0.1875 -0.4453,0.0703 -1.1719,0.0703 -0.7031,0 -1.125,-0.0469 -0.3984,-0.0234 -0.6562,-0.0937 -0.2344,-0.0937 -0.375,-0.21093 -0.1172,-0.14063 -0.2109,-0.30469 l -5.0625,-8.36719 -5.0391,8.36719 q -0.094,0.16406 -0.2344,0.30469 -0.1172,0.11718 -0.375,0.21093 -0.2344,0.0703 -0.6328,0.0937 -0.3984,0.0469 -1.0547,0.0469 -0.6797,0 -1.125,-0.0703 -0.4219,-0.0469 -0.6328,-0.1875 -0.1875,-0.14063 -0.1875,-0.35157 0.023,-0.23437 0.2344,-0.5625 l 6.5625,-10.28906 -6.211,-9.91406 q -0.1875,-0.32813 -0.2109,-0.53906 0,-0.23438 0.2109,-0.375 0.2344,-0.16407 0.6797,-0.21094 0.4688,-0.0469 1.2188,-0.0469 0.6797,0 1.0781,0.0469 0.4219,0.0234 0.6563,0.0937 0.2343,0.0703 0.3515,0.1875 0.1172,0.11719 0.211,0.28125 l 4.8046,7.85156 4.875,-7.85156 q 0.094,-0.14063 0.211,-0.25781 0.1172,-0.11719 0.3047,-0.1875 0.2109,-0.0937 0.5625,-0.11719 0.375,-0.0469 1.0078,-0.0469 0.6797,0 1.1015,0.0469 0.4454,0.0469 0.6563,0.1875 0.2109,0.11719 0.1875,0.35156 -0.023,0.23438 -0.2344,0.58594 l -6.164,9.79687 z m 16.914,-1.10156 q 0,0.67969 -0.094,1.07813 -0.094,0.39843 -0.2812,0.58593 -0.1875,0.1875 -0.5625,0.35157 -0.375,0.16406 -0.8672,0.25781 -0.4687,0.11719 -1.0078,0.1875 -0.5391,0.0703 -1.0781,0.0703 -1.6407,0 -2.8125,-0.42187 -1.1719,-0.44532 -1.9219,-1.3125 -0.75,-0.89063 -1.1016,-2.22657 -0.3281,-1.35937 -0.3281,-3.1875 v -12.32812 h -2.9531 q -0.3516,0 -0.5625,-0.375 -0.211,-0.375 -0.211,-1.21875 0,-0.44531 0.047,-0.75 0.07,-0.30469 0.1641,-0.49219 0.094,-0.21094 0.2344,-0.28125 0.164,-0.0937 0.3515,-0.0937 h 2.9297 v -5.01562 q 0,-0.16407 0.07,-0.30469 0.094,-0.14063 0.3047,-0.23438 0.2344,-0.11718 0.6094,-0.16406 0.375,-0.0469 0.9375,-0.0469 0.5859,0 0.9609,0.0469 0.375,0.0469 0.586,0.16406 0.2109,0.0937 0.3046,0.23438 0.094,0.14062 0.094,0.30469 v 5.01562 h 5.4141 q 0.1875,0 0.3281,0.0937 0.1407,0.0703 0.2344,0.28125 0.1172,0.1875 0.1641,0.49219 0.047,0.30469 0.047,0.75 0,0.84375 -0.211,1.21875 -0.2109,0.375 -0.5625,0.375 h -5.414 v 11.76562 q 0,2.17969 0.6328,3.30469 0.6562,1.10156 2.3203,1.10156 0.5391,0 0.9609,-0.0937 0.4219,-0.11718 0.75,-0.23437 0.3282,-0.11719 0.5625,-0.21094 0.2344,-0.11719 0.4219,-0.11719 0.1172,0 0.211,0.0703 0.1171,0.0469 0.164,0.21093 0.07,0.16407 0.1172,0.44532 0.047,0.28125 0.047,0.70312 z"
     id="text14"
     style="font-size:48px;line-height:1;font-family:Calibri;-inkscape-font-specification:Calibri;font-variant-ligatures:none;text-align:center;letter-spacing:1px;word-spacing:1px;text-orientation:upright;text-anchor:middle;fill:#fe90b5;fill-opacity:0.992157;stroke-width:3;stroke-linejoin:bevel;stroke-opacity:0.836773;paint-order:stroke fill markers"
     aria-label="“present” context" /><script
     id="script1"
     type="text/javascript">
!function(){const t=&quot;http://www.w3.org/2000/svg&quot;,e=&quot;http://www.w3.org/1999/xlink&quot;,s=&quot;http://www.w3.org/1999/xhtml&quot;,r=2;if(document.createElementNS(t,&quot;meshgradient&quot;).x)return;const n=(t,e,s,r)=&gt;{let n=new x(.5*(e.x+s.x),.5*(e.y+s.y)),o=new x(.5*(t.x+e.x),.5*(t.y+e.y)),i=new x(.5*(s.x+r.x),.5*(s.y+r.y)),a=new x(.5*(n.x+o.x),.5*(n.y+o.y)),h=new x(.5*(n.x+i.x),.5*(n.y+i.y)),l=new x(.5*(a.x+h.x),.5*(a.y+h.y));return[[t,o,a,l],[l,h,i,r]]},o=t=&gt;{let e=t[0].distSquared(t[1]),s=t[2].distSquared(t[3]),r=.25*t[0].distSquared(t[2]),n=.25*t[1].distSquared(t[3]),o=e&gt;s?e:s,i=r&gt;n?r:n;return 18*(o&gt;i?o:i)},i=(t,e)=&gt;Math.sqrt(t.distSquared(e)),a=(t,e)=&gt;t.scale(2/3).add(e.scale(1/3)),h=t=&gt;{let e,s,r,n,o,i,a,h=new g;return t.match(/(\w+\(\s*[^)]+\))+/g).forEach(t=&gt;{let l=t.match(/[\w.-]+/g),d=l.shift();switch(d){case&quot;translate&quot;:2===l.length?e=new g(1,0,0,1,l[0],l[1]):(console.error(&quot;mesh.js: translate does not have 2 arguments!&quot;),e=new g(1,0,0,1,0,0)),h=h.append(e);break;case&quot;scale&quot;:1===l.length?s=new g(l[0],0,0,l[0],0,0):2===l.length?s=new g(l[0],0,0,l[1],0,0):(console.error(&quot;mesh.js: scale does not have 1 or 2 arguments!&quot;),s=new g(1,0,0,1,0,0)),h=h.append(s);break;case&quot;rotate&quot;:if(3===l.length&amp;&amp;(e=new g(1,0,0,1,l[1],l[2]),h=h.append(e)),l[0]){r=l[0]*Math.PI/180;let t=Math.cos(r),e=Math.sin(r);Math.abs(t)&lt;1e-16&amp;&amp;(t=0),Math.abs(e)&lt;1e-16&amp;&amp;(e=0),a=new g(t,e,-e,t,0,0),h=h.append(a)}else console.error(&quot;math.js: No argument to rotate transform!&quot;);3===l.length&amp;&amp;(e=new g(1,0,0,1,-l[1],-l[2]),h=h.append(e));break;case&quot;skewX&quot;:l[0]?(r=l[0]*Math.PI/180,n=Math.tan(r),o=new g(1,0,n,1,0,0),h=h.append(o)):console.error(&quot;math.js: No argument to skewX transform!&quot;);break;case&quot;skewY&quot;:l[0]?(r=l[0]*Math.PI/180,n=Math.tan(r),i=new g(1,n,0,1,0,0),h=h.append(i)):console.error(&quot;math.js: No argument to skewY transform!&quot;);break;case&quot;matrix&quot;:6===l.length?h=h.append(new g(...l)):console.error(&quot;math.js: Incorrect number of arguments for matrix!&quot;);break;default:console.error(&quot;mesh.js: Unhandled transform type: &quot;+d)}}),h},l=t=&gt;{let e=[],s=t.split(/[ ,]+/);for(let t=0,r=s.length-1;t&lt;r;t+=2)e.push(new x(parseFloat(s[t]),parseFloat(s[t+1])));return e},d=(t,e)=&gt;{for(let s in e)t.setAttribute(s,e[s])},c=(t,e,s,r,n)=&gt;{let o,i,a=[0,0,0,0];for(let h=0;h&lt;3;++h)e[h]&lt;t[h]&amp;&amp;e[h]&lt;s[h]||t[h]&lt;e[h]&amp;&amp;s[h]&lt;e[h]?a[h]=0:(a[h]=.5*((e[h]-t[h])/r+(s[h]-e[h])/n),o=Math.abs(3*(e[h]-t[h])/r),i=Math.abs(3*(s[h]-e[h])/n),a[h]&gt;o?a[h]=o:a[h]&gt;i&amp;&amp;(a[h]=i));return a},u=[[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0],[-3,3,0,0,-2,-1,0,0,0,0,0,0,0,0,0,0],[2,-2,0,0,1,1,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0],[0,0,0,0,0,0,0,0,-3,3,0,0,-2,-1,0,0],[0,0,0,0,0,0,0,0,2,-2,0,0,1,1,0,0],[-3,0,3,0,0,0,0,0,-2,0,-1,0,0,0,0,0],[0,0,0,0,-3,0,3,0,0,0,0,0,-2,0,-1,0],[9,-9,-9,9,6,3,-6,-3,6,-6,3,-3,4,2,2,1],[-6,6,6,-6,-3,-3,3,3,-4,4,-2,2,-2,-2,-1,-1],[2,0,-2,0,0,0,0,0,1,0,1,0,0,0,0,0],[0,0,0,0,2,0,-2,0,0,0,0,0,1,0,1,0],[-6,6,6,-6,-4,-2,4,2,-3,3,-3,3,-2,-1,-2,-1],[4,-4,-4,4,2,2,-2,-2,2,-2,2,-2,1,1,1,1]],f=t=&gt;{let e=[];for(let s=0;s&lt;16;++s){e[s]=0;for(let r=0;r&lt;16;++r)e[s]+=u[s][r]*t[r]}return e},p=(t,e,s)=&gt;{const r=e*e,n=s*s,o=e*e*e,i=s*s*s;return t[0]+t[1]*e+t[2]*r+t[3]*o+t[4]*s+t[5]*s*e+t[6]*s*r+t[7]*s*o+t[8]*n+t[9]*n*e+t[10]*n*r+t[11]*n*o+t[12]*i+t[13]*i*e+t[14]*i*r+t[15]*i*o},y=t=&gt;{let e=[],s=[],r=[];for(let s=0;s&lt;4;++s)e[s]=[],e[s][0]=n(t[0][s],t[1][s],t[2][s],t[3][s]),e[s][1]=[],e[s][1].push(...n(...e[s][0][0])),e[s][1].push(...n(...e[s][0][1])),e[s][2]=[],e[s][2].push(...n(...e[s][1][0])),e[s][2].push(...n(...e[s][1][1])),e[s][2].push(...n(...e[s][1][2])),e[s][2].push(...n(...e[s][1][3]));for(let t=0;t&lt;8;++t){s[t]=[];for(let r=0;r&lt;4;++r)s[t][r]=[],s[t][r][0]=n(e[0][2][t][r],e[1][2][t][r],e[2][2][t][r],e[3][2][t][r]),s[t][r][1]=[],s[t][r][1].push(...n(...s[t][r][0][0])),s[t][r][1].push(...n(...s[t][r][0][1])),s[t][r][2]=[],s[t][r][2].push(...n(...s[t][r][1][0])),s[t][r][2].push(...n(...s[t][r][1][1])),s[t][r][2].push(...n(...s[t][r][1][2])),s[t][r][2].push(...n(...s[t][r][1][3]))}for(let t=0;t&lt;8;++t){r[t]=[];for(let e=0;e&lt;8;++e)r[t][e]=[],r[t][e][0]=s[t][0][2][e],r[t][e][1]=s[t][1][2][e],r[t][e][2]=s[t][2][2][e],r[t][e][3]=s[t][3][2][e]}return r};class x{constructor(t,e){this.x=t||0,this.y=e||0}toString(){return`(x=${this.x}, y=${this.y})`}clone(){return new x(this.x,this.y)}add(t){return new x(this.x+t.x,this.y+t.y)}scale(t){return void 0===t.x?new x(this.x*t,this.y*t):new x(this.x*t.x,this.y*t.y)}distSquared(t){let e=this.x-t.x,s=this.y-t.y;return e*e+s*s}transform(t){let e=this.x*t.a+this.y*t.c+t.e,s=this.x*t.b+this.y*t.d+t.f;return new x(e,s)}}class g{constructor(t,e,s,r,n,o){void 0===t?(this.a=1,this.b=0,this.c=0,this.d=1,this.e=0,this.f=0):(this.a=t,this.b=e,this.c=s,this.d=r,this.e=n,this.f=o)}toString(){return`affine: ${this.a} ${this.c} ${this.e} \n       ${this.b} ${this.d} ${this.f}`}append(t){t instanceof g||console.error(&quot;mesh.js: argument to Affine.append is not affine!&quot;);let e=this.a*t.a+this.c*t.b,s=this.b*t.a+this.d*t.b,r=this.a*t.c+this.c*t.d,n=this.b*t.c+this.d*t.d,o=this.a*t.e+this.c*t.f+this.e,i=this.b*t.e+this.d*t.f+this.f;return new g(e,s,r,n,o,i)}}class w{constructor(t,e){this.nodes=t,this.colors=e}paintCurve(t,e){if(o(this.nodes)&gt;r){const s=n(...this.nodes);let r=[[],[]],o=[[],[]];for(let t=0;t&lt;4;++t)r[0][t]=this.colors[0][t],r[1][t]=(this.colors[0][t]+this.colors[1][t])/2,o[0][t]=r[1][t],o[1][t]=this.colors[1][t];let i=new w(s[0],r),a=new w(s[1],o);i.paintCurve(t,e),a.paintCurve(t,e)}else{let s=Math.round(this.nodes[0].x);if(s&gt;=0&amp;&amp;s&lt;e){let r=4*(~~this.nodes[0].y*e+s);t[r]=Math.round(this.colors[0][0]),t[r+1]=Math.round(this.colors[0][1]),t[r+2]=Math.round(this.colors[0][2]),t[r+3]=Math.round(this.colors[0][3])}}}}class m{constructor(t,e){this.nodes=t,this.colors=e}split(){let t=[[],[],[],[]],e=[[],[],[],[]],s=[[[],[]],[[],[]]],r=[[[],[]],[[],[]]];for(let s=0;s&lt;4;++s){const r=n(this.nodes[0][s],this.nodes[1][s],this.nodes[2][s],this.nodes[3][s]);t[0][s]=r[0][0],t[1][s]=r[0][1],t[2][s]=r[0][2],t[3][s]=r[0][3],e[0][s]=r[1][0],e[1][s]=r[1][1],e[2][s]=r[1][2],e[3][s]=r[1][3]}for(let t=0;t&lt;4;++t)s[0][0][t]=this.colors[0][0][t],s[0][1][t]=this.colors[0][1][t],s[1][0][t]=(this.colors[0][0][t]+this.colors[1][0][t])/2,s[1][1][t]=(this.colors[0][1][t]+this.colors[1][1][t])/2,r[0][0][t]=s[1][0][t],r[0][1][t]=s[1][1][t],r[1][0][t]=this.colors[1][0][t],r[1][1][t]=this.colors[1][1][t];return[new m(t,s),new m(e,r)]}paint(t,e){let s,n=!1;for(let t=0;t&lt;4;++t)if((s=o([this.nodes[0][t],this.nodes[1][t],this.nodes[2][t],this.nodes[3][t]]))&gt;r){n=!0;break}if(n){let s=this.split();s[0].paint(t,e),s[1].paint(t,e)}else{new w([...this.nodes[0]],[...this.colors[0]]).paintCurve(t,e)}}}class b{constructor(t){this.readMesh(t),this.type=t.getAttribute(&quot;type&quot;)||&quot;bilinear&quot;}readMesh(t){let e=[[]],s=[[]],r=Number(t.getAttribute(&quot;x&quot;)),n=Number(t.getAttribute(&quot;y&quot;));e[0][0]=new x(r,n);let o=t.children;for(let t=0,r=o.length;t&lt;r;++t){e[3*t+1]=[],e[3*t+2]=[],e[3*t+3]=[],s[t+1]=[];let r=o[t].children;for(let n=0,o=r.length;n&lt;o;++n){let o=r[n].children;for(let r=0,i=o.length;r&lt;i;++r){let i=r;0!==t&amp;&amp;++i;let h,d=o[r].getAttribute(&quot;path&quot;),c=&quot;l&quot;;null!=d&amp;&amp;(c=(h=d.match(/\s*([lLcC])\s*(.*)/))[1]);let u=l(h[2]);switch(c){case&quot;l&quot;:0===i?(e[3*t][3*n+3]=u[0].add(e[3*t][3*n]),e[3*t][3*n+1]=a(e[3*t][3*n],e[3*t][3*n+3]),e[3*t][3*n+2]=a(e[3*t][3*n+3],e[3*t][3*n])):1===i?(e[3*t+3][3*n+3]=u[0].add(e[3*t][3*n+3]),e[3*t+1][3*n+3]=a(e[3*t][3*n+3],e[3*t+3][3*n+3]),e[3*t+2][3*n+3]=a(e[3*t+3][3*n+3],e[3*t][3*n+3])):2===i?(0===n&amp;&amp;(e[3*t+3][3*n+0]=u[0].add(e[3*t+3][3*n+3])),e[3*t+3][3*n+1]=a(e[3*t+3][3*n],e[3*t+3][3*n+3]),e[3*t+3][3*n+2]=a(e[3*t+3][3*n+3],e[3*t+3][3*n])):(e[3*t+1][3*n]=a(e[3*t][3*n],e[3*t+3][3*n]),e[3*t+2][3*n]=a(e[3*t+3][3*n],e[3*t][3*n]));break;case&quot;L&quot;:0===i?(e[3*t][3*n+3]=u[0],e[3*t][3*n+1]=a(e[3*t][3*n],e[3*t][3*n+3]),e[3*t][3*n+2]=a(e[3*t][3*n+3],e[3*t][3*n])):1===i?(e[3*t+3][3*n+3]=u[0],e[3*t+1][3*n+3]=a(e[3*t][3*n+3],e[3*t+3][3*n+3]),e[3*t+2][3*n+3]=a(e[3*t+3][3*n+3],e[3*t][3*n+3])):2===i?(0===n&amp;&amp;(e[3*t+3][3*n+0]=u[0]),e[3*t+3][3*n+1]=a(e[3*t+3][3*n],e[3*t+3][3*n+3]),e[3*t+3][3*n+2]=a(e[3*t+3][3*n+3],e[3*t+3][3*n])):(e[3*t+1][3*n]=a(e[3*t][3*n],e[3*t+3][3*n]),e[3*t+2][3*n]=a(e[3*t+3][3*n],e[3*t][3*n]));break;case&quot;c&quot;:0===i?(e[3*t][3*n+1]=u[0].add(e[3*t][3*n]),e[3*t][3*n+2]=u[1].add(e[3*t][3*n]),e[3*t][3*n+3]=u[2].add(e[3*t][3*n])):1===i?(e[3*t+1][3*n+3]=u[0].add(e[3*t][3*n+3]),e[3*t+2][3*n+3]=u[1].add(e[3*t][3*n+3]),e[3*t+3][3*n+3]=u[2].add(e[3*t][3*n+3])):2===i?(e[3*t+3][3*n+2]=u[0].add(e[3*t+3][3*n+3]),e[3*t+3][3*n+1]=u[1].add(e[3*t+3][3*n+3]),0===n&amp;&amp;(e[3*t+3][3*n+0]=u[2].add(e[3*t+3][3*n+3]))):(e[3*t+2][3*n]=u[0].add(e[3*t+3][3*n]),e[3*t+1][3*n]=u[1].add(e[3*t+3][3*n]));break;case&quot;C&quot;:0===i?(e[3*t][3*n+1]=u[0],e[3*t][3*n+2]=u[1],e[3*t][3*n+3]=u[2]):1===i?(e[3*t+1][3*n+3]=u[0],e[3*t+2][3*n+3]=u[1],e[3*t+3][3*n+3]=u[2]):2===i?(e[3*t+3][3*n+2]=u[0],e[3*t+3][3*n+1]=u[1],0===n&amp;&amp;(e[3*t+3][3*n+0]=u[2])):(e[3*t+2][3*n]=u[0],e[3*t+1][3*n]=u[1]);break;default:console.error(&quot;mesh.js: &quot;+c+&quot; invalid path type.&quot;)}if(0===t&amp;&amp;0===n||r&gt;0){let e=window.getComputedStyle(o[r]).stopColor.match(/^rgb\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)$/i),a=window.getComputedStyle(o[r]).stopOpacity,h=255;a&amp;&amp;(h=Math.floor(255*a)),e&amp;&amp;(0===i?(s[t][n]=[],s[t][n][0]=Math.floor(e[1]),s[t][n][1]=Math.floor(e[2]),s[t][n][2]=Math.floor(e[3]),s[t][n][3]=h):1===i?(s[t][n+1]=[],s[t][n+1][0]=Math.floor(e[1]),s[t][n+1][1]=Math.floor(e[2]),s[t][n+1][2]=Math.floor(e[3]),s[t][n+1][3]=h):2===i?(s[t+1][n+1]=[],s[t+1][n+1][0]=Math.floor(e[1]),s[t+1][n+1][1]=Math.floor(e[2]),s[t+1][n+1][2]=Math.floor(e[3]),s[t+1][n+1][3]=h):3===i&amp;&amp;(s[t+1][n]=[],s[t+1][n][0]=Math.floor(e[1]),s[t+1][n][1]=Math.floor(e[2]),s[t+1][n][2]=Math.floor(e[3]),s[t+1][n][3]=h))}}e[3*t+1][3*n+1]=new x,e[3*t+1][3*n+2]=new x,e[3*t+2][3*n+1]=new x,e[3*t+2][3*n+2]=new x,e[3*t+1][3*n+1].x=(-4*e[3*t][3*n].x+6*(e[3*t][3*n+1].x+e[3*t+1][3*n].x)+-2*(e[3*t][3*n+3].x+e[3*t+3][3*n].x)+3*(e[3*t+3][3*n+1].x+e[3*t+1][3*n+3].x)+-1*e[3*t+3][3*n+3].x)/9,e[3*t+1][3*n+2].x=(-4*e[3*t][3*n+3].x+6*(e[3*t][3*n+2].x+e[3*t+1][3*n+3].x)+-2*(e[3*t][3*n].x+e[3*t+3][3*n+3].x)+3*(e[3*t+3][3*n+2].x+e[3*t+1][3*n].x)+-1*e[3*t+3][3*n].x)/9,e[3*t+2][3*n+1].x=(-4*e[3*t+3][3*n].x+6*(e[3*t+3][3*n+1].x+e[3*t+2][3*n].x)+-2*(e[3*t+3][3*n+3].x+e[3*t][3*n].x)+3*(e[3*t][3*n+1].x+e[3*t+2][3*n+3].x)+-1*e[3*t][3*n+3].x)/9,e[3*t+2][3*n+2].x=(-4*e[3*t+3][3*n+3].x+6*(e[3*t+3][3*n+2].x+e[3*t+2][3*n+3].x)+-2*(e[3*t+3][3*n].x+e[3*t][3*n+3].x)+3*(e[3*t][3*n+2].x+e[3*t+2][3*n].x)+-1*e[3*t][3*n].x)/9,e[3*t+1][3*n+1].y=(-4*e[3*t][3*n].y+6*(e[3*t][3*n+1].y+e[3*t+1][3*n].y)+-2*(e[3*t][3*n+3].y+e[3*t+3][3*n].y)+3*(e[3*t+3][3*n+1].y+e[3*t+1][3*n+3].y)+-1*e[3*t+3][3*n+3].y)/9,e[3*t+1][3*n+2].y=(-4*e[3*t][3*n+3].y+6*(e[3*t][3*n+2].y+e[3*t+1][3*n+3].y)+-2*(e[3*t][3*n].y+e[3*t+3][3*n+3].y)+3*(e[3*t+3][3*n+2].y+e[3*t+1][3*n].y)+-1*e[3*t+3][3*n].y)/9,e[3*t+2][3*n+1].y=(-4*e[3*t+3][3*n].y+6*(e[3*t+3][3*n+1].y+e[3*t+2][3*n].y)+-2*(e[3*t+3][3*n+3].y+e[3*t][3*n].y)+3*(e[3*t][3*n+1].y+e[3*t+2][3*n+3].y)+-1*e[3*t][3*n+3].y)/9,e[3*t+2][3*n+2].y=(-4*e[3*t+3][3*n+3].y+6*(e[3*t+3][3*n+2].y+e[3*t+2][3*n+3].y)+-2*(e[3*t+3][3*n].y+e[3*t][3*n+3].y)+3*(e[3*t][3*n+2].y+e[3*t+2][3*n].y)+-1*e[3*t][3*n].y)/9}}this.nodes=e,this.colors=s}paintMesh(t,e){let s=(this.nodes.length-1)/3,r=(this.nodes[0].length-1)/3;if(&quot;bilinear&quot;===this.type||s&lt;2||r&lt;2){let n;for(let o=0;o&lt;s;++o)for(let s=0;s&lt;r;++s){let r=[];for(let t=3*o,e=3*o+4;t&lt;e;++t)r.push(this.nodes[t].slice(3*s,3*s+4));let i=[];i.push(this.colors[o].slice(s,s+2)),i.push(this.colors[o+1].slice(s,s+2)),(n=new m(r,i)).paint(t,e)}}else{let n,o,a,h,l,d,u;const x=s,g=r;s++,r++;let w=new Array(s);for(let t=0;t&lt;s;++t){w[t]=new Array(r);for(let e=0;e&lt;r;++e)w[t][e]=[],w[t][e][0]=this.nodes[3*t][3*e],w[t][e][1]=this.colors[t][e]}for(let t=0;t&lt;s;++t)for(let e=0;e&lt;r;++e)0!==t&amp;&amp;t!==x&amp;&amp;(n=i(w[t-1][e][0],w[t][e][0]),o=i(w[t+1][e][0],w[t][e][0]),w[t][e][2]=c(w[t-1][e][1],w[t][e][1],w[t+1][e][1],n,o)),0!==e&amp;&amp;e!==g&amp;&amp;(n=i(w[t][e-1][0],w[t][e][0]),o=i(w[t][e+1][0],w[t][e][0]),w[t][e][3]=c(w[t][e-1][1],w[t][e][1],w[t][e+1][1],n,o));for(let t=0;t&lt;r;++t){w[0][t][2]=[],w[x][t][2]=[];for(let e=0;e&lt;4;++e)n=i(w[1][t][0],w[0][t][0]),o=i(w[x][t][0],w[x-1][t][0]),w[0][t][2][e]=n&gt;0?2*(w[1][t][1][e]-w[0][t][1][e])/n-w[1][t][2][e]:0,w[x][t][2][e]=o&gt;0?2*(w[x][t][1][e]-w[x-1][t][1][e])/o-w[x-1][t][2][e]:0}for(let t=0;t&lt;s;++t){w[t][0][3]=[],w[t][g][3]=[];for(let e=0;e&lt;4;++e)n=i(w[t][1][0],w[t][0][0]),o=i(w[t][g][0],w[t][g-1][0]),w[t][0][3][e]=n&gt;0?2*(w[t][1][1][e]-w[t][0][1][e])/n-w[t][1][3][e]:0,w[t][g][3][e]=o&gt;0?2*(w[t][g][1][e]-w[t][g-1][1][e])/o-w[t][g-1][3][e]:0}for(let s=0;s&lt;x;++s)for(let r=0;r&lt;g;++r){let n=i(w[s][r][0],w[s+1][r][0]),o=i(w[s][r+1][0],w[s+1][r+1][0]),c=i(w[s][r][0],w[s][r+1][0]),x=i(w[s+1][r][0],w[s+1][r+1][0]),g=[[],[],[],[]];for(let t=0;t&lt;4;++t){(d=[])[0]=w[s][r][1][t],d[1]=w[s+1][r][1][t],d[2]=w[s][r+1][1][t],d[3]=w[s+1][r+1][1][t],d[4]=w[s][r][2][t]*n,d[5]=w[s+1][r][2][t]*n,d[6]=w[s][r+1][2][t]*o,d[7]=w[s+1][r+1][2][t]*o,d[8]=w[s][r][3][t]*c,d[9]=w[s+1][r][3][t]*x,d[10]=w[s][r+1][3][t]*c,d[11]=w[s+1][r+1][3][t]*x,d[12]=0,d[13]=0,d[14]=0,d[15]=0,u=f(d);for(let e=0;e&lt;9;++e){g[t][e]=[];for(let s=0;s&lt;9;++s)g[t][e][s]=p(u,e/8,s/8),g[t][e][s]&gt;255?g[t][e][s]=255:g[t][e][s]&lt;0&amp;&amp;(g[t][e][s]=0)}}h=[];for(let t=3*s,e=3*s+4;t&lt;e;++t)h.push(this.nodes[t].slice(3*r,3*r+4));l=y(h);for(let s=0;s&lt;8;++s)for(let r=0;r&lt;8;++r)(a=new m(l[s][r],[[[g[0][s][r],g[1][s][r],g[2][s][r],g[3][s][r]],[g[0][s][r+1],g[1][s][r+1],g[2][s][r+1],g[3][s][r+1]]],[[g[0][s+1][r],g[1][s+1][r],g[2][s+1][r],g[3][s+1][r]],[g[0][s+1][r+1],g[1][s+1][r+1],g[2][s+1][r+1],g[3][s+1][r+1]]]])).paint(t,e)}}}transform(t){if(t instanceof x)for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].add(t);else if(t instanceof g)for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].transform(t)}scale(t){for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].scale(t)}}document.querySelectorAll(&quot;rect,circle,ellipse,path,text&quot;).forEach((r,n)=&gt;{let o=r.getAttribute(&quot;id&quot;);o||(o=&quot;patchjs_shape&quot;+n,r.setAttribute(&quot;id&quot;,o));const i=r.style.fill.match(/^url\(\s*&quot;?\s*#([^\s&quot;]+)&quot;?\s*\)/),a=r.style.stroke.match(/^url\(\s*&quot;?\s*#([^\s&quot;]+)&quot;?\s*\)/);if(i&amp;&amp;i[1]){const a=document.getElementById(i[1]);if(a&amp;&amp;&quot;meshgradient&quot;===a.nodeName){const i=r.getBBox();let l=document.createElementNS(s,&quot;canvas&quot;);d(l,{width:i.width,height:i.height});const c=l.getContext(&quot;2d&quot;);let u=c.createImageData(i.width,i.height);const f=new b(a);&quot;objectBoundingBox&quot;===a.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;f.scale(new x(i.width,i.height));const p=a.getAttribute(&quot;gradientTransform&quot;);null!=p&amp;&amp;f.transform(h(p)),&quot;userSpaceOnUse&quot;===a.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;f.transform(new x(-i.x,-i.y)),f.paintMesh(u.data,l.width),c.putImageData(u,0,0);const y=document.createElementNS(t,&quot;image&quot;);d(y,{width:i.width,height:i.height,x:i.x,y:i.y});let g=l.toDataURL();y.setAttributeNS(e,&quot;xlink:href&quot;,g),r.parentNode.insertBefore(y,r),r.style.fill=&quot;none&quot;;const w=document.createElementNS(t,&quot;use&quot;);w.setAttributeNS(e,&quot;xlink:href&quot;,&quot;#&quot;+o);const m=&quot;patchjs_clip&quot;+n,M=document.createElementNS(t,&quot;clipPath&quot;);M.setAttribute(&quot;id&quot;,m),M.appendChild(w),r.parentElement.insertBefore(M,r),y.setAttribute(&quot;clip-path&quot;,&quot;url(#&quot;+m+&quot;)&quot;),u=null,l=null,g=null}}if(a&amp;&amp;a[1]){const o=document.getElementById(a[1]);if(o&amp;&amp;&quot;meshgradient&quot;===o.nodeName){const i=parseFloat(r.style.strokeWidth.slice(0,-2))*(parseFloat(r.style.strokeMiterlimit)||parseFloat(r.getAttribute(&quot;stroke-miterlimit&quot;))||1),a=r.getBBox(),l=Math.trunc(a.width+i),c=Math.trunc(a.height+i),u=Math.trunc(a.x-i/2),f=Math.trunc(a.y-i/2);let p=document.createElementNS(s,&quot;canvas&quot;);d(p,{width:l,height:c});const y=p.getContext(&quot;2d&quot;);let g=y.createImageData(l,c);const w=new b(o);&quot;objectBoundingBox&quot;===o.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;w.scale(new x(l,c));const m=o.getAttribute(&quot;gradientTransform&quot;);null!=m&amp;&amp;w.transform(h(m)),&quot;userSpaceOnUse&quot;===o.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;w.transform(new x(-u,-f)),w.paintMesh(g.data,p.width),y.putImageData(g,0,0);const M=document.createElementNS(t,&quot;image&quot;);d(M,{width:l,height:c,x:0,y:0});let S=p.toDataURL();M.setAttributeNS(e,&quot;xlink:href&quot;,S);const k=&quot;pattern_clip&quot;+n,A=document.createElementNS(t,&quot;pattern&quot;);d(A,{id:k,patternUnits:&quot;userSpaceOnUse&quot;,width:l,height:c,x:u,y:f}),A.appendChild(M),o.parentNode.appendChild(A),r.style.stroke=&quot;url(#&quot;+k+&quot;)&quot;,g=null,p=null,S=null}}})}();
</script></svg>
