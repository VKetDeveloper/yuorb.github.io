<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- Created with Inkscape (http://www.inkscape.org/) -->

<svg
   xml:space="preserve"
   id="SVGRoot"
   version="1.1"
   viewBox="0 0 1920 1080"
   height="1080"
   width="1920"
   xmlns:xlink="http://www.w3.org/1999/xlink"
   xmlns="http://www.w3.org/2000/svg"
   xmlns:svg="http://www.w3.org/2000/svg"
   xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
   xmlns:cc="http://creativecommons.org/ns#"
   xmlns:dc="http://purl.org/dc/elements/1.1/"><title
     id="title11848">spacetime</title><defs
     id="defs16"><linearGradient
       id="linearGradient1"><stop
         style="stop-color:#fdafb5;stop-opacity:0.98823529;"
         offset="0"
         id="stop2" /><stop
         style="stop-color:#ff62b9;stop-opacity:0.99607843;"
         offset="1"
         id="stop1" /></linearGradient><linearGradient
       id="linearGradient15548"><stop
         style="stop-color:#000000;stop-opacity:1;"
         offset="0"
         id="stop15544" /><stop
         style="stop-color:#ffffff;stop-opacity:0;"
         offset="1"
         id="stop15546" /></linearGradient><filter
       style="color-interpolation-filters:sRGB"
       id="filter50759"
       x="-0.01540026"
       y="-0.018924136"
       width="1.0312758"
       height="1.036397"><feColorMatrix
         values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 -0.21 -0.72 -0.07 1 0 "
         result="result1"
         id="feColorMatrix50727" /><feColorMatrix
         result="result3"
         values="1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 2 -1 "
         id="feColorMatrix50729" /><feColorMatrix
         values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.21 0.72 0.07 0 0 "
         in="SourceGraphic"
         result="result2"
         id="feColorMatrix50731" /><feColorMatrix
         result="result9"
         values="1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 1.5 -0.5 "
         id="feColorMatrix50733" /><feMerge
         result="result11"
         id="feMerge50739"><feMergeNode
           in="result3"
           id="feMergeNode50735" /><feMergeNode
           in="result9"
           id="feMergeNode50737" /></feMerge><feFlood
         flood-opacity="1"
         flood-color="rgb(186,22,91)"
         result="result10"
         id="feFlood50741" /><feComposite
         in2="result11"
         result="result12"
         operator="out"
         id="feComposite50743" /><feFlood
         flood-opacity="1"
         result="result13"
         flood-color="rgb(1,171,171)"
         id="feFlood50745" /><feComposite
         in2="result3"
         result="result14"
         operator="in"
         id="feComposite50747" /><feComposite
         in2="result12"
         result="result17"
         k3="1"
         k2="1"
         operator="arithmetic"
         id="feComposite50749"
         k1="0"
         k4="0" /><feFlood
         flood-opacity="1"
         result="result15"
         flood-color="rgb(255,255,0)"
         id="feFlood50751" /><feComposite
         in2="result9"
         result="result16"
         operator="in"
         id="feComposite50753" /><feComposite
         in2="result17"
         result="result18"
         k3="1"
         k2="1"
         operator="arithmetic"
         id="feComposite50755"
         k1="0"
         k4="0" /><feComposite
         in2="SourceGraphic"
         operator="in"
         id="feComposite50757"
         result="fbSourceGraphic" /><feColorMatrix
         result="fbSourceGraphicAlpha"
         in="fbSourceGraphic"
         values="0 0 0 -1 0 0 0 0 -1 0 0 0 0 -1 0 0 0 0 1 0"
         id="feColorMatrix50907" /><feColorMatrix
         id="feColorMatrix50909"
         type="luminanceToAlpha"
         result="colormatrix1"
         in="fbSourceGraphic" /><feFlood
         id="feFlood50911"
         flood-opacity="0.87451"
         flood-color="rgb(240,222,204)"
         result="flood1" /><feComposite
         in2="colormatrix1"
         id="feComposite50913"
         operator="out"
         result="composite1" /><feFlood
         id="feFlood50915"
         flood-opacity="1"
         flood-color="rgb(250,139,217)"
         result="flood2" /><feComposite
         in2="colormatrix1"
         id="feComposite50917"
         result="composite2"
         operator="in" /><feComposite
         in2="composite1"
         id="feComposite50919"
         in="composite2"
         k2="1"
         k3="1"
         operator="arithmetic"
         result="composite3"
         k1="0"
         k4="0" /><feColorMatrix
         id="feColorMatrix50921"
         in="composite3"
         type="matrix"
         values="2 -1 0 0 0 0 2 -1 0 0 -1 0 2 0 0 0 0 0 1 0 "
         result="colormatrix2" /><feComposite
         in2="composite3"
         id="feComposite50923"
         in="colormatrix2"
         operator="arithmetic"
         k2="0.915888"
         result="composite4"
         k1="0"
         k3="0"
         k4="0" /><feBlend
         in2="composite3"
         id="feBlend50925"
         in="composite4"
         mode="normal"
         result="blend" /><feComposite
         in2="fbSourceGraphic"
         id="feComposite50927"
         operator="in" /></filter><linearGradient
       xlink:href="#linearGradient15548"
       id="linearGradient54096"
       gradientUnits="userSpaceOnUse"
       gradientTransform="rotate(5,2824.2047,-45067.011)"
       x1="4465.7573"
       y1="675.64801"
       x2="4964.8179"
       y2="104.8753" /><script
       id="mesh_polyfill-9"
       type="text/javascript">
!function(){const t=&quot;http://www.w3.org/2000/svg&quot;,e=&quot;http://www.w3.org/1999/xlink&quot;,s=&quot;http://www.w3.org/1999/xhtml&quot;,r=2;if(document.createElementNS(t,&quot;meshgradient&quot;).x)return;const n=(t,e,s,r)=&gt;{let n=new x(.5*(e.x+s.x),.5*(e.y+s.y)),o=new x(.5*(t.x+e.x),.5*(t.y+e.y)),i=new x(.5*(s.x+r.x),.5*(s.y+r.y)),a=new x(.5*(n.x+o.x),.5*(n.y+o.y)),h=new x(.5*(n.x+i.x),.5*(n.y+i.y)),l=new x(.5*(a.x+h.x),.5*(a.y+h.y));return[[t,o,a,l],[l,h,i,r]]},o=t=&gt;{let e=t[0].distSquared(t[1]),s=t[2].distSquared(t[3]),r=.25*t[0].distSquared(t[2]),n=.25*t[1].distSquared(t[3]),o=e&gt;s?e:s,i=r&gt;n?r:n;return 18*(o&gt;i?o:i)},i=(t,e)=&gt;Math.sqrt(t.distSquared(e)),a=(t,e)=&gt;t.scale(2/3).add(e.scale(1/3)),h=t=&gt;{let e,s,r,n,o,i,a,h=new g;return t.match(/(\w+\(\s*[^)]+\))+/g).forEach(t=&gt;{let l=t.match(/[\w.-]+/g),d=l.shift();switch(d){case&quot;translate&quot;:2===l.length?e=new g(1,0,0,1,l[0],l[1]):(console.error(&quot;mesh.js: translate does not have 2 arguments!&quot;),e=new g(1,0,0,1,0,0)),h=h.append(e);break;case&quot;scale&quot;:1===l.length?s=new g(l[0],0,0,l[0],0,0):2===l.length?s=new g(l[0],0,0,l[1],0,0):(console.error(&quot;mesh.js: scale does not have 1 or 2 arguments!&quot;),s=new g(1,0,0,1,0,0)),h=h.append(s);break;case&quot;rotate&quot;:if(3===l.length&amp;&amp;(e=new g(1,0,0,1,l[1],l[2]),h=h.append(e)),l[0]){r=l[0]*Math.PI/180;let t=Math.cos(r),e=Math.sin(r);Math.abs(t)&lt;1e-16&amp;&amp;(t=0),Math.abs(e)&lt;1e-16&amp;&amp;(e=0),a=new g(t,e,-e,t,0,0),h=h.append(a)}else console.error(&quot;math.js: No argument to rotate transform!&quot;);3===l.length&amp;&amp;(e=new g(1,0,0,1,-l[1],-l[2]),h=h.append(e));break;case&quot;skewX&quot;:l[0]?(r=l[0]*Math.PI/180,n=Math.tan(r),o=new g(1,0,n,1,0,0),h=h.append(o)):console.error(&quot;math.js: No argument to skewX transform!&quot;);break;case&quot;skewY&quot;:l[0]?(r=l[0]*Math.PI/180,n=Math.tan(r),i=new g(1,n,0,1,0,0),h=h.append(i)):console.error(&quot;math.js: No argument to skewY transform!&quot;);break;case&quot;matrix&quot;:6===l.length?h=h.append(new g(...l)):console.error(&quot;math.js: Incorrect number of arguments for matrix!&quot;);break;default:console.error(&quot;mesh.js: Unhandled transform type: &quot;+d)}}),h},l=t=&gt;{let e=[],s=t.split(/[ ,]+/);for(let t=0,r=s.length-1;t&lt;r;t+=2)e.push(new x(parseFloat(s[t]),parseFloat(s[t+1])));return e},d=(t,e)=&gt;{for(let s in e)t.setAttribute(s,e[s])},c=(t,e,s,r,n)=&gt;{let o,i,a=[0,0,0,0];for(let h=0;h&lt;3;++h)e[h]&lt;t[h]&amp;&amp;e[h]&lt;s[h]||t[h]&lt;e[h]&amp;&amp;s[h]&lt;e[h]?a[h]=0:(a[h]=.5*((e[h]-t[h])/r+(s[h]-e[h])/n),o=Math.abs(3*(e[h]-t[h])/r),i=Math.abs(3*(s[h]-e[h])/n),a[h]&gt;o?a[h]=o:a[h]&gt;i&amp;&amp;(a[h]=i));return a},u=[[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0],[-3,3,0,0,-2,-1,0,0,0,0,0,0,0,0,0,0],[2,-2,0,0,1,1,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0],[0,0,0,0,0,0,0,0,-3,3,0,0,-2,-1,0,0],[0,0,0,0,0,0,0,0,2,-2,0,0,1,1,0,0],[-3,0,3,0,0,0,0,0,-2,0,-1,0,0,0,0,0],[0,0,0,0,-3,0,3,0,0,0,0,0,-2,0,-1,0],[9,-9,-9,9,6,3,-6,-3,6,-6,3,-3,4,2,2,1],[-6,6,6,-6,-3,-3,3,3,-4,4,-2,2,-2,-2,-1,-1],[2,0,-2,0,0,0,0,0,1,0,1,0,0,0,0,0],[0,0,0,0,2,0,-2,0,0,0,0,0,1,0,1,0],[-6,6,6,-6,-4,-2,4,2,-3,3,-3,3,-2,-1,-2,-1],[4,-4,-4,4,2,2,-2,-2,2,-2,2,-2,1,1,1,1]],f=t=&gt;{let e=[];for(let s=0;s&lt;16;++s){e[s]=0;for(let r=0;r&lt;16;++r)e[s]+=u[s][r]*t[r]}return e},p=(t,e,s)=&gt;{const r=e*e,n=s*s,o=e*e*e,i=s*s*s;return t[0]+t[1]*e+t[2]*r+t[3]*o+t[4]*s+t[5]*s*e+t[6]*s*r+t[7]*s*o+t[8]*n+t[9]*n*e+t[10]*n*r+t[11]*n*o+t[12]*i+t[13]*i*e+t[14]*i*r+t[15]*i*o},y=t=&gt;{let e=[],s=[],r=[];for(let s=0;s&lt;4;++s)e[s]=[],e[s][0]=n(t[0][s],t[1][s],t[2][s],t[3][s]),e[s][1]=[],e[s][1].push(...n(...e[s][0][0])),e[s][1].push(...n(...e[s][0][1])),e[s][2]=[],e[s][2].push(...n(...e[s][1][0])),e[s][2].push(...n(...e[s][1][1])),e[s][2].push(...n(...e[s][1][2])),e[s][2].push(...n(...e[s][1][3]));for(let t=0;t&lt;8;++t){s[t]=[];for(let r=0;r&lt;4;++r)s[t][r]=[],s[t][r][0]=n(e[0][2][t][r],e[1][2][t][r],e[2][2][t][r],e[3][2][t][r]),s[t][r][1]=[],s[t][r][1].push(...n(...s[t][r][0][0])),s[t][r][1].push(...n(...s[t][r][0][1])),s[t][r][2]=[],s[t][r][2].push(...n(...s[t][r][1][0])),s[t][r][2].push(...n(...s[t][r][1][1])),s[t][r][2].push(...n(...s[t][r][1][2])),s[t][r][2].push(...n(...s[t][r][1][3]))}for(let t=0;t&lt;8;++t){r[t]=[];for(let e=0;e&lt;8;++e)r[t][e]=[],r[t][e][0]=s[t][0][2][e],r[t][e][1]=s[t][1][2][e],r[t][e][2]=s[t][2][2][e],r[t][e][3]=s[t][3][2][e]}return r};class x{constructor(t,e){this.x=t||0,this.y=e||0}toString(){return`(x=${this.x}, y=${this.y})`}clone(){return new x(this.x,this.y)}add(t){return new x(this.x+t.x,this.y+t.y)}scale(t){return void 0===t.x?new x(this.x*t,this.y*t):new x(this.x*t.x,this.y*t.y)}distSquared(t){let e=this.x-t.x,s=this.y-t.y;return e*e+s*s}transform(t){let e=this.x*t.a+this.y*t.c+t.e,s=this.x*t.b+this.y*t.d+t.f;return new x(e,s)}}class g{constructor(t,e,s,r,n,o){void 0===t?(this.a=1,this.b=0,this.c=0,this.d=1,this.e=0,this.f=0):(this.a=t,this.b=e,this.c=s,this.d=r,this.e=n,this.f=o)}toString(){return`affine: ${this.a} ${this.c} ${this.e} \n       ${this.b} ${this.d} ${this.f}`}append(t){t instanceof g||console.error(&quot;mesh.js: argument to Affine.append is not affine!&quot;);let e=this.a*t.a+this.c*t.b,s=this.b*t.a+this.d*t.b,r=this.a*t.c+this.c*t.d,n=this.b*t.c+this.d*t.d,o=this.a*t.e+this.c*t.f+this.e,i=this.b*t.e+this.d*t.f+this.f;return new g(e,s,r,n,o,i)}}class w{constructor(t,e){this.nodes=t,this.colors=e}paintCurve(t,e){if(o(this.nodes)&gt;r){const s=n(...this.nodes);let r=[[],[]],o=[[],[]];for(let t=0;t&lt;4;++t)r[0][t]=this.colors[0][t],r[1][t]=(this.colors[0][t]+this.colors[1][t])/2,o[0][t]=r[1][t],o[1][t]=this.colors[1][t];let i=new w(s[0],r),a=new w(s[1],o);i.paintCurve(t,e),a.paintCurve(t,e)}else{let s=Math.round(this.nodes[0].x);if(s&gt;=0&amp;&amp;s&lt;e){let r=4*(~~this.nodes[0].y*e+s);t[r]=Math.round(this.colors[0][0]),t[r+1]=Math.round(this.colors[0][1]),t[r+2]=Math.round(this.colors[0][2]),t[r+3]=Math.round(this.colors[0][3])}}}}class m{constructor(t,e){this.nodes=t,this.colors=e}split(){let t=[[],[],[],[]],e=[[],[],[],[]],s=[[[],[]],[[],[]]],r=[[[],[]],[[],[]]];for(let s=0;s&lt;4;++s){const r=n(this.nodes[0][s],this.nodes[1][s],this.nodes[2][s],this.nodes[3][s]);t[0][s]=r[0][0],t[1][s]=r[0][1],t[2][s]=r[0][2],t[3][s]=r[0][3],e[0][s]=r[1][0],e[1][s]=r[1][1],e[2][s]=r[1][2],e[3][s]=r[1][3]}for(let t=0;t&lt;4;++t)s[0][0][t]=this.colors[0][0][t],s[0][1][t]=this.colors[0][1][t],s[1][0][t]=(this.colors[0][0][t]+this.colors[1][0][t])/2,s[1][1][t]=(this.colors[0][1][t]+this.colors[1][1][t])/2,r[0][0][t]=s[1][0][t],r[0][1][t]=s[1][1][t],r[1][0][t]=this.colors[1][0][t],r[1][1][t]=this.colors[1][1][t];return[new m(t,s),new m(e,r)]}paint(t,e){let s,n=!1;for(let t=0;t&lt;4;++t)if((s=o([this.nodes[0][t],this.nodes[1][t],this.nodes[2][t],this.nodes[3][t]]))&gt;r){n=!0;break}if(n){let s=this.split();s[0].paint(t,e),s[1].paint(t,e)}else{new w([...this.nodes[0]],[...this.colors[0]]).paintCurve(t,e)}}}class b{constructor(t){this.readMesh(t),this.type=t.getAttribute(&quot;type&quot;)||&quot;bilinear&quot;}readMesh(t){let e=[[]],s=[[]],r=Number(t.getAttribute(&quot;x&quot;)),n=Number(t.getAttribute(&quot;y&quot;));e[0][0]=new x(r,n);let o=t.children;for(let t=0,r=o.length;t&lt;r;++t){e[3*t+1]=[],e[3*t+2]=[],e[3*t+3]=[],s[t+1]=[];let r=o[t].children;for(let n=0,o=r.length;n&lt;o;++n){let o=r[n].children;for(let r=0,i=o.length;r&lt;i;++r){let i=r;0!==t&amp;&amp;++i;let h,d=o[r].getAttribute(&quot;path&quot;),c=&quot;l&quot;;null!=d&amp;&amp;(c=(h=d.match(/\s*([lLcC])\s*(.*)/))[1]);let u=l(h[2]);switch(c){case&quot;l&quot;:0===i?(e[3*t][3*n+3]=u[0].add(e[3*t][3*n]),e[3*t][3*n+1]=a(e[3*t][3*n],e[3*t][3*n+3]),e[3*t][3*n+2]=a(e[3*t][3*n+3],e[3*t][3*n])):1===i?(e[3*t+3][3*n+3]=u[0].add(e[3*t][3*n+3]),e[3*t+1][3*n+3]=a(e[3*t][3*n+3],e[3*t+3][3*n+3]),e[3*t+2][3*n+3]=a(e[3*t+3][3*n+3],e[3*t][3*n+3])):2===i?(0===n&amp;&amp;(e[3*t+3][3*n+0]=u[0].add(e[3*t+3][3*n+3])),e[3*t+3][3*n+1]=a(e[3*t+3][3*n],e[3*t+3][3*n+3]),e[3*t+3][3*n+2]=a(e[3*t+3][3*n+3],e[3*t+3][3*n])):(e[3*t+1][3*n]=a(e[3*t][3*n],e[3*t+3][3*n]),e[3*t+2][3*n]=a(e[3*t+3][3*n],e[3*t][3*n]));break;case&quot;L&quot;:0===i?(e[3*t][3*n+3]=u[0],e[3*t][3*n+1]=a(e[3*t][3*n],e[3*t][3*n+3]),e[3*t][3*n+2]=a(e[3*t][3*n+3],e[3*t][3*n])):1===i?(e[3*t+3][3*n+3]=u[0],e[3*t+1][3*n+3]=a(e[3*t][3*n+3],e[3*t+3][3*n+3]),e[3*t+2][3*n+3]=a(e[3*t+3][3*n+3],e[3*t][3*n+3])):2===i?(0===n&amp;&amp;(e[3*t+3][3*n+0]=u[0]),e[3*t+3][3*n+1]=a(e[3*t+3][3*n],e[3*t+3][3*n+3]),e[3*t+3][3*n+2]=a(e[3*t+3][3*n+3],e[3*t+3][3*n])):(e[3*t+1][3*n]=a(e[3*t][3*n],e[3*t+3][3*n]),e[3*t+2][3*n]=a(e[3*t+3][3*n],e[3*t][3*n]));break;case&quot;c&quot;:0===i?(e[3*t][3*n+1]=u[0].add(e[3*t][3*n]),e[3*t][3*n+2]=u[1].add(e[3*t][3*n]),e[3*t][3*n+3]=u[2].add(e[3*t][3*n])):1===i?(e[3*t+1][3*n+3]=u[0].add(e[3*t][3*n+3]),e[3*t+2][3*n+3]=u[1].add(e[3*t][3*n+3]),e[3*t+3][3*n+3]=u[2].add(e[3*t][3*n+3])):2===i?(e[3*t+3][3*n+2]=u[0].add(e[3*t+3][3*n+3]),e[3*t+3][3*n+1]=u[1].add(e[3*t+3][3*n+3]),0===n&amp;&amp;(e[3*t+3][3*n+0]=u[2].add(e[3*t+3][3*n+3]))):(e[3*t+2][3*n]=u[0].add(e[3*t+3][3*n]),e[3*t+1][3*n]=u[1].add(e[3*t+3][3*n]));break;case&quot;C&quot;:0===i?(e[3*t][3*n+1]=u[0],e[3*t][3*n+2]=u[1],e[3*t][3*n+3]=u[2]):1===i?(e[3*t+1][3*n+3]=u[0],e[3*t+2][3*n+3]=u[1],e[3*t+3][3*n+3]=u[2]):2===i?(e[3*t+3][3*n+2]=u[0],e[3*t+3][3*n+1]=u[1],0===n&amp;&amp;(e[3*t+3][3*n+0]=u[2])):(e[3*t+2][3*n]=u[0],e[3*t+1][3*n]=u[1]);break;default:console.error(&quot;mesh.js: &quot;+c+&quot; invalid path type.&quot;)}if(0===t&amp;&amp;0===n||r&gt;0){let e=window.getComputedStyle(o[r]).stopColor.match(/^rgb\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)$/i),a=window.getComputedStyle(o[r]).stopOpacity,h=255;a&amp;&amp;(h=Math.floor(255*a)),e&amp;&amp;(0===i?(s[t][n]=[],s[t][n][0]=Math.floor(e[1]),s[t][n][1]=Math.floor(e[2]),s[t][n][2]=Math.floor(e[3]),s[t][n][3]=h):1===i?(s[t][n+1]=[],s[t][n+1][0]=Math.floor(e[1]),s[t][n+1][1]=Math.floor(e[2]),s[t][n+1][2]=Math.floor(e[3]),s[t][n+1][3]=h):2===i?(s[t+1][n+1]=[],s[t+1][n+1][0]=Math.floor(e[1]),s[t+1][n+1][1]=Math.floor(e[2]),s[t+1][n+1][2]=Math.floor(e[3]),s[t+1][n+1][3]=h):3===i&amp;&amp;(s[t+1][n]=[],s[t+1][n][0]=Math.floor(e[1]),s[t+1][n][1]=Math.floor(e[2]),s[t+1][n][2]=Math.floor(e[3]),s[t+1][n][3]=h))}}e[3*t+1][3*n+1]=new x,e[3*t+1][3*n+2]=new x,e[3*t+2][3*n+1]=new x,e[3*t+2][3*n+2]=new x,e[3*t+1][3*n+1].x=(-4*e[3*t][3*n].x+6*(e[3*t][3*n+1].x+e[3*t+1][3*n].x)+-2*(e[3*t][3*n+3].x+e[3*t+3][3*n].x)+3*(e[3*t+3][3*n+1].x+e[3*t+1][3*n+3].x)+-1*e[3*t+3][3*n+3].x)/9,e[3*t+1][3*n+2].x=(-4*e[3*t][3*n+3].x+6*(e[3*t][3*n+2].x+e[3*t+1][3*n+3].x)+-2*(e[3*t][3*n].x+e[3*t+3][3*n+3].x)+3*(e[3*t+3][3*n+2].x+e[3*t+1][3*n].x)+-1*e[3*t+3][3*n].x)/9,e[3*t+2][3*n+1].x=(-4*e[3*t+3][3*n].x+6*(e[3*t+3][3*n+1].x+e[3*t+2][3*n].x)+-2*(e[3*t+3][3*n+3].x+e[3*t][3*n].x)+3*(e[3*t][3*n+1].x+e[3*t+2][3*n+3].x)+-1*e[3*t][3*n+3].x)/9,e[3*t+2][3*n+2].x=(-4*e[3*t+3][3*n+3].x+6*(e[3*t+3][3*n+2].x+e[3*t+2][3*n+3].x)+-2*(e[3*t+3][3*n].x+e[3*t][3*n+3].x)+3*(e[3*t][3*n+2].x+e[3*t+2][3*n].x)+-1*e[3*t][3*n].x)/9,e[3*t+1][3*n+1].y=(-4*e[3*t][3*n].y+6*(e[3*t][3*n+1].y+e[3*t+1][3*n].y)+-2*(e[3*t][3*n+3].y+e[3*t+3][3*n].y)+3*(e[3*t+3][3*n+1].y+e[3*t+1][3*n+3].y)+-1*e[3*t+3][3*n+3].y)/9,e[3*t+1][3*n+2].y=(-4*e[3*t][3*n+3].y+6*(e[3*t][3*n+2].y+e[3*t+1][3*n+3].y)+-2*(e[3*t][3*n].y+e[3*t+3][3*n+3].y)+3*(e[3*t+3][3*n+2].y+e[3*t+1][3*n].y)+-1*e[3*t+3][3*n].y)/9,e[3*t+2][3*n+1].y=(-4*e[3*t+3][3*n].y+6*(e[3*t+3][3*n+1].y+e[3*t+2][3*n].y)+-2*(e[3*t+3][3*n+3].y+e[3*t][3*n].y)+3*(e[3*t][3*n+1].y+e[3*t+2][3*n+3].y)+-1*e[3*t][3*n+3].y)/9,e[3*t+2][3*n+2].y=(-4*e[3*t+3][3*n+3].y+6*(e[3*t+3][3*n+2].y+e[3*t+2][3*n+3].y)+-2*(e[3*t+3][3*n].y+e[3*t][3*n+3].y)+3*(e[3*t][3*n+2].y+e[3*t+2][3*n].y)+-1*e[3*t][3*n].y)/9}}this.nodes=e,this.colors=s}paintMesh(t,e){let s=(this.nodes.length-1)/3,r=(this.nodes[0].length-1)/3;if(&quot;bilinear&quot;===this.type||s&lt;2||r&lt;2){let n;for(let o=0;o&lt;s;++o)for(let s=0;s&lt;r;++s){let r=[];for(let t=3*o,e=3*o+4;t&lt;e;++t)r.push(this.nodes[t].slice(3*s,3*s+4));let i=[];i.push(this.colors[o].slice(s,s+2)),i.push(this.colors[o+1].slice(s,s+2)),(n=new m(r,i)).paint(t,e)}}else{let n,o,a,h,l,d,u;const x=s,g=r;s++,r++;let w=new Array(s);for(let t=0;t&lt;s;++t){w[t]=new Array(r);for(let e=0;e&lt;r;++e)w[t][e]=[],w[t][e][0]=this.nodes[3*t][3*e],w[t][e][1]=this.colors[t][e]}for(let t=0;t&lt;s;++t)for(let e=0;e&lt;r;++e)0!==t&amp;&amp;t!==x&amp;&amp;(n=i(w[t-1][e][0],w[t][e][0]),o=i(w[t+1][e][0],w[t][e][0]),w[t][e][2]=c(w[t-1][e][1],w[t][e][1],w[t+1][e][1],n,o)),0!==e&amp;&amp;e!==g&amp;&amp;(n=i(w[t][e-1][0],w[t][e][0]),o=i(w[t][e+1][0],w[t][e][0]),w[t][e][3]=c(w[t][e-1][1],w[t][e][1],w[t][e+1][1],n,o));for(let t=0;t&lt;r;++t){w[0][t][2]=[],w[x][t][2]=[];for(let e=0;e&lt;4;++e)n=i(w[1][t][0],w[0][t][0]),o=i(w[x][t][0],w[x-1][t][0]),w[0][t][2][e]=n&gt;0?2*(w[1][t][1][e]-w[0][t][1][e])/n-w[1][t][2][e]:0,w[x][t][2][e]=o&gt;0?2*(w[x][t][1][e]-w[x-1][t][1][e])/o-w[x-1][t][2][e]:0}for(let t=0;t&lt;s;++t){w[t][0][3]=[],w[t][g][3]=[];for(let e=0;e&lt;4;++e)n=i(w[t][1][0],w[t][0][0]),o=i(w[t][g][0],w[t][g-1][0]),w[t][0][3][e]=n&gt;0?2*(w[t][1][1][e]-w[t][0][1][e])/n-w[t][1][3][e]:0,w[t][g][3][e]=o&gt;0?2*(w[t][g][1][e]-w[t][g-1][1][e])/o-w[t][g-1][3][e]:0}for(let s=0;s&lt;x;++s)for(let r=0;r&lt;g;++r){let n=i(w[s][r][0],w[s+1][r][0]),o=i(w[s][r+1][0],w[s+1][r+1][0]),c=i(w[s][r][0],w[s][r+1][0]),x=i(w[s+1][r][0],w[s+1][r+1][0]),g=[[],[],[],[]];for(let t=0;t&lt;4;++t){(d=[])[0]=w[s][r][1][t],d[1]=w[s+1][r][1][t],d[2]=w[s][r+1][1][t],d[3]=w[s+1][r+1][1][t],d[4]=w[s][r][2][t]*n,d[5]=w[s+1][r][2][t]*n,d[6]=w[s][r+1][2][t]*o,d[7]=w[s+1][r+1][2][t]*o,d[8]=w[s][r][3][t]*c,d[9]=w[s+1][r][3][t]*x,d[10]=w[s][r+1][3][t]*c,d[11]=w[s+1][r+1][3][t]*x,d[12]=0,d[13]=0,d[14]=0,d[15]=0,u=f(d);for(let e=0;e&lt;9;++e){g[t][e]=[];for(let s=0;s&lt;9;++s)g[t][e][s]=p(u,e/8,s/8),g[t][e][s]&gt;255?g[t][e][s]=255:g[t][e][s]&lt;0&amp;&amp;(g[t][e][s]=0)}}h=[];for(let t=3*s,e=3*s+4;t&lt;e;++t)h.push(this.nodes[t].slice(3*r,3*r+4));l=y(h);for(let s=0;s&lt;8;++s)for(let r=0;r&lt;8;++r)(a=new m(l[s][r],[[[g[0][s][r],g[1][s][r],g[2][s][r],g[3][s][r]],[g[0][s][r+1],g[1][s][r+1],g[2][s][r+1],g[3][s][r+1]]],[[g[0][s+1][r],g[1][s+1][r],g[2][s+1][r],g[3][s+1][r]],[g[0][s+1][r+1],g[1][s+1][r+1],g[2][s+1][r+1],g[3][s+1][r+1]]]])).paint(t,e)}}}transform(t){if(t instanceof x)for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].add(t);else if(t instanceof g)for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].transform(t)}scale(t){for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].scale(t)}}document.querySelectorAll(&quot;rect,circle,ellipse,path,text&quot;).forEach((r,n)=&gt;{let o=r.getAttribute(&quot;id&quot;);o||(o=&quot;patchjs_shape&quot;+n,r.setAttribute(&quot;id&quot;,o));const i=r.style.fill.match(/^url\(\s*&quot;?\s*#([^\s&quot;]+)&quot;?\s*\)/),a=r.style.stroke.match(/^url\(\s*&quot;?\s*#([^\s&quot;]+)&quot;?\s*\)/);if(i&amp;&amp;i[1]){const a=document.getElementById(i[1]);if(a&amp;&amp;&quot;meshgradient&quot;===a.nodeName){const i=r.getBBox();let l=document.createElementNS(s,&quot;canvas&quot;);d(l,{width:i.width,height:i.height});const c=l.getContext(&quot;2d&quot;);let u=c.createImageData(i.width,i.height);const f=new b(a);&quot;objectBoundingBox&quot;===a.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;f.scale(new x(i.width,i.height));const p=a.getAttribute(&quot;gradientTransform&quot;);null!=p&amp;&amp;f.transform(h(p)),&quot;userSpaceOnUse&quot;===a.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;f.transform(new x(-i.x,-i.y)),f.paintMesh(u.data,l.width),c.putImageData(u,0,0);const y=document.createElementNS(t,&quot;image&quot;);d(y,{width:i.width,height:i.height,x:i.x,y:i.y});let g=l.toDataURL();y.setAttributeNS(e,&quot;xlink:href&quot;,g),r.parentNode.insertBefore(y,r),r.style.fill=&quot;none&quot;;const w=document.createElementNS(t,&quot;use&quot;);w.setAttributeNS(e,&quot;xlink:href&quot;,&quot;#&quot;+o);const m=&quot;patchjs_clip&quot;+n,M=document.createElementNS(t,&quot;clipPath&quot;);M.setAttribute(&quot;id&quot;,m),M.appendChild(w),r.parentElement.insertBefore(M,r),y.setAttribute(&quot;clip-path&quot;,&quot;url(#&quot;+m+&quot;)&quot;),u=null,l=null,g=null}}if(a&amp;&amp;a[1]){const o=document.getElementById(a[1]);if(o&amp;&amp;&quot;meshgradient&quot;===o.nodeName){const i=parseFloat(r.style.strokeWidth.slice(0,-2))*(parseFloat(r.style.strokeMiterlimit)||parseFloat(r.getAttribute(&quot;stroke-miterlimit&quot;))||1),a=r.getBBox(),l=Math.trunc(a.width+i),c=Math.trunc(a.height+i),u=Math.trunc(a.x-i/2),f=Math.trunc(a.y-i/2);let p=document.createElementNS(s,&quot;canvas&quot;);d(p,{width:l,height:c});const y=p.getContext(&quot;2d&quot;);let g=y.createImageData(l,c);const w=new b(o);&quot;objectBoundingBox&quot;===o.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;w.scale(new x(l,c));const m=o.getAttribute(&quot;gradientTransform&quot;);null!=m&amp;&amp;w.transform(h(m)),&quot;userSpaceOnUse&quot;===o.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;w.transform(new x(-u,-f)),w.paintMesh(g.data,p.width),y.putImageData(g,0,0);const M=document.createElementNS(t,&quot;image&quot;);d(M,{width:l,height:c,x:0,y:0});let S=p.toDataURL();M.setAttributeNS(e,&quot;xlink:href&quot;,S);const k=&quot;pattern_clip&quot;+n,A=document.createElementNS(t,&quot;pattern&quot;);d(A,{id:k,patternUnits:&quot;userSpaceOnUse&quot;,width:l,height:c,x:u,y:f}),A.appendChild(M),o.parentNode.appendChild(A),r.style.stroke=&quot;url(#&quot;+k+&quot;)&quot;,g=null,p=null,S=null}}})}();
</script><script
       id="mesh_polyfill"
       type="text/javascript">
!function(){const t=&quot;http://www.w3.org/2000/svg&quot;,e=&quot;http://www.w3.org/1999/xlink&quot;,s=&quot;http://www.w3.org/1999/xhtml&quot;,r=2;if(document.createElementNS(t,&quot;meshgradient&quot;).x)return;const n=(t,e,s,r)=&gt;{let n=new x(.5*(e.x+s.x),.5*(e.y+s.y)),o=new x(.5*(t.x+e.x),.5*(t.y+e.y)),i=new x(.5*(s.x+r.x),.5*(s.y+r.y)),a=new x(.5*(n.x+o.x),.5*(n.y+o.y)),h=new x(.5*(n.x+i.x),.5*(n.y+i.y)),l=new x(.5*(a.x+h.x),.5*(a.y+h.y));return[[t,o,a,l],[l,h,i,r]]},o=t=&gt;{let e=t[0].distSquared(t[1]),s=t[2].distSquared(t[3]),r=.25*t[0].distSquared(t[2]),n=.25*t[1].distSquared(t[3]),o=e&gt;s?e:s,i=r&gt;n?r:n;return 18*(o&gt;i?o:i)},i=(t,e)=&gt;Math.sqrt(t.distSquared(e)),a=(t,e)=&gt;t.scale(2/3).add(e.scale(1/3)),h=t=&gt;{let e,s,r,n,o,i,a,h=new g;return t.match(/(\w+\(\s*[^)]+\))+/g).forEach(t=&gt;{let l=t.match(/[\w.-]+/g),d=l.shift();switch(d){case&quot;translate&quot;:2===l.length?e=new g(1,0,0,1,l[0],l[1]):(console.error(&quot;mesh.js: translate does not have 2 arguments!&quot;),e=new g(1,0,0,1,0,0)),h=h.append(e);break;case&quot;scale&quot;:1===l.length?s=new g(l[0],0,0,l[0],0,0):2===l.length?s=new g(l[0],0,0,l[1],0,0):(console.error(&quot;mesh.js: scale does not have 1 or 2 arguments!&quot;),s=new g(1,0,0,1,0,0)),h=h.append(s);break;case&quot;rotate&quot;:if(3===l.length&amp;&amp;(e=new g(1,0,0,1,l[1],l[2]),h=h.append(e)),l[0]){r=l[0]*Math.PI/180;let t=Math.cos(r),e=Math.sin(r);Math.abs(t)&lt;1e-16&amp;&amp;(t=0),Math.abs(e)&lt;1e-16&amp;&amp;(e=0),a=new g(t,e,-e,t,0,0),h=h.append(a)}else console.error(&quot;math.js: No argument to rotate transform!&quot;);3===l.length&amp;&amp;(e=new g(1,0,0,1,-l[1],-l[2]),h=h.append(e));break;case&quot;skewX&quot;:l[0]?(r=l[0]*Math.PI/180,n=Math.tan(r),o=new g(1,0,n,1,0,0),h=h.append(o)):console.error(&quot;math.js: No argument to skewX transform!&quot;);break;case&quot;skewY&quot;:l[0]?(r=l[0]*Math.PI/180,n=Math.tan(r),i=new g(1,n,0,1,0,0),h=h.append(i)):console.error(&quot;math.js: No argument to skewY transform!&quot;);break;case&quot;matrix&quot;:6===l.length?h=h.append(new g(...l)):console.error(&quot;math.js: Incorrect number of arguments for matrix!&quot;);break;default:console.error(&quot;mesh.js: Unhandled transform type: &quot;+d)}}),h},l=t=&gt;{let e=[],s=t.split(/[ ,]+/);for(let t=0,r=s.length-1;t&lt;r;t+=2)e.push(new x(parseFloat(s[t]),parseFloat(s[t+1])));return e},d=(t,e)=&gt;{for(let s in e)t.setAttribute(s,e[s])},c=(t,e,s,r,n)=&gt;{let o,i,a=[0,0,0,0];for(let h=0;h&lt;3;++h)e[h]&lt;t[h]&amp;&amp;e[h]&lt;s[h]||t[h]&lt;e[h]&amp;&amp;s[h]&lt;e[h]?a[h]=0:(a[h]=.5*((e[h]-t[h])/r+(s[h]-e[h])/n),o=Math.abs(3*(e[h]-t[h])/r),i=Math.abs(3*(s[h]-e[h])/n),a[h]&gt;o?a[h]=o:a[h]&gt;i&amp;&amp;(a[h]=i));return a},u=[[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0],[-3,3,0,0,-2,-1,0,0,0,0,0,0,0,0,0,0],[2,-2,0,0,1,1,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0],[0,0,0,0,0,0,0,0,-3,3,0,0,-2,-1,0,0],[0,0,0,0,0,0,0,0,2,-2,0,0,1,1,0,0],[-3,0,3,0,0,0,0,0,-2,0,-1,0,0,0,0,0],[0,0,0,0,-3,0,3,0,0,0,0,0,-2,0,-1,0],[9,-9,-9,9,6,3,-6,-3,6,-6,3,-3,4,2,2,1],[-6,6,6,-6,-3,-3,3,3,-4,4,-2,2,-2,-2,-1,-1],[2,0,-2,0,0,0,0,0,1,0,1,0,0,0,0,0],[0,0,0,0,2,0,-2,0,0,0,0,0,1,0,1,0],[-6,6,6,-6,-4,-2,4,2,-3,3,-3,3,-2,-1,-2,-1],[4,-4,-4,4,2,2,-2,-2,2,-2,2,-2,1,1,1,1]],f=t=&gt;{let e=[];for(let s=0;s&lt;16;++s){e[s]=0;for(let r=0;r&lt;16;++r)e[s]+=u[s][r]*t[r]}return e},p=(t,e,s)=&gt;{const r=e*e,n=s*s,o=e*e*e,i=s*s*s;return t[0]+t[1]*e+t[2]*r+t[3]*o+t[4]*s+t[5]*s*e+t[6]*s*r+t[7]*s*o+t[8]*n+t[9]*n*e+t[10]*n*r+t[11]*n*o+t[12]*i+t[13]*i*e+t[14]*i*r+t[15]*i*o},y=t=&gt;{let e=[],s=[],r=[];for(let s=0;s&lt;4;++s)e[s]=[],e[s][0]=n(t[0][s],t[1][s],t[2][s],t[3][s]),e[s][1]=[],e[s][1].push(...n(...e[s][0][0])),e[s][1].push(...n(...e[s][0][1])),e[s][2]=[],e[s][2].push(...n(...e[s][1][0])),e[s][2].push(...n(...e[s][1][1])),e[s][2].push(...n(...e[s][1][2])),e[s][2].push(...n(...e[s][1][3]));for(let t=0;t&lt;8;++t){s[t]=[];for(let r=0;r&lt;4;++r)s[t][r]=[],s[t][r][0]=n(e[0][2][t][r],e[1][2][t][r],e[2][2][t][r],e[3][2][t][r]),s[t][r][1]=[],s[t][r][1].push(...n(...s[t][r][0][0])),s[t][r][1].push(...n(...s[t][r][0][1])),s[t][r][2]=[],s[t][r][2].push(...n(...s[t][r][1][0])),s[t][r][2].push(...n(...s[t][r][1][1])),s[t][r][2].push(...n(...s[t][r][1][2])),s[t][r][2].push(...n(...s[t][r][1][3]))}for(let t=0;t&lt;8;++t){r[t]=[];for(let e=0;e&lt;8;++e)r[t][e]=[],r[t][e][0]=s[t][0][2][e],r[t][e][1]=s[t][1][2][e],r[t][e][2]=s[t][2][2][e],r[t][e][3]=s[t][3][2][e]}return r};class x{constructor(t,e){this.x=t||0,this.y=e||0}toString(){return`(x=${this.x}, y=${this.y})`}clone(){return new x(this.x,this.y)}add(t){return new x(this.x+t.x,this.y+t.y)}scale(t){return void 0===t.x?new x(this.x*t,this.y*t):new x(this.x*t.x,this.y*t.y)}distSquared(t){let e=this.x-t.x,s=this.y-t.y;return e*e+s*s}transform(t){let e=this.x*t.a+this.y*t.c+t.e,s=this.x*t.b+this.y*t.d+t.f;return new x(e,s)}}class g{constructor(t,e,s,r,n,o){void 0===t?(this.a=1,this.b=0,this.c=0,this.d=1,this.e=0,this.f=0):(this.a=t,this.b=e,this.c=s,this.d=r,this.e=n,this.f=o)}toString(){return`affine: ${this.a} ${this.c} ${this.e} \n       ${this.b} ${this.d} ${this.f}`}append(t){t instanceof g||console.error(&quot;mesh.js: argument to Affine.append is not affine!&quot;);let e=this.a*t.a+this.c*t.b,s=this.b*t.a+this.d*t.b,r=this.a*t.c+this.c*t.d,n=this.b*t.c+this.d*t.d,o=this.a*t.e+this.c*t.f+this.e,i=this.b*t.e+this.d*t.f+this.f;return new g(e,s,r,n,o,i)}}class w{constructor(t,e){this.nodes=t,this.colors=e}paintCurve(t,e){if(o(this.nodes)&gt;r){const s=n(...this.nodes);let r=[[],[]],o=[[],[]];for(let t=0;t&lt;4;++t)r[0][t]=this.colors[0][t],r[1][t]=(this.colors[0][t]+this.colors[1][t])/2,o[0][t]=r[1][t],o[1][t]=this.colors[1][t];let i=new w(s[0],r),a=new w(s[1],o);i.paintCurve(t,e),a.paintCurve(t,e)}else{let s=Math.round(this.nodes[0].x);if(s&gt;=0&amp;&amp;s&lt;e){let r=4*(~~this.nodes[0].y*e+s);t[r]=Math.round(this.colors[0][0]),t[r+1]=Math.round(this.colors[0][1]),t[r+2]=Math.round(this.colors[0][2]),t[r+3]=Math.round(this.colors[0][3])}}}}class m{constructor(t,e){this.nodes=t,this.colors=e}split(){let t=[[],[],[],[]],e=[[],[],[],[]],s=[[[],[]],[[],[]]],r=[[[],[]],[[],[]]];for(let s=0;s&lt;4;++s){const r=n(this.nodes[0][s],this.nodes[1][s],this.nodes[2][s],this.nodes[3][s]);t[0][s]=r[0][0],t[1][s]=r[0][1],t[2][s]=r[0][2],t[3][s]=r[0][3],e[0][s]=r[1][0],e[1][s]=r[1][1],e[2][s]=r[1][2],e[3][s]=r[1][3]}for(let t=0;t&lt;4;++t)s[0][0][t]=this.colors[0][0][t],s[0][1][t]=this.colors[0][1][t],s[1][0][t]=(this.colors[0][0][t]+this.colors[1][0][t])/2,s[1][1][t]=(this.colors[0][1][t]+this.colors[1][1][t])/2,r[0][0][t]=s[1][0][t],r[0][1][t]=s[1][1][t],r[1][0][t]=this.colors[1][0][t],r[1][1][t]=this.colors[1][1][t];return[new m(t,s),new m(e,r)]}paint(t,e){let s,n=!1;for(let t=0;t&lt;4;++t)if((s=o([this.nodes[0][t],this.nodes[1][t],this.nodes[2][t],this.nodes[3][t]]))&gt;r){n=!0;break}if(n){let s=this.split();s[0].paint(t,e),s[1].paint(t,e)}else{new w([...this.nodes[0]],[...this.colors[0]]).paintCurve(t,e)}}}class b{constructor(t){this.readMesh(t),this.type=t.getAttribute(&quot;type&quot;)||&quot;bilinear&quot;}readMesh(t){let e=[[]],s=[[]],r=Number(t.getAttribute(&quot;x&quot;)),n=Number(t.getAttribute(&quot;y&quot;));e[0][0]=new x(r,n);let o=t.children;for(let t=0,r=o.length;t&lt;r;++t){e[3*t+1]=[],e[3*t+2]=[],e[3*t+3]=[],s[t+1]=[];let r=o[t].children;for(let n=0,o=r.length;n&lt;o;++n){let o=r[n].children;for(let r=0,i=o.length;r&lt;i;++r){let i=r;0!==t&amp;&amp;++i;let h,d=o[r].getAttribute(&quot;path&quot;),c=&quot;l&quot;;null!=d&amp;&amp;(c=(h=d.match(/\s*([lLcC])\s*(.*)/))[1]);let u=l(h[2]);switch(c){case&quot;l&quot;:0===i?(e[3*t][3*n+3]=u[0].add(e[3*t][3*n]),e[3*t][3*n+1]=a(e[3*t][3*n],e[3*t][3*n+3]),e[3*t][3*n+2]=a(e[3*t][3*n+3],e[3*t][3*n])):1===i?(e[3*t+3][3*n+3]=u[0].add(e[3*t][3*n+3]),e[3*t+1][3*n+3]=a(e[3*t][3*n+3],e[3*t+3][3*n+3]),e[3*t+2][3*n+3]=a(e[3*t+3][3*n+3],e[3*t][3*n+3])):2===i?(0===n&amp;&amp;(e[3*t+3][3*n+0]=u[0].add(e[3*t+3][3*n+3])),e[3*t+3][3*n+1]=a(e[3*t+3][3*n],e[3*t+3][3*n+3]),e[3*t+3][3*n+2]=a(e[3*t+3][3*n+3],e[3*t+3][3*n])):(e[3*t+1][3*n]=a(e[3*t][3*n],e[3*t+3][3*n]),e[3*t+2][3*n]=a(e[3*t+3][3*n],e[3*t][3*n]));break;case&quot;L&quot;:0===i?(e[3*t][3*n+3]=u[0],e[3*t][3*n+1]=a(e[3*t][3*n],e[3*t][3*n+3]),e[3*t][3*n+2]=a(e[3*t][3*n+3],e[3*t][3*n])):1===i?(e[3*t+3][3*n+3]=u[0],e[3*t+1][3*n+3]=a(e[3*t][3*n+3],e[3*t+3][3*n+3]),e[3*t+2][3*n+3]=a(e[3*t+3][3*n+3],e[3*t][3*n+3])):2===i?(0===n&amp;&amp;(e[3*t+3][3*n+0]=u[0]),e[3*t+3][3*n+1]=a(e[3*t+3][3*n],e[3*t+3][3*n+3]),e[3*t+3][3*n+2]=a(e[3*t+3][3*n+3],e[3*t+3][3*n])):(e[3*t+1][3*n]=a(e[3*t][3*n],e[3*t+3][3*n]),e[3*t+2][3*n]=a(e[3*t+3][3*n],e[3*t][3*n]));break;case&quot;c&quot;:0===i?(e[3*t][3*n+1]=u[0].add(e[3*t][3*n]),e[3*t][3*n+2]=u[1].add(e[3*t][3*n]),e[3*t][3*n+3]=u[2].add(e[3*t][3*n])):1===i?(e[3*t+1][3*n+3]=u[0].add(e[3*t][3*n+3]),e[3*t+2][3*n+3]=u[1].add(e[3*t][3*n+3]),e[3*t+3][3*n+3]=u[2].add(e[3*t][3*n+3])):2===i?(e[3*t+3][3*n+2]=u[0].add(e[3*t+3][3*n+3]),e[3*t+3][3*n+1]=u[1].add(e[3*t+3][3*n+3]),0===n&amp;&amp;(e[3*t+3][3*n+0]=u[2].add(e[3*t+3][3*n+3]))):(e[3*t+2][3*n]=u[0].add(e[3*t+3][3*n]),e[3*t+1][3*n]=u[1].add(e[3*t+3][3*n]));break;case&quot;C&quot;:0===i?(e[3*t][3*n+1]=u[0],e[3*t][3*n+2]=u[1],e[3*t][3*n+3]=u[2]):1===i?(e[3*t+1][3*n+3]=u[0],e[3*t+2][3*n+3]=u[1],e[3*t+3][3*n+3]=u[2]):2===i?(e[3*t+3][3*n+2]=u[0],e[3*t+3][3*n+1]=u[1],0===n&amp;&amp;(e[3*t+3][3*n+0]=u[2])):(e[3*t+2][3*n]=u[0],e[3*t+1][3*n]=u[1]);break;default:console.error(&quot;mesh.js: &quot;+c+&quot; invalid path type.&quot;)}if(0===t&amp;&amp;0===n||r&gt;0){let e=window.getComputedStyle(o[r]).stopColor.match(/^rgb\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)$/i),a=window.getComputedStyle(o[r]).stopOpacity,h=255;a&amp;&amp;(h=Math.floor(255*a)),e&amp;&amp;(0===i?(s[t][n]=[],s[t][n][0]=Math.floor(e[1]),s[t][n][1]=Math.floor(e[2]),s[t][n][2]=Math.floor(e[3]),s[t][n][3]=h):1===i?(s[t][n+1]=[],s[t][n+1][0]=Math.floor(e[1]),s[t][n+1][1]=Math.floor(e[2]),s[t][n+1][2]=Math.floor(e[3]),s[t][n+1][3]=h):2===i?(s[t+1][n+1]=[],s[t+1][n+1][0]=Math.floor(e[1]),s[t+1][n+1][1]=Math.floor(e[2]),s[t+1][n+1][2]=Math.floor(e[3]),s[t+1][n+1][3]=h):3===i&amp;&amp;(s[t+1][n]=[],s[t+1][n][0]=Math.floor(e[1]),s[t+1][n][1]=Math.floor(e[2]),s[t+1][n][2]=Math.floor(e[3]),s[t+1][n][3]=h))}}e[3*t+1][3*n+1]=new x,e[3*t+1][3*n+2]=new x,e[3*t+2][3*n+1]=new x,e[3*t+2][3*n+2]=new x,e[3*t+1][3*n+1].x=(-4*e[3*t][3*n].x+6*(e[3*t][3*n+1].x+e[3*t+1][3*n].x)+-2*(e[3*t][3*n+3].x+e[3*t+3][3*n].x)+3*(e[3*t+3][3*n+1].x+e[3*t+1][3*n+3].x)+-1*e[3*t+3][3*n+3].x)/9,e[3*t+1][3*n+2].x=(-4*e[3*t][3*n+3].x+6*(e[3*t][3*n+2].x+e[3*t+1][3*n+3].x)+-2*(e[3*t][3*n].x+e[3*t+3][3*n+3].x)+3*(e[3*t+3][3*n+2].x+e[3*t+1][3*n].x)+-1*e[3*t+3][3*n].x)/9,e[3*t+2][3*n+1].x=(-4*e[3*t+3][3*n].x+6*(e[3*t+3][3*n+1].x+e[3*t+2][3*n].x)+-2*(e[3*t+3][3*n+3].x+e[3*t][3*n].x)+3*(e[3*t][3*n+1].x+e[3*t+2][3*n+3].x)+-1*e[3*t][3*n+3].x)/9,e[3*t+2][3*n+2].x=(-4*e[3*t+3][3*n+3].x+6*(e[3*t+3][3*n+2].x+e[3*t+2][3*n+3].x)+-2*(e[3*t+3][3*n].x+e[3*t][3*n+3].x)+3*(e[3*t][3*n+2].x+e[3*t+2][3*n].x)+-1*e[3*t][3*n].x)/9,e[3*t+1][3*n+1].y=(-4*e[3*t][3*n].y+6*(e[3*t][3*n+1].y+e[3*t+1][3*n].y)+-2*(e[3*t][3*n+3].y+e[3*t+3][3*n].y)+3*(e[3*t+3][3*n+1].y+e[3*t+1][3*n+3].y)+-1*e[3*t+3][3*n+3].y)/9,e[3*t+1][3*n+2].y=(-4*e[3*t][3*n+3].y+6*(e[3*t][3*n+2].y+e[3*t+1][3*n+3].y)+-2*(e[3*t][3*n].y+e[3*t+3][3*n+3].y)+3*(e[3*t+3][3*n+2].y+e[3*t+1][3*n].y)+-1*e[3*t+3][3*n].y)/9,e[3*t+2][3*n+1].y=(-4*e[3*t+3][3*n].y+6*(e[3*t+3][3*n+1].y+e[3*t+2][3*n].y)+-2*(e[3*t+3][3*n+3].y+e[3*t][3*n].y)+3*(e[3*t][3*n+1].y+e[3*t+2][3*n+3].y)+-1*e[3*t][3*n+3].y)/9,e[3*t+2][3*n+2].y=(-4*e[3*t+3][3*n+3].y+6*(e[3*t+3][3*n+2].y+e[3*t+2][3*n+3].y)+-2*(e[3*t+3][3*n].y+e[3*t][3*n+3].y)+3*(e[3*t][3*n+2].y+e[3*t+2][3*n].y)+-1*e[3*t][3*n].y)/9}}this.nodes=e,this.colors=s}paintMesh(t,e){let s=(this.nodes.length-1)/3,r=(this.nodes[0].length-1)/3;if(&quot;bilinear&quot;===this.type||s&lt;2||r&lt;2){let n;for(let o=0;o&lt;s;++o)for(let s=0;s&lt;r;++s){let r=[];for(let t=3*o,e=3*o+4;t&lt;e;++t)r.push(this.nodes[t].slice(3*s,3*s+4));let i=[];i.push(this.colors[o].slice(s,s+2)),i.push(this.colors[o+1].slice(s,s+2)),(n=new m(r,i)).paint(t,e)}}else{let n,o,a,h,l,d,u;const x=s,g=r;s++,r++;let w=new Array(s);for(let t=0;t&lt;s;++t){w[t]=new Array(r);for(let e=0;e&lt;r;++e)w[t][e]=[],w[t][e][0]=this.nodes[3*t][3*e],w[t][e][1]=this.colors[t][e]}for(let t=0;t&lt;s;++t)for(let e=0;e&lt;r;++e)0!==t&amp;&amp;t!==x&amp;&amp;(n=i(w[t-1][e][0],w[t][e][0]),o=i(w[t+1][e][0],w[t][e][0]),w[t][e][2]=c(w[t-1][e][1],w[t][e][1],w[t+1][e][1],n,o)),0!==e&amp;&amp;e!==g&amp;&amp;(n=i(w[t][e-1][0],w[t][e][0]),o=i(w[t][e+1][0],w[t][e][0]),w[t][e][3]=c(w[t][e-1][1],w[t][e][1],w[t][e+1][1],n,o));for(let t=0;t&lt;r;++t){w[0][t][2]=[],w[x][t][2]=[];for(let e=0;e&lt;4;++e)n=i(w[1][t][0],w[0][t][0]),o=i(w[x][t][0],w[x-1][t][0]),w[0][t][2][e]=n&gt;0?2*(w[1][t][1][e]-w[0][t][1][e])/n-w[1][t][2][e]:0,w[x][t][2][e]=o&gt;0?2*(w[x][t][1][e]-w[x-1][t][1][e])/o-w[x-1][t][2][e]:0}for(let t=0;t&lt;s;++t){w[t][0][3]=[],w[t][g][3]=[];for(let e=0;e&lt;4;++e)n=i(w[t][1][0],w[t][0][0]),o=i(w[t][g][0],w[t][g-1][0]),w[t][0][3][e]=n&gt;0?2*(w[t][1][1][e]-w[t][0][1][e])/n-w[t][1][3][e]:0,w[t][g][3][e]=o&gt;0?2*(w[t][g][1][e]-w[t][g-1][1][e])/o-w[t][g-1][3][e]:0}for(let s=0;s&lt;x;++s)for(let r=0;r&lt;g;++r){let n=i(w[s][r][0],w[s+1][r][0]),o=i(w[s][r+1][0],w[s+1][r+1][0]),c=i(w[s][r][0],w[s][r+1][0]),x=i(w[s+1][r][0],w[s+1][r+1][0]),g=[[],[],[],[]];for(let t=0;t&lt;4;++t){(d=[])[0]=w[s][r][1][t],d[1]=w[s+1][r][1][t],d[2]=w[s][r+1][1][t],d[3]=w[s+1][r+1][1][t],d[4]=w[s][r][2][t]*n,d[5]=w[s+1][r][2][t]*n,d[6]=w[s][r+1][2][t]*o,d[7]=w[s+1][r+1][2][t]*o,d[8]=w[s][r][3][t]*c,d[9]=w[s+1][r][3][t]*x,d[10]=w[s][r+1][3][t]*c,d[11]=w[s+1][r+1][3][t]*x,d[12]=0,d[13]=0,d[14]=0,d[15]=0,u=f(d);for(let e=0;e&lt;9;++e){g[t][e]=[];for(let s=0;s&lt;9;++s)g[t][e][s]=p(u,e/8,s/8),g[t][e][s]&gt;255?g[t][e][s]=255:g[t][e][s]&lt;0&amp;&amp;(g[t][e][s]=0)}}h=[];for(let t=3*s,e=3*s+4;t&lt;e;++t)h.push(this.nodes[t].slice(3*r,3*r+4));l=y(h);for(let s=0;s&lt;8;++s)for(let r=0;r&lt;8;++r)(a=new m(l[s][r],[[[g[0][s][r],g[1][s][r],g[2][s][r],g[3][s][r]],[g[0][s][r+1],g[1][s][r+1],g[2][s][r+1],g[3][s][r+1]]],[[g[0][s+1][r],g[1][s+1][r],g[2][s+1][r],g[3][s+1][r]],[g[0][s+1][r+1],g[1][s+1][r+1],g[2][s+1][r+1],g[3][s+1][r+1]]]])).paint(t,e)}}}transform(t){if(t instanceof x)for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].add(t);else if(t instanceof g)for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].transform(t)}scale(t){for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].scale(t)}}document.querySelectorAll(&quot;rect,circle,ellipse,path,text&quot;).forEach((r,n)=&gt;{let o=r.getAttribute(&quot;id&quot;);o||(o=&quot;patchjs_shape&quot;+n,r.setAttribute(&quot;id&quot;,o));const i=r.style.fill.match(/^url\(\s*&quot;?\s*#([^\s&quot;]+)&quot;?\s*\)/),a=r.style.stroke.match(/^url\(\s*&quot;?\s*#([^\s&quot;]+)&quot;?\s*\)/);if(i&amp;&amp;i[1]){const a=document.getElementById(i[1]);if(a&amp;&amp;&quot;meshgradient&quot;===a.nodeName){const i=r.getBBox();let l=document.createElementNS(s,&quot;canvas&quot;);d(l,{width:i.width,height:i.height});const c=l.getContext(&quot;2d&quot;);let u=c.createImageData(i.width,i.height);const f=new b(a);&quot;objectBoundingBox&quot;===a.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;f.scale(new x(i.width,i.height));const p=a.getAttribute(&quot;gradientTransform&quot;);null!=p&amp;&amp;f.transform(h(p)),&quot;userSpaceOnUse&quot;===a.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;f.transform(new x(-i.x,-i.y)),f.paintMesh(u.data,l.width),c.putImageData(u,0,0);const y=document.createElementNS(t,&quot;image&quot;);d(y,{width:i.width,height:i.height,x:i.x,y:i.y});let g=l.toDataURL();y.setAttributeNS(e,&quot;xlink:href&quot;,g),r.parentNode.insertBefore(y,r),r.style.fill=&quot;none&quot;;const w=document.createElementNS(t,&quot;use&quot;);w.setAttributeNS(e,&quot;xlink:href&quot;,&quot;#&quot;+o);const m=&quot;patchjs_clip&quot;+n,M=document.createElementNS(t,&quot;clipPath&quot;);M.setAttribute(&quot;id&quot;,m),M.appendChild(w),r.parentElement.insertBefore(M,r),y.setAttribute(&quot;clip-path&quot;,&quot;url(#&quot;+m+&quot;)&quot;),u=null,l=null,g=null}}if(a&amp;&amp;a[1]){const o=document.getElementById(a[1]);if(o&amp;&amp;&quot;meshgradient&quot;===o.nodeName){const i=parseFloat(r.style.strokeWidth.slice(0,-2))*(parseFloat(r.style.strokeMiterlimit)||parseFloat(r.getAttribute(&quot;stroke-miterlimit&quot;))||1),a=r.getBBox(),l=Math.trunc(a.width+i),c=Math.trunc(a.height+i),u=Math.trunc(a.x-i/2),f=Math.trunc(a.y-i/2);let p=document.createElementNS(s,&quot;canvas&quot;);d(p,{width:l,height:c});const y=p.getContext(&quot;2d&quot;);let g=y.createImageData(l,c);const w=new b(o);&quot;objectBoundingBox&quot;===o.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;w.scale(new x(l,c));const m=o.getAttribute(&quot;gradientTransform&quot;);null!=m&amp;&amp;w.transform(h(m)),&quot;userSpaceOnUse&quot;===o.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;w.transform(new x(-u,-f)),w.paintMesh(g.data,p.width),y.putImageData(g,0,0);const M=document.createElementNS(t,&quot;image&quot;);d(M,{width:l,height:c,x:0,y:0});let S=p.toDataURL();M.setAttributeNS(e,&quot;xlink:href&quot;,S);const k=&quot;pattern_clip&quot;+n,A=document.createElementNS(t,&quot;pattern&quot;);d(A,{id:k,patternUnits:&quot;userSpaceOnUse&quot;,width:l,height:c,x:u,y:f}),A.appendChild(M),o.parentNode.appendChild(A),r.style.stroke=&quot;url(#&quot;+k+&quot;)&quot;,g=null,p=null,S=null}}})}();
</script><script
       id="mesh_polyfill-97"
       type="text/javascript">
!function(){const t=&quot;http://www.w3.org/2000/svg&quot;,e=&quot;http://www.w3.org/1999/xlink&quot;,s=&quot;http://www.w3.org/1999/xhtml&quot;,r=2;if(document.createElementNS(t,&quot;meshgradient&quot;).x)return;const n=(t,e,s,r)=&gt;{let n=new x(.5*(e.x+s.x),.5*(e.y+s.y)),o=new x(.5*(t.x+e.x),.5*(t.y+e.y)),i=new x(.5*(s.x+r.x),.5*(s.y+r.y)),a=new x(.5*(n.x+o.x),.5*(n.y+o.y)),h=new x(.5*(n.x+i.x),.5*(n.y+i.y)),l=new x(.5*(a.x+h.x),.5*(a.y+h.y));return[[t,o,a,l],[l,h,i,r]]},o=t=&gt;{let e=t[0].distSquared(t[1]),s=t[2].distSquared(t[3]),r=.25*t[0].distSquared(t[2]),n=.25*t[1].distSquared(t[3]),o=e&gt;s?e:s,i=r&gt;n?r:n;return 18*(o&gt;i?o:i)},i=(t,e)=&gt;Math.sqrt(t.distSquared(e)),a=(t,e)=&gt;t.scale(2/3).add(e.scale(1/3)),h=t=&gt;{let e,s,r,n,o,i,a,h=new g;return t.match(/(\w+\(\s*[^)]+\))+/g).forEach(t=&gt;{let l=t.match(/[\w.-]+/g),d=l.shift();switch(d){case&quot;translate&quot;:2===l.length?e=new g(1,0,0,1,l[0],l[1]):(console.error(&quot;mesh.js: translate does not have 2 arguments!&quot;),e=new g(1,0,0,1,0,0)),h=h.append(e);break;case&quot;scale&quot;:1===l.length?s=new g(l[0],0,0,l[0],0,0):2===l.length?s=new g(l[0],0,0,l[1],0,0):(console.error(&quot;mesh.js: scale does not have 1 or 2 arguments!&quot;),s=new g(1,0,0,1,0,0)),h=h.append(s);break;case&quot;rotate&quot;:if(3===l.length&amp;&amp;(e=new g(1,0,0,1,l[1],l[2]),h=h.append(e)),l[0]){r=l[0]*Math.PI/180;let t=Math.cos(r),e=Math.sin(r);Math.abs(t)&lt;1e-16&amp;&amp;(t=0),Math.abs(e)&lt;1e-16&amp;&amp;(e=0),a=new g(t,e,-e,t,0,0),h=h.append(a)}else console.error(&quot;math.js: No argument to rotate transform!&quot;);3===l.length&amp;&amp;(e=new g(1,0,0,1,-l[1],-l[2]),h=h.append(e));break;case&quot;skewX&quot;:l[0]?(r=l[0]*Math.PI/180,n=Math.tan(r),o=new g(1,0,n,1,0,0),h=h.append(o)):console.error(&quot;math.js: No argument to skewX transform!&quot;);break;case&quot;skewY&quot;:l[0]?(r=l[0]*Math.PI/180,n=Math.tan(r),i=new g(1,n,0,1,0,0),h=h.append(i)):console.error(&quot;math.js: No argument to skewY transform!&quot;);break;case&quot;matrix&quot;:6===l.length?h=h.append(new g(...l)):console.error(&quot;math.js: Incorrect number of arguments for matrix!&quot;);break;default:console.error(&quot;mesh.js: Unhandled transform type: &quot;+d)}}),h},l=t=&gt;{let e=[],s=t.split(/[ ,]+/);for(let t=0,r=s.length-1;t&lt;r;t+=2)e.push(new x(parseFloat(s[t]),parseFloat(s[t+1])));return e},d=(t,e)=&gt;{for(let s in e)t.setAttribute(s,e[s])},c=(t,e,s,r,n)=&gt;{let o,i,a=[0,0,0,0];for(let h=0;h&lt;3;++h)e[h]&lt;t[h]&amp;&amp;e[h]&lt;s[h]||t[h]&lt;e[h]&amp;&amp;s[h]&lt;e[h]?a[h]=0:(a[h]=.5*((e[h]-t[h])/r+(s[h]-e[h])/n),o=Math.abs(3*(e[h]-t[h])/r),i=Math.abs(3*(s[h]-e[h])/n),a[h]&gt;o?a[h]=o:a[h]&gt;i&amp;&amp;(a[h]=i));return a},u=[[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0],[-3,3,0,0,-2,-1,0,0,0,0,0,0,0,0,0,0],[2,-2,0,0,1,1,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0],[0,0,0,0,0,0,0,0,-3,3,0,0,-2,-1,0,0],[0,0,0,0,0,0,0,0,2,-2,0,0,1,1,0,0],[-3,0,3,0,0,0,0,0,-2,0,-1,0,0,0,0,0],[0,0,0,0,-3,0,3,0,0,0,0,0,-2,0,-1,0],[9,-9,-9,9,6,3,-6,-3,6,-6,3,-3,4,2,2,1],[-6,6,6,-6,-3,-3,3,3,-4,4,-2,2,-2,-2,-1,-1],[2,0,-2,0,0,0,0,0,1,0,1,0,0,0,0,0],[0,0,0,0,2,0,-2,0,0,0,0,0,1,0,1,0],[-6,6,6,-6,-4,-2,4,2,-3,3,-3,3,-2,-1,-2,-1],[4,-4,-4,4,2,2,-2,-2,2,-2,2,-2,1,1,1,1]],f=t=&gt;{let e=[];for(let s=0;s&lt;16;++s){e[s]=0;for(let r=0;r&lt;16;++r)e[s]+=u[s][r]*t[r]}return e},p=(t,e,s)=&gt;{const r=e*e,n=s*s,o=e*e*e,i=s*s*s;return t[0]+t[1]*e+t[2]*r+t[3]*o+t[4]*s+t[5]*s*e+t[6]*s*r+t[7]*s*o+t[8]*n+t[9]*n*e+t[10]*n*r+t[11]*n*o+t[12]*i+t[13]*i*e+t[14]*i*r+t[15]*i*o},y=t=&gt;{let e=[],s=[],r=[];for(let s=0;s&lt;4;++s)e[s]=[],e[s][0]=n(t[0][s],t[1][s],t[2][s],t[3][s]),e[s][1]=[],e[s][1].push(...n(...e[s][0][0])),e[s][1].push(...n(...e[s][0][1])),e[s][2]=[],e[s][2].push(...n(...e[s][1][0])),e[s][2].push(...n(...e[s][1][1])),e[s][2].push(...n(...e[s][1][2])),e[s][2].push(...n(...e[s][1][3]));for(let t=0;t&lt;8;++t){s[t]=[];for(let r=0;r&lt;4;++r)s[t][r]=[],s[t][r][0]=n(e[0][2][t][r],e[1][2][t][r],e[2][2][t][r],e[3][2][t][r]),s[t][r][1]=[],s[t][r][1].push(...n(...s[t][r][0][0])),s[t][r][1].push(...n(...s[t][r][0][1])),s[t][r][2]=[],s[t][r][2].push(...n(...s[t][r][1][0])),s[t][r][2].push(...n(...s[t][r][1][1])),s[t][r][2].push(...n(...s[t][r][1][2])),s[t][r][2].push(...n(...s[t][r][1][3]))}for(let t=0;t&lt;8;++t){r[t]=[];for(let e=0;e&lt;8;++e)r[t][e]=[],r[t][e][0]=s[t][0][2][e],r[t][e][1]=s[t][1][2][e],r[t][e][2]=s[t][2][2][e],r[t][e][3]=s[t][3][2][e]}return r};class x{constructor(t,e){this.x=t||0,this.y=e||0}toString(){return`(x=${this.x}, y=${this.y})`}clone(){return new x(this.x,this.y)}add(t){return new x(this.x+t.x,this.y+t.y)}scale(t){return void 0===t.x?new x(this.x*t,this.y*t):new x(this.x*t.x,this.y*t.y)}distSquared(t){let e=this.x-t.x,s=this.y-t.y;return e*e+s*s}transform(t){let e=this.x*t.a+this.y*t.c+t.e,s=this.x*t.b+this.y*t.d+t.f;return new x(e,s)}}class g{constructor(t,e,s,r,n,o){void 0===t?(this.a=1,this.b=0,this.c=0,this.d=1,this.e=0,this.f=0):(this.a=t,this.b=e,this.c=s,this.d=r,this.e=n,this.f=o)}toString(){return`affine: ${this.a} ${this.c} ${this.e} \n       ${this.b} ${this.d} ${this.f}`}append(t){t instanceof g||console.error(&quot;mesh.js: argument to Affine.append is not affine!&quot;);let e=this.a*t.a+this.c*t.b,s=this.b*t.a+this.d*t.b,r=this.a*t.c+this.c*t.d,n=this.b*t.c+this.d*t.d,o=this.a*t.e+this.c*t.f+this.e,i=this.b*t.e+this.d*t.f+this.f;return new g(e,s,r,n,o,i)}}class w{constructor(t,e){this.nodes=t,this.colors=e}paintCurve(t,e){if(o(this.nodes)&gt;r){const s=n(...this.nodes);let r=[[],[]],o=[[],[]];for(let t=0;t&lt;4;++t)r[0][t]=this.colors[0][t],r[1][t]=(this.colors[0][t]+this.colors[1][t])/2,o[0][t]=r[1][t],o[1][t]=this.colors[1][t];let i=new w(s[0],r),a=new w(s[1],o);i.paintCurve(t,e),a.paintCurve(t,e)}else{let s=Math.round(this.nodes[0].x);if(s&gt;=0&amp;&amp;s&lt;e){let r=4*(~~this.nodes[0].y*e+s);t[r]=Math.round(this.colors[0][0]),t[r+1]=Math.round(this.colors[0][1]),t[r+2]=Math.round(this.colors[0][2]),t[r+3]=Math.round(this.colors[0][3])}}}}class m{constructor(t,e){this.nodes=t,this.colors=e}split(){let t=[[],[],[],[]],e=[[],[],[],[]],s=[[[],[]],[[],[]]],r=[[[],[]],[[],[]]];for(let s=0;s&lt;4;++s){const r=n(this.nodes[0][s],this.nodes[1][s],this.nodes[2][s],this.nodes[3][s]);t[0][s]=r[0][0],t[1][s]=r[0][1],t[2][s]=r[0][2],t[3][s]=r[0][3],e[0][s]=r[1][0],e[1][s]=r[1][1],e[2][s]=r[1][2],e[3][s]=r[1][3]}for(let t=0;t&lt;4;++t)s[0][0][t]=this.colors[0][0][t],s[0][1][t]=this.colors[0][1][t],s[1][0][t]=(this.colors[0][0][t]+this.colors[1][0][t])/2,s[1][1][t]=(this.colors[0][1][t]+this.colors[1][1][t])/2,r[0][0][t]=s[1][0][t],r[0][1][t]=s[1][1][t],r[1][0][t]=this.colors[1][0][t],r[1][1][t]=this.colors[1][1][t];return[new m(t,s),new m(e,r)]}paint(t,e){let s,n=!1;for(let t=0;t&lt;4;++t)if((s=o([this.nodes[0][t],this.nodes[1][t],this.nodes[2][t],this.nodes[3][t]]))&gt;r){n=!0;break}if(n){let s=this.split();s[0].paint(t,e),s[1].paint(t,e)}else{new w([...this.nodes[0]],[...this.colors[0]]).paintCurve(t,e)}}}class b{constructor(t){this.readMesh(t),this.type=t.getAttribute(&quot;type&quot;)||&quot;bilinear&quot;}readMesh(t){let e=[[]],s=[[]],r=Number(t.getAttribute(&quot;x&quot;)),n=Number(t.getAttribute(&quot;y&quot;));e[0][0]=new x(r,n);let o=t.children;for(let t=0,r=o.length;t&lt;r;++t){e[3*t+1]=[],e[3*t+2]=[],e[3*t+3]=[],s[t+1]=[];let r=o[t].children;for(let n=0,o=r.length;n&lt;o;++n){let o=r[n].children;for(let r=0,i=o.length;r&lt;i;++r){let i=r;0!==t&amp;&amp;++i;let h,d=o[r].getAttribute(&quot;path&quot;),c=&quot;l&quot;;null!=d&amp;&amp;(c=(h=d.match(/\s*([lLcC])\s*(.*)/))[1]);let u=l(h[2]);switch(c){case&quot;l&quot;:0===i?(e[3*t][3*n+3]=u[0].add(e[3*t][3*n]),e[3*t][3*n+1]=a(e[3*t][3*n],e[3*t][3*n+3]),e[3*t][3*n+2]=a(e[3*t][3*n+3],e[3*t][3*n])):1===i?(e[3*t+3][3*n+3]=u[0].add(e[3*t][3*n+3]),e[3*t+1][3*n+3]=a(e[3*t][3*n+3],e[3*t+3][3*n+3]),e[3*t+2][3*n+3]=a(e[3*t+3][3*n+3],e[3*t][3*n+3])):2===i?(0===n&amp;&amp;(e[3*t+3][3*n+0]=u[0].add(e[3*t+3][3*n+3])),e[3*t+3][3*n+1]=a(e[3*t+3][3*n],e[3*t+3][3*n+3]),e[3*t+3][3*n+2]=a(e[3*t+3][3*n+3],e[3*t+3][3*n])):(e[3*t+1][3*n]=a(e[3*t][3*n],e[3*t+3][3*n]),e[3*t+2][3*n]=a(e[3*t+3][3*n],e[3*t][3*n]));break;case&quot;L&quot;:0===i?(e[3*t][3*n+3]=u[0],e[3*t][3*n+1]=a(e[3*t][3*n],e[3*t][3*n+3]),e[3*t][3*n+2]=a(e[3*t][3*n+3],e[3*t][3*n])):1===i?(e[3*t+3][3*n+3]=u[0],e[3*t+1][3*n+3]=a(e[3*t][3*n+3],e[3*t+3][3*n+3]),e[3*t+2][3*n+3]=a(e[3*t+3][3*n+3],e[3*t][3*n+3])):2===i?(0===n&amp;&amp;(e[3*t+3][3*n+0]=u[0]),e[3*t+3][3*n+1]=a(e[3*t+3][3*n],e[3*t+3][3*n+3]),e[3*t+3][3*n+2]=a(e[3*t+3][3*n+3],e[3*t+3][3*n])):(e[3*t+1][3*n]=a(e[3*t][3*n],e[3*t+3][3*n]),e[3*t+2][3*n]=a(e[3*t+3][3*n],e[3*t][3*n]));break;case&quot;c&quot;:0===i?(e[3*t][3*n+1]=u[0].add(e[3*t][3*n]),e[3*t][3*n+2]=u[1].add(e[3*t][3*n]),e[3*t][3*n+3]=u[2].add(e[3*t][3*n])):1===i?(e[3*t+1][3*n+3]=u[0].add(e[3*t][3*n+3]),e[3*t+2][3*n+3]=u[1].add(e[3*t][3*n+3]),e[3*t+3][3*n+3]=u[2].add(e[3*t][3*n+3])):2===i?(e[3*t+3][3*n+2]=u[0].add(e[3*t+3][3*n+3]),e[3*t+3][3*n+1]=u[1].add(e[3*t+3][3*n+3]),0===n&amp;&amp;(e[3*t+3][3*n+0]=u[2].add(e[3*t+3][3*n+3]))):(e[3*t+2][3*n]=u[0].add(e[3*t+3][3*n]),e[3*t+1][3*n]=u[1].add(e[3*t+3][3*n]));break;case&quot;C&quot;:0===i?(e[3*t][3*n+1]=u[0],e[3*t][3*n+2]=u[1],e[3*t][3*n+3]=u[2]):1===i?(e[3*t+1][3*n+3]=u[0],e[3*t+2][3*n+3]=u[1],e[3*t+3][3*n+3]=u[2]):2===i?(e[3*t+3][3*n+2]=u[0],e[3*t+3][3*n+1]=u[1],0===n&amp;&amp;(e[3*t+3][3*n+0]=u[2])):(e[3*t+2][3*n]=u[0],e[3*t+1][3*n]=u[1]);break;default:console.error(&quot;mesh.js: &quot;+c+&quot; invalid path type.&quot;)}if(0===t&amp;&amp;0===n||r&gt;0){let e=window.getComputedStyle(o[r]).stopColor.match(/^rgb\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)$/i),a=window.getComputedStyle(o[r]).stopOpacity,h=255;a&amp;&amp;(h=Math.floor(255*a)),e&amp;&amp;(0===i?(s[t][n]=[],s[t][n][0]=Math.floor(e[1]),s[t][n][1]=Math.floor(e[2]),s[t][n][2]=Math.floor(e[3]),s[t][n][3]=h):1===i?(s[t][n+1]=[],s[t][n+1][0]=Math.floor(e[1]),s[t][n+1][1]=Math.floor(e[2]),s[t][n+1][2]=Math.floor(e[3]),s[t][n+1][3]=h):2===i?(s[t+1][n+1]=[],s[t+1][n+1][0]=Math.floor(e[1]),s[t+1][n+1][1]=Math.floor(e[2]),s[t+1][n+1][2]=Math.floor(e[3]),s[t+1][n+1][3]=h):3===i&amp;&amp;(s[t+1][n]=[],s[t+1][n][0]=Math.floor(e[1]),s[t+1][n][1]=Math.floor(e[2]),s[t+1][n][2]=Math.floor(e[3]),s[t+1][n][3]=h))}}e[3*t+1][3*n+1]=new x,e[3*t+1][3*n+2]=new x,e[3*t+2][3*n+1]=new x,e[3*t+2][3*n+2]=new x,e[3*t+1][3*n+1].x=(-4*e[3*t][3*n].x+6*(e[3*t][3*n+1].x+e[3*t+1][3*n].x)+-2*(e[3*t][3*n+3].x+e[3*t+3][3*n].x)+3*(e[3*t+3][3*n+1].x+e[3*t+1][3*n+3].x)+-1*e[3*t+3][3*n+3].x)/9,e[3*t+1][3*n+2].x=(-4*e[3*t][3*n+3].x+6*(e[3*t][3*n+2].x+e[3*t+1][3*n+3].x)+-2*(e[3*t][3*n].x+e[3*t+3][3*n+3].x)+3*(e[3*t+3][3*n+2].x+e[3*t+1][3*n].x)+-1*e[3*t+3][3*n].x)/9,e[3*t+2][3*n+1].x=(-4*e[3*t+3][3*n].x+6*(e[3*t+3][3*n+1].x+e[3*t+2][3*n].x)+-2*(e[3*t+3][3*n+3].x+e[3*t][3*n].x)+3*(e[3*t][3*n+1].x+e[3*t+2][3*n+3].x)+-1*e[3*t][3*n+3].x)/9,e[3*t+2][3*n+2].x=(-4*e[3*t+3][3*n+3].x+6*(e[3*t+3][3*n+2].x+e[3*t+2][3*n+3].x)+-2*(e[3*t+3][3*n].x+e[3*t][3*n+3].x)+3*(e[3*t][3*n+2].x+e[3*t+2][3*n].x)+-1*e[3*t][3*n].x)/9,e[3*t+1][3*n+1].y=(-4*e[3*t][3*n].y+6*(e[3*t][3*n+1].y+e[3*t+1][3*n].y)+-2*(e[3*t][3*n+3].y+e[3*t+3][3*n].y)+3*(e[3*t+3][3*n+1].y+e[3*t+1][3*n+3].y)+-1*e[3*t+3][3*n+3].y)/9,e[3*t+1][3*n+2].y=(-4*e[3*t][3*n+3].y+6*(e[3*t][3*n+2].y+e[3*t+1][3*n+3].y)+-2*(e[3*t][3*n].y+e[3*t+3][3*n+3].y)+3*(e[3*t+3][3*n+2].y+e[3*t+1][3*n].y)+-1*e[3*t+3][3*n].y)/9,e[3*t+2][3*n+1].y=(-4*e[3*t+3][3*n].y+6*(e[3*t+3][3*n+1].y+e[3*t+2][3*n].y)+-2*(e[3*t+3][3*n+3].y+e[3*t][3*n].y)+3*(e[3*t][3*n+1].y+e[3*t+2][3*n+3].y)+-1*e[3*t][3*n+3].y)/9,e[3*t+2][3*n+2].y=(-4*e[3*t+3][3*n+3].y+6*(e[3*t+3][3*n+2].y+e[3*t+2][3*n+3].y)+-2*(e[3*t+3][3*n].y+e[3*t][3*n+3].y)+3*(e[3*t][3*n+2].y+e[3*t+2][3*n].y)+-1*e[3*t][3*n].y)/9}}this.nodes=e,this.colors=s}paintMesh(t,e){let s=(this.nodes.length-1)/3,r=(this.nodes[0].length-1)/3;if(&quot;bilinear&quot;===this.type||s&lt;2||r&lt;2){let n;for(let o=0;o&lt;s;++o)for(let s=0;s&lt;r;++s){let r=[];for(let t=3*o,e=3*o+4;t&lt;e;++t)r.push(this.nodes[t].slice(3*s,3*s+4));let i=[];i.push(this.colors[o].slice(s,s+2)),i.push(this.colors[o+1].slice(s,s+2)),(n=new m(r,i)).paint(t,e)}}else{let n,o,a,h,l,d,u;const x=s,g=r;s++,r++;let w=new Array(s);for(let t=0;t&lt;s;++t){w[t]=new Array(r);for(let e=0;e&lt;r;++e)w[t][e]=[],w[t][e][0]=this.nodes[3*t][3*e],w[t][e][1]=this.colors[t][e]}for(let t=0;t&lt;s;++t)for(let e=0;e&lt;r;++e)0!==t&amp;&amp;t!==x&amp;&amp;(n=i(w[t-1][e][0],w[t][e][0]),o=i(w[t+1][e][0],w[t][e][0]),w[t][e][2]=c(w[t-1][e][1],w[t][e][1],w[t+1][e][1],n,o)),0!==e&amp;&amp;e!==g&amp;&amp;(n=i(w[t][e-1][0],w[t][e][0]),o=i(w[t][e+1][0],w[t][e][0]),w[t][e][3]=c(w[t][e-1][1],w[t][e][1],w[t][e+1][1],n,o));for(let t=0;t&lt;r;++t){w[0][t][2]=[],w[x][t][2]=[];for(let e=0;e&lt;4;++e)n=i(w[1][t][0],w[0][t][0]),o=i(w[x][t][0],w[x-1][t][0]),w[0][t][2][e]=n&gt;0?2*(w[1][t][1][e]-w[0][t][1][e])/n-w[1][t][2][e]:0,w[x][t][2][e]=o&gt;0?2*(w[x][t][1][e]-w[x-1][t][1][e])/o-w[x-1][t][2][e]:0}for(let t=0;t&lt;s;++t){w[t][0][3]=[],w[t][g][3]=[];for(let e=0;e&lt;4;++e)n=i(w[t][1][0],w[t][0][0]),o=i(w[t][g][0],w[t][g-1][0]),w[t][0][3][e]=n&gt;0?2*(w[t][1][1][e]-w[t][0][1][e])/n-w[t][1][3][e]:0,w[t][g][3][e]=o&gt;0?2*(w[t][g][1][e]-w[t][g-1][1][e])/o-w[t][g-1][3][e]:0}for(let s=0;s&lt;x;++s)for(let r=0;r&lt;g;++r){let n=i(w[s][r][0],w[s+1][r][0]),o=i(w[s][r+1][0],w[s+1][r+1][0]),c=i(w[s][r][0],w[s][r+1][0]),x=i(w[s+1][r][0],w[s+1][r+1][0]),g=[[],[],[],[]];for(let t=0;t&lt;4;++t){(d=[])[0]=w[s][r][1][t],d[1]=w[s+1][r][1][t],d[2]=w[s][r+1][1][t],d[3]=w[s+1][r+1][1][t],d[4]=w[s][r][2][t]*n,d[5]=w[s+1][r][2][t]*n,d[6]=w[s][r+1][2][t]*o,d[7]=w[s+1][r+1][2][t]*o,d[8]=w[s][r][3][t]*c,d[9]=w[s+1][r][3][t]*x,d[10]=w[s][r+1][3][t]*c,d[11]=w[s+1][r+1][3][t]*x,d[12]=0,d[13]=0,d[14]=0,d[15]=0,u=f(d);for(let e=0;e&lt;9;++e){g[t][e]=[];for(let s=0;s&lt;9;++s)g[t][e][s]=p(u,e/8,s/8),g[t][e][s]&gt;255?g[t][e][s]=255:g[t][e][s]&lt;0&amp;&amp;(g[t][e][s]=0)}}h=[];for(let t=3*s,e=3*s+4;t&lt;e;++t)h.push(this.nodes[t].slice(3*r,3*r+4));l=y(h);for(let s=0;s&lt;8;++s)for(let r=0;r&lt;8;++r)(a=new m(l[s][r],[[[g[0][s][r],g[1][s][r],g[2][s][r],g[3][s][r]],[g[0][s][r+1],g[1][s][r+1],g[2][s][r+1],g[3][s][r+1]]],[[g[0][s+1][r],g[1][s+1][r],g[2][s+1][r],g[3][s+1][r]],[g[0][s+1][r+1],g[1][s+1][r+1],g[2][s+1][r+1],g[3][s+1][r+1]]]])).paint(t,e)}}}transform(t){if(t instanceof x)for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].add(t);else if(t instanceof g)for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].transform(t)}scale(t){for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].scale(t)}}document.querySelectorAll(&quot;rect,circle,ellipse,path,text&quot;).forEach((r,n)=&gt;{let o=r.getAttribute(&quot;id&quot;);o||(o=&quot;patchjs_shape&quot;+n,r.setAttribute(&quot;id&quot;,o));const i=r.style.fill.match(/^url\(\s*&quot;?\s*#([^\s&quot;]+)&quot;?\s*\)/),a=r.style.stroke.match(/^url\(\s*&quot;?\s*#([^\s&quot;]+)&quot;?\s*\)/);if(i&amp;&amp;i[1]){const a=document.getElementById(i[1]);if(a&amp;&amp;&quot;meshgradient&quot;===a.nodeName){const i=r.getBBox();let l=document.createElementNS(s,&quot;canvas&quot;);d(l,{width:i.width,height:i.height});const c=l.getContext(&quot;2d&quot;);let u=c.createImageData(i.width,i.height);const f=new b(a);&quot;objectBoundingBox&quot;===a.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;f.scale(new x(i.width,i.height));const p=a.getAttribute(&quot;gradientTransform&quot;);null!=p&amp;&amp;f.transform(h(p)),&quot;userSpaceOnUse&quot;===a.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;f.transform(new x(-i.x,-i.y)),f.paintMesh(u.data,l.width),c.putImageData(u,0,0);const y=document.createElementNS(t,&quot;image&quot;);d(y,{width:i.width,height:i.height,x:i.x,y:i.y});let g=l.toDataURL();y.setAttributeNS(e,&quot;xlink:href&quot;,g),r.parentNode.insertBefore(y,r),r.style.fill=&quot;none&quot;;const w=document.createElementNS(t,&quot;use&quot;);w.setAttributeNS(e,&quot;xlink:href&quot;,&quot;#&quot;+o);const m=&quot;patchjs_clip&quot;+n,M=document.createElementNS(t,&quot;clipPath&quot;);M.setAttribute(&quot;id&quot;,m),M.appendChild(w),r.parentElement.insertBefore(M,r),y.setAttribute(&quot;clip-path&quot;,&quot;url(#&quot;+m+&quot;)&quot;),u=null,l=null,g=null}}if(a&amp;&amp;a[1]){const o=document.getElementById(a[1]);if(o&amp;&amp;&quot;meshgradient&quot;===o.nodeName){const i=parseFloat(r.style.strokeWidth.slice(0,-2))*(parseFloat(r.style.strokeMiterlimit)||parseFloat(r.getAttribute(&quot;stroke-miterlimit&quot;))||1),a=r.getBBox(),l=Math.trunc(a.width+i),c=Math.trunc(a.height+i),u=Math.trunc(a.x-i/2),f=Math.trunc(a.y-i/2);let p=document.createElementNS(s,&quot;canvas&quot;);d(p,{width:l,height:c});const y=p.getContext(&quot;2d&quot;);let g=y.createImageData(l,c);const w=new b(o);&quot;objectBoundingBox&quot;===o.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;w.scale(new x(l,c));const m=o.getAttribute(&quot;gradientTransform&quot;);null!=m&amp;&amp;w.transform(h(m)),&quot;userSpaceOnUse&quot;===o.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;w.transform(new x(-u,-f)),w.paintMesh(g.data,p.width),y.putImageData(g,0,0);const M=document.createElementNS(t,&quot;image&quot;);d(M,{width:l,height:c,x:0,y:0});let S=p.toDataURL();M.setAttributeNS(e,&quot;xlink:href&quot;,S);const k=&quot;pattern_clip&quot;+n,A=document.createElementNS(t,&quot;pattern&quot;);d(A,{id:k,patternUnits:&quot;userSpaceOnUse&quot;,width:l,height:c,x:u,y:f}),A.appendChild(M),o.parentNode.appendChild(A),r.style.stroke=&quot;url(#&quot;+k+&quot;)&quot;,g=null,p=null,S=null}}})}();
</script><script
       id="mesh_polyfill-60"
       type="text/javascript">
!function(){const t=&quot;http://www.w3.org/2000/svg&quot;,e=&quot;http://www.w3.org/1999/xlink&quot;,s=&quot;http://www.w3.org/1999/xhtml&quot;,r=2;if(document.createElementNS(t,&quot;meshgradient&quot;).x)return;const n=(t,e,s,r)=&gt;{let n=new x(.5*(e.x+s.x),.5*(e.y+s.y)),o=new x(.5*(t.x+e.x),.5*(t.y+e.y)),i=new x(.5*(s.x+r.x),.5*(s.y+r.y)),a=new x(.5*(n.x+o.x),.5*(n.y+o.y)),h=new x(.5*(n.x+i.x),.5*(n.y+i.y)),l=new x(.5*(a.x+h.x),.5*(a.y+h.y));return[[t,o,a,l],[l,h,i,r]]},o=t=&gt;{let e=t[0].distSquared(t[1]),s=t[2].distSquared(t[3]),r=.25*t[0].distSquared(t[2]),n=.25*t[1].distSquared(t[3]),o=e&gt;s?e:s,i=r&gt;n?r:n;return 18*(o&gt;i?o:i)},i=(t,e)=&gt;Math.sqrt(t.distSquared(e)),a=(t,e)=&gt;t.scale(2/3).add(e.scale(1/3)),h=t=&gt;{let e,s,r,n,o,i,a,h=new g;return t.match(/(\w+\(\s*[^)]+\))+/g).forEach(t=&gt;{let l=t.match(/[\w.-]+/g),d=l.shift();switch(d){case&quot;translate&quot;:2===l.length?e=new g(1,0,0,1,l[0],l[1]):(console.error(&quot;mesh.js: translate does not have 2 arguments!&quot;),e=new g(1,0,0,1,0,0)),h=h.append(e);break;case&quot;scale&quot;:1===l.length?s=new g(l[0],0,0,l[0],0,0):2===l.length?s=new g(l[0],0,0,l[1],0,0):(console.error(&quot;mesh.js: scale does not have 1 or 2 arguments!&quot;),s=new g(1,0,0,1,0,0)),h=h.append(s);break;case&quot;rotate&quot;:if(3===l.length&amp;&amp;(e=new g(1,0,0,1,l[1],l[2]),h=h.append(e)),l[0]){r=l[0]*Math.PI/180;let t=Math.cos(r),e=Math.sin(r);Math.abs(t)&lt;1e-16&amp;&amp;(t=0),Math.abs(e)&lt;1e-16&amp;&amp;(e=0),a=new g(t,e,-e,t,0,0),h=h.append(a)}else console.error(&quot;math.js: No argument to rotate transform!&quot;);3===l.length&amp;&amp;(e=new g(1,0,0,1,-l[1],-l[2]),h=h.append(e));break;case&quot;skewX&quot;:l[0]?(r=l[0]*Math.PI/180,n=Math.tan(r),o=new g(1,0,n,1,0,0),h=h.append(o)):console.error(&quot;math.js: No argument to skewX transform!&quot;);break;case&quot;skewY&quot;:l[0]?(r=l[0]*Math.PI/180,n=Math.tan(r),i=new g(1,n,0,1,0,0),h=h.append(i)):console.error(&quot;math.js: No argument to skewY transform!&quot;);break;case&quot;matrix&quot;:6===l.length?h=h.append(new g(...l)):console.error(&quot;math.js: Incorrect number of arguments for matrix!&quot;);break;default:console.error(&quot;mesh.js: Unhandled transform type: &quot;+d)}}),h},l=t=&gt;{let e=[],s=t.split(/[ ,]+/);for(let t=0,r=s.length-1;t&lt;r;t+=2)e.push(new x(parseFloat(s[t]),parseFloat(s[t+1])));return e},d=(t,e)=&gt;{for(let s in e)t.setAttribute(s,e[s])},c=(t,e,s,r,n)=&gt;{let o,i,a=[0,0,0,0];for(let h=0;h&lt;3;++h)e[h]&lt;t[h]&amp;&amp;e[h]&lt;s[h]||t[h]&lt;e[h]&amp;&amp;s[h]&lt;e[h]?a[h]=0:(a[h]=.5*((e[h]-t[h])/r+(s[h]-e[h])/n),o=Math.abs(3*(e[h]-t[h])/r),i=Math.abs(3*(s[h]-e[h])/n),a[h]&gt;o?a[h]=o:a[h]&gt;i&amp;&amp;(a[h]=i));return a},u=[[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0],[-3,3,0,0,-2,-1,0,0,0,0,0,0,0,0,0,0],[2,-2,0,0,1,1,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0],[0,0,0,0,0,0,0,0,-3,3,0,0,-2,-1,0,0],[0,0,0,0,0,0,0,0,2,-2,0,0,1,1,0,0],[-3,0,3,0,0,0,0,0,-2,0,-1,0,0,0,0,0],[0,0,0,0,-3,0,3,0,0,0,0,0,-2,0,-1,0],[9,-9,-9,9,6,3,-6,-3,6,-6,3,-3,4,2,2,1],[-6,6,6,-6,-3,-3,3,3,-4,4,-2,2,-2,-2,-1,-1],[2,0,-2,0,0,0,0,0,1,0,1,0,0,0,0,0],[0,0,0,0,2,0,-2,0,0,0,0,0,1,0,1,0],[-6,6,6,-6,-4,-2,4,2,-3,3,-3,3,-2,-1,-2,-1],[4,-4,-4,4,2,2,-2,-2,2,-2,2,-2,1,1,1,1]],f=t=&gt;{let e=[];for(let s=0;s&lt;16;++s){e[s]=0;for(let r=0;r&lt;16;++r)e[s]+=u[s][r]*t[r]}return e},p=(t,e,s)=&gt;{const r=e*e,n=s*s,o=e*e*e,i=s*s*s;return t[0]+t[1]*e+t[2]*r+t[3]*o+t[4]*s+t[5]*s*e+t[6]*s*r+t[7]*s*o+t[8]*n+t[9]*n*e+t[10]*n*r+t[11]*n*o+t[12]*i+t[13]*i*e+t[14]*i*r+t[15]*i*o},y=t=&gt;{let e=[],s=[],r=[];for(let s=0;s&lt;4;++s)e[s]=[],e[s][0]=n(t[0][s],t[1][s],t[2][s],t[3][s]),e[s][1]=[],e[s][1].push(...n(...e[s][0][0])),e[s][1].push(...n(...e[s][0][1])),e[s][2]=[],e[s][2].push(...n(...e[s][1][0])),e[s][2].push(...n(...e[s][1][1])),e[s][2].push(...n(...e[s][1][2])),e[s][2].push(...n(...e[s][1][3]));for(let t=0;t&lt;8;++t){s[t]=[];for(let r=0;r&lt;4;++r)s[t][r]=[],s[t][r][0]=n(e[0][2][t][r],e[1][2][t][r],e[2][2][t][r],e[3][2][t][r]),s[t][r][1]=[],s[t][r][1].push(...n(...s[t][r][0][0])),s[t][r][1].push(...n(...s[t][r][0][1])),s[t][r][2]=[],s[t][r][2].push(...n(...s[t][r][1][0])),s[t][r][2].push(...n(...s[t][r][1][1])),s[t][r][2].push(...n(...s[t][r][1][2])),s[t][r][2].push(...n(...s[t][r][1][3]))}for(let t=0;t&lt;8;++t){r[t]=[];for(let e=0;e&lt;8;++e)r[t][e]=[],r[t][e][0]=s[t][0][2][e],r[t][e][1]=s[t][1][2][e],r[t][e][2]=s[t][2][2][e],r[t][e][3]=s[t][3][2][e]}return r};class x{constructor(t,e){this.x=t||0,this.y=e||0}toString(){return`(x=${this.x}, y=${this.y})`}clone(){return new x(this.x,this.y)}add(t){return new x(this.x+t.x,this.y+t.y)}scale(t){return void 0===t.x?new x(this.x*t,this.y*t):new x(this.x*t.x,this.y*t.y)}distSquared(t){let e=this.x-t.x,s=this.y-t.y;return e*e+s*s}transform(t){let e=this.x*t.a+this.y*t.c+t.e,s=this.x*t.b+this.y*t.d+t.f;return new x(e,s)}}class g{constructor(t,e,s,r,n,o){void 0===t?(this.a=1,this.b=0,this.c=0,this.d=1,this.e=0,this.f=0):(this.a=t,this.b=e,this.c=s,this.d=r,this.e=n,this.f=o)}toString(){return`affine: ${this.a} ${this.c} ${this.e} \n       ${this.b} ${this.d} ${this.f}`}append(t){t instanceof g||console.error(&quot;mesh.js: argument to Affine.append is not affine!&quot;);let e=this.a*t.a+this.c*t.b,s=this.b*t.a+this.d*t.b,r=this.a*t.c+this.c*t.d,n=this.b*t.c+this.d*t.d,o=this.a*t.e+this.c*t.f+this.e,i=this.b*t.e+this.d*t.f+this.f;return new g(e,s,r,n,o,i)}}class w{constructor(t,e){this.nodes=t,this.colors=e}paintCurve(t,e){if(o(this.nodes)&gt;r){const s=n(...this.nodes);let r=[[],[]],o=[[],[]];for(let t=0;t&lt;4;++t)r[0][t]=this.colors[0][t],r[1][t]=(this.colors[0][t]+this.colors[1][t])/2,o[0][t]=r[1][t],o[1][t]=this.colors[1][t];let i=new w(s[0],r),a=new w(s[1],o);i.paintCurve(t,e),a.paintCurve(t,e)}else{let s=Math.round(this.nodes[0].x);if(s&gt;=0&amp;&amp;s&lt;e){let r=4*(~~this.nodes[0].y*e+s);t[r]=Math.round(this.colors[0][0]),t[r+1]=Math.round(this.colors[0][1]),t[r+2]=Math.round(this.colors[0][2]),t[r+3]=Math.round(this.colors[0][3])}}}}class m{constructor(t,e){this.nodes=t,this.colors=e}split(){let t=[[],[],[],[]],e=[[],[],[],[]],s=[[[],[]],[[],[]]],r=[[[],[]],[[],[]]];for(let s=0;s&lt;4;++s){const r=n(this.nodes[0][s],this.nodes[1][s],this.nodes[2][s],this.nodes[3][s]);t[0][s]=r[0][0],t[1][s]=r[0][1],t[2][s]=r[0][2],t[3][s]=r[0][3],e[0][s]=r[1][0],e[1][s]=r[1][1],e[2][s]=r[1][2],e[3][s]=r[1][3]}for(let t=0;t&lt;4;++t)s[0][0][t]=this.colors[0][0][t],s[0][1][t]=this.colors[0][1][t],s[1][0][t]=(this.colors[0][0][t]+this.colors[1][0][t])/2,s[1][1][t]=(this.colors[0][1][t]+this.colors[1][1][t])/2,r[0][0][t]=s[1][0][t],r[0][1][t]=s[1][1][t],r[1][0][t]=this.colors[1][0][t],r[1][1][t]=this.colors[1][1][t];return[new m(t,s),new m(e,r)]}paint(t,e){let s,n=!1;for(let t=0;t&lt;4;++t)if((s=o([this.nodes[0][t],this.nodes[1][t],this.nodes[2][t],this.nodes[3][t]]))&gt;r){n=!0;break}if(n){let s=this.split();s[0].paint(t,e),s[1].paint(t,e)}else{new w([...this.nodes[0]],[...this.colors[0]]).paintCurve(t,e)}}}class b{constructor(t){this.readMesh(t),this.type=t.getAttribute(&quot;type&quot;)||&quot;bilinear&quot;}readMesh(t){let e=[[]],s=[[]],r=Number(t.getAttribute(&quot;x&quot;)),n=Number(t.getAttribute(&quot;y&quot;));e[0][0]=new x(r,n);let o=t.children;for(let t=0,r=o.length;t&lt;r;++t){e[3*t+1]=[],e[3*t+2]=[],e[3*t+3]=[],s[t+1]=[];let r=o[t].children;for(let n=0,o=r.length;n&lt;o;++n){let o=r[n].children;for(let r=0,i=o.length;r&lt;i;++r){let i=r;0!==t&amp;&amp;++i;let h,d=o[r].getAttribute(&quot;path&quot;),c=&quot;l&quot;;null!=d&amp;&amp;(c=(h=d.match(/\s*([lLcC])\s*(.*)/))[1]);let u=l(h[2]);switch(c){case&quot;l&quot;:0===i?(e[3*t][3*n+3]=u[0].add(e[3*t][3*n]),e[3*t][3*n+1]=a(e[3*t][3*n],e[3*t][3*n+3]),e[3*t][3*n+2]=a(e[3*t][3*n+3],e[3*t][3*n])):1===i?(e[3*t+3][3*n+3]=u[0].add(e[3*t][3*n+3]),e[3*t+1][3*n+3]=a(e[3*t][3*n+3],e[3*t+3][3*n+3]),e[3*t+2][3*n+3]=a(e[3*t+3][3*n+3],e[3*t][3*n+3])):2===i?(0===n&amp;&amp;(e[3*t+3][3*n+0]=u[0].add(e[3*t+3][3*n+3])),e[3*t+3][3*n+1]=a(e[3*t+3][3*n],e[3*t+3][3*n+3]),e[3*t+3][3*n+2]=a(e[3*t+3][3*n+3],e[3*t+3][3*n])):(e[3*t+1][3*n]=a(e[3*t][3*n],e[3*t+3][3*n]),e[3*t+2][3*n]=a(e[3*t+3][3*n],e[3*t][3*n]));break;case&quot;L&quot;:0===i?(e[3*t][3*n+3]=u[0],e[3*t][3*n+1]=a(e[3*t][3*n],e[3*t][3*n+3]),e[3*t][3*n+2]=a(e[3*t][3*n+3],e[3*t][3*n])):1===i?(e[3*t+3][3*n+3]=u[0],e[3*t+1][3*n+3]=a(e[3*t][3*n+3],e[3*t+3][3*n+3]),e[3*t+2][3*n+3]=a(e[3*t+3][3*n+3],e[3*t][3*n+3])):2===i?(0===n&amp;&amp;(e[3*t+3][3*n+0]=u[0]),e[3*t+3][3*n+1]=a(e[3*t+3][3*n],e[3*t+3][3*n+3]),e[3*t+3][3*n+2]=a(e[3*t+3][3*n+3],e[3*t+3][3*n])):(e[3*t+1][3*n]=a(e[3*t][3*n],e[3*t+3][3*n]),e[3*t+2][3*n]=a(e[3*t+3][3*n],e[3*t][3*n]));break;case&quot;c&quot;:0===i?(e[3*t][3*n+1]=u[0].add(e[3*t][3*n]),e[3*t][3*n+2]=u[1].add(e[3*t][3*n]),e[3*t][3*n+3]=u[2].add(e[3*t][3*n])):1===i?(e[3*t+1][3*n+3]=u[0].add(e[3*t][3*n+3]),e[3*t+2][3*n+3]=u[1].add(e[3*t][3*n+3]),e[3*t+3][3*n+3]=u[2].add(e[3*t][3*n+3])):2===i?(e[3*t+3][3*n+2]=u[0].add(e[3*t+3][3*n+3]),e[3*t+3][3*n+1]=u[1].add(e[3*t+3][3*n+3]),0===n&amp;&amp;(e[3*t+3][3*n+0]=u[2].add(e[3*t+3][3*n+3]))):(e[3*t+2][3*n]=u[0].add(e[3*t+3][3*n]),e[3*t+1][3*n]=u[1].add(e[3*t+3][3*n]));break;case&quot;C&quot;:0===i?(e[3*t][3*n+1]=u[0],e[3*t][3*n+2]=u[1],e[3*t][3*n+3]=u[2]):1===i?(e[3*t+1][3*n+3]=u[0],e[3*t+2][3*n+3]=u[1],e[3*t+3][3*n+3]=u[2]):2===i?(e[3*t+3][3*n+2]=u[0],e[3*t+3][3*n+1]=u[1],0===n&amp;&amp;(e[3*t+3][3*n+0]=u[2])):(e[3*t+2][3*n]=u[0],e[3*t+1][3*n]=u[1]);break;default:console.error(&quot;mesh.js: &quot;+c+&quot; invalid path type.&quot;)}if(0===t&amp;&amp;0===n||r&gt;0){let e=window.getComputedStyle(o[r]).stopColor.match(/^rgb\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)$/i),a=window.getComputedStyle(o[r]).stopOpacity,h=255;a&amp;&amp;(h=Math.floor(255*a)),e&amp;&amp;(0===i?(s[t][n]=[],s[t][n][0]=Math.floor(e[1]),s[t][n][1]=Math.floor(e[2]),s[t][n][2]=Math.floor(e[3]),s[t][n][3]=h):1===i?(s[t][n+1]=[],s[t][n+1][0]=Math.floor(e[1]),s[t][n+1][1]=Math.floor(e[2]),s[t][n+1][2]=Math.floor(e[3]),s[t][n+1][3]=h):2===i?(s[t+1][n+1]=[],s[t+1][n+1][0]=Math.floor(e[1]),s[t+1][n+1][1]=Math.floor(e[2]),s[t+1][n+1][2]=Math.floor(e[3]),s[t+1][n+1][3]=h):3===i&amp;&amp;(s[t+1][n]=[],s[t+1][n][0]=Math.floor(e[1]),s[t+1][n][1]=Math.floor(e[2]),s[t+1][n][2]=Math.floor(e[3]),s[t+1][n][3]=h))}}e[3*t+1][3*n+1]=new x,e[3*t+1][3*n+2]=new x,e[3*t+2][3*n+1]=new x,e[3*t+2][3*n+2]=new x,e[3*t+1][3*n+1].x=(-4*e[3*t][3*n].x+6*(e[3*t][3*n+1].x+e[3*t+1][3*n].x)+-2*(e[3*t][3*n+3].x+e[3*t+3][3*n].x)+3*(e[3*t+3][3*n+1].x+e[3*t+1][3*n+3].x)+-1*e[3*t+3][3*n+3].x)/9,e[3*t+1][3*n+2].x=(-4*e[3*t][3*n+3].x+6*(e[3*t][3*n+2].x+e[3*t+1][3*n+3].x)+-2*(e[3*t][3*n].x+e[3*t+3][3*n+3].x)+3*(e[3*t+3][3*n+2].x+e[3*t+1][3*n].x)+-1*e[3*t+3][3*n].x)/9,e[3*t+2][3*n+1].x=(-4*e[3*t+3][3*n].x+6*(e[3*t+3][3*n+1].x+e[3*t+2][3*n].x)+-2*(e[3*t+3][3*n+3].x+e[3*t][3*n].x)+3*(e[3*t][3*n+1].x+e[3*t+2][3*n+3].x)+-1*e[3*t][3*n+3].x)/9,e[3*t+2][3*n+2].x=(-4*e[3*t+3][3*n+3].x+6*(e[3*t+3][3*n+2].x+e[3*t+2][3*n+3].x)+-2*(e[3*t+3][3*n].x+e[3*t][3*n+3].x)+3*(e[3*t][3*n+2].x+e[3*t+2][3*n].x)+-1*e[3*t][3*n].x)/9,e[3*t+1][3*n+1].y=(-4*e[3*t][3*n].y+6*(e[3*t][3*n+1].y+e[3*t+1][3*n].y)+-2*(e[3*t][3*n+3].y+e[3*t+3][3*n].y)+3*(e[3*t+3][3*n+1].y+e[3*t+1][3*n+3].y)+-1*e[3*t+3][3*n+3].y)/9,e[3*t+1][3*n+2].y=(-4*e[3*t][3*n+3].y+6*(e[3*t][3*n+2].y+e[3*t+1][3*n+3].y)+-2*(e[3*t][3*n].y+e[3*t+3][3*n+3].y)+3*(e[3*t+3][3*n+2].y+e[3*t+1][3*n].y)+-1*e[3*t+3][3*n].y)/9,e[3*t+2][3*n+1].y=(-4*e[3*t+3][3*n].y+6*(e[3*t+3][3*n+1].y+e[3*t+2][3*n].y)+-2*(e[3*t+3][3*n+3].y+e[3*t][3*n].y)+3*(e[3*t][3*n+1].y+e[3*t+2][3*n+3].y)+-1*e[3*t][3*n+3].y)/9,e[3*t+2][3*n+2].y=(-4*e[3*t+3][3*n+3].y+6*(e[3*t+3][3*n+2].y+e[3*t+2][3*n+3].y)+-2*(e[3*t+3][3*n].y+e[3*t][3*n+3].y)+3*(e[3*t][3*n+2].y+e[3*t+2][3*n].y)+-1*e[3*t][3*n].y)/9}}this.nodes=e,this.colors=s}paintMesh(t,e){let s=(this.nodes.length-1)/3,r=(this.nodes[0].length-1)/3;if(&quot;bilinear&quot;===this.type||s&lt;2||r&lt;2){let n;for(let o=0;o&lt;s;++o)for(let s=0;s&lt;r;++s){let r=[];for(let t=3*o,e=3*o+4;t&lt;e;++t)r.push(this.nodes[t].slice(3*s,3*s+4));let i=[];i.push(this.colors[o].slice(s,s+2)),i.push(this.colors[o+1].slice(s,s+2)),(n=new m(r,i)).paint(t,e)}}else{let n,o,a,h,l,d,u;const x=s,g=r;s++,r++;let w=new Array(s);for(let t=0;t&lt;s;++t){w[t]=new Array(r);for(let e=0;e&lt;r;++e)w[t][e]=[],w[t][e][0]=this.nodes[3*t][3*e],w[t][e][1]=this.colors[t][e]}for(let t=0;t&lt;s;++t)for(let e=0;e&lt;r;++e)0!==t&amp;&amp;t!==x&amp;&amp;(n=i(w[t-1][e][0],w[t][e][0]),o=i(w[t+1][e][0],w[t][e][0]),w[t][e][2]=c(w[t-1][e][1],w[t][e][1],w[t+1][e][1],n,o)),0!==e&amp;&amp;e!==g&amp;&amp;(n=i(w[t][e-1][0],w[t][e][0]),o=i(w[t][e+1][0],w[t][e][0]),w[t][e][3]=c(w[t][e-1][1],w[t][e][1],w[t][e+1][1],n,o));for(let t=0;t&lt;r;++t){w[0][t][2]=[],w[x][t][2]=[];for(let e=0;e&lt;4;++e)n=i(w[1][t][0],w[0][t][0]),o=i(w[x][t][0],w[x-1][t][0]),w[0][t][2][e]=n&gt;0?2*(w[1][t][1][e]-w[0][t][1][e])/n-w[1][t][2][e]:0,w[x][t][2][e]=o&gt;0?2*(w[x][t][1][e]-w[x-1][t][1][e])/o-w[x-1][t][2][e]:0}for(let t=0;t&lt;s;++t){w[t][0][3]=[],w[t][g][3]=[];for(let e=0;e&lt;4;++e)n=i(w[t][1][0],w[t][0][0]),o=i(w[t][g][0],w[t][g-1][0]),w[t][0][3][e]=n&gt;0?2*(w[t][1][1][e]-w[t][0][1][e])/n-w[t][1][3][e]:0,w[t][g][3][e]=o&gt;0?2*(w[t][g][1][e]-w[t][g-1][1][e])/o-w[t][g-1][3][e]:0}for(let s=0;s&lt;x;++s)for(let r=0;r&lt;g;++r){let n=i(w[s][r][0],w[s+1][r][0]),o=i(w[s][r+1][0],w[s+1][r+1][0]),c=i(w[s][r][0],w[s][r+1][0]),x=i(w[s+1][r][0],w[s+1][r+1][0]),g=[[],[],[],[]];for(let t=0;t&lt;4;++t){(d=[])[0]=w[s][r][1][t],d[1]=w[s+1][r][1][t],d[2]=w[s][r+1][1][t],d[3]=w[s+1][r+1][1][t],d[4]=w[s][r][2][t]*n,d[5]=w[s+1][r][2][t]*n,d[6]=w[s][r+1][2][t]*o,d[7]=w[s+1][r+1][2][t]*o,d[8]=w[s][r][3][t]*c,d[9]=w[s+1][r][3][t]*x,d[10]=w[s][r+1][3][t]*c,d[11]=w[s+1][r+1][3][t]*x,d[12]=0,d[13]=0,d[14]=0,d[15]=0,u=f(d);for(let e=0;e&lt;9;++e){g[t][e]=[];for(let s=0;s&lt;9;++s)g[t][e][s]=p(u,e/8,s/8),g[t][e][s]&gt;255?g[t][e][s]=255:g[t][e][s]&lt;0&amp;&amp;(g[t][e][s]=0)}}h=[];for(let t=3*s,e=3*s+4;t&lt;e;++t)h.push(this.nodes[t].slice(3*r,3*r+4));l=y(h);for(let s=0;s&lt;8;++s)for(let r=0;r&lt;8;++r)(a=new m(l[s][r],[[[g[0][s][r],g[1][s][r],g[2][s][r],g[3][s][r]],[g[0][s][r+1],g[1][s][r+1],g[2][s][r+1],g[3][s][r+1]]],[[g[0][s+1][r],g[1][s+1][r],g[2][s+1][r],g[3][s+1][r]],[g[0][s+1][r+1],g[1][s+1][r+1],g[2][s+1][r+1],g[3][s+1][r+1]]]])).paint(t,e)}}}transform(t){if(t instanceof x)for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].add(t);else if(t instanceof g)for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].transform(t)}scale(t){for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].scale(t)}}document.querySelectorAll(&quot;rect,circle,ellipse,path,text&quot;).forEach((r,n)=&gt;{let o=r.getAttribute(&quot;id&quot;);o||(o=&quot;patchjs_shape&quot;+n,r.setAttribute(&quot;id&quot;,o));const i=r.style.fill.match(/^url\(\s*&quot;?\s*#([^\s&quot;]+)&quot;?\s*\)/),a=r.style.stroke.match(/^url\(\s*&quot;?\s*#([^\s&quot;]+)&quot;?\s*\)/);if(i&amp;&amp;i[1]){const a=document.getElementById(i[1]);if(a&amp;&amp;&quot;meshgradient&quot;===a.nodeName){const i=r.getBBox();let l=document.createElementNS(s,&quot;canvas&quot;);d(l,{width:i.width,height:i.height});const c=l.getContext(&quot;2d&quot;);let u=c.createImageData(i.width,i.height);const f=new b(a);&quot;objectBoundingBox&quot;===a.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;f.scale(new x(i.width,i.height));const p=a.getAttribute(&quot;gradientTransform&quot;);null!=p&amp;&amp;f.transform(h(p)),&quot;userSpaceOnUse&quot;===a.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;f.transform(new x(-i.x,-i.y)),f.paintMesh(u.data,l.width),c.putImageData(u,0,0);const y=document.createElementNS(t,&quot;image&quot;);d(y,{width:i.width,height:i.height,x:i.x,y:i.y});let g=l.toDataURL();y.setAttributeNS(e,&quot;xlink:href&quot;,g),r.parentNode.insertBefore(y,r),r.style.fill=&quot;none&quot;;const w=document.createElementNS(t,&quot;use&quot;);w.setAttributeNS(e,&quot;xlink:href&quot;,&quot;#&quot;+o);const m=&quot;patchjs_clip&quot;+n,M=document.createElementNS(t,&quot;clipPath&quot;);M.setAttribute(&quot;id&quot;,m),M.appendChild(w),r.parentElement.insertBefore(M,r),y.setAttribute(&quot;clip-path&quot;,&quot;url(#&quot;+m+&quot;)&quot;),u=null,l=null,g=null}}if(a&amp;&amp;a[1]){const o=document.getElementById(a[1]);if(o&amp;&amp;&quot;meshgradient&quot;===o.nodeName){const i=parseFloat(r.style.strokeWidth.slice(0,-2))*(parseFloat(r.style.strokeMiterlimit)||parseFloat(r.getAttribute(&quot;stroke-miterlimit&quot;))||1),a=r.getBBox(),l=Math.trunc(a.width+i),c=Math.trunc(a.height+i),u=Math.trunc(a.x-i/2),f=Math.trunc(a.y-i/2);let p=document.createElementNS(s,&quot;canvas&quot;);d(p,{width:l,height:c});const y=p.getContext(&quot;2d&quot;);let g=y.createImageData(l,c);const w=new b(o);&quot;objectBoundingBox&quot;===o.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;w.scale(new x(l,c));const m=o.getAttribute(&quot;gradientTransform&quot;);null!=m&amp;&amp;w.transform(h(m)),&quot;userSpaceOnUse&quot;===o.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;w.transform(new x(-u,-f)),w.paintMesh(g.data,p.width),y.putImageData(g,0,0);const M=document.createElementNS(t,&quot;image&quot;);d(M,{width:l,height:c,x:0,y:0});let S=p.toDataURL();M.setAttributeNS(e,&quot;xlink:href&quot;,S);const k=&quot;pattern_clip&quot;+n,A=document.createElementNS(t,&quot;pattern&quot;);d(A,{id:k,patternUnits:&quot;userSpaceOnUse&quot;,width:l,height:c,x:u,y:f}),A.appendChild(M),o.parentNode.appendChild(A),r.style.stroke=&quot;url(#&quot;+k+&quot;)&quot;,g=null,p=null,S=null}}})}();
</script><script
       id="mesh_polyfill-5"
       type="text/javascript">
!function(){const t=&quot;http://www.w3.org/2000/svg&quot;,e=&quot;http://www.w3.org/1999/xlink&quot;,s=&quot;http://www.w3.org/1999/xhtml&quot;,r=2;if(document.createElementNS(t,&quot;meshgradient&quot;).x)return;const n=(t,e,s,r)=&gt;{let n=new x(.5*(e.x+s.x),.5*(e.y+s.y)),o=new x(.5*(t.x+e.x),.5*(t.y+e.y)),i=new x(.5*(s.x+r.x),.5*(s.y+r.y)),a=new x(.5*(n.x+o.x),.5*(n.y+o.y)),h=new x(.5*(n.x+i.x),.5*(n.y+i.y)),l=new x(.5*(a.x+h.x),.5*(a.y+h.y));return[[t,o,a,l],[l,h,i,r]]},o=t=&gt;{let e=t[0].distSquared(t[1]),s=t[2].distSquared(t[3]),r=.25*t[0].distSquared(t[2]),n=.25*t[1].distSquared(t[3]),o=e&gt;s?e:s,i=r&gt;n?r:n;return 18*(o&gt;i?o:i)},i=(t,e)=&gt;Math.sqrt(t.distSquared(e)),a=(t,e)=&gt;t.scale(2/3).add(e.scale(1/3)),h=t=&gt;{let e,s,r,n,o,i,a,h=new g;return t.match(/(\w+\(\s*[^)]+\))+/g).forEach(t=&gt;{let l=t.match(/[\w.-]+/g),d=l.shift();switch(d){case&quot;translate&quot;:2===l.length?e=new g(1,0,0,1,l[0],l[1]):(console.error(&quot;mesh.js: translate does not have 2 arguments!&quot;),e=new g(1,0,0,1,0,0)),h=h.append(e);break;case&quot;scale&quot;:1===l.length?s=new g(l[0],0,0,l[0],0,0):2===l.length?s=new g(l[0],0,0,l[1],0,0):(console.error(&quot;mesh.js: scale does not have 1 or 2 arguments!&quot;),s=new g(1,0,0,1,0,0)),h=h.append(s);break;case&quot;rotate&quot;:if(3===l.length&amp;&amp;(e=new g(1,0,0,1,l[1],l[2]),h=h.append(e)),l[0]){r=l[0]*Math.PI/180;let t=Math.cos(r),e=Math.sin(r);Math.abs(t)&lt;1e-16&amp;&amp;(t=0),Math.abs(e)&lt;1e-16&amp;&amp;(e=0),a=new g(t,e,-e,t,0,0),h=h.append(a)}else console.error(&quot;math.js: No argument to rotate transform!&quot;);3===l.length&amp;&amp;(e=new g(1,0,0,1,-l[1],-l[2]),h=h.append(e));break;case&quot;skewX&quot;:l[0]?(r=l[0]*Math.PI/180,n=Math.tan(r),o=new g(1,0,n,1,0,0),h=h.append(o)):console.error(&quot;math.js: No argument to skewX transform!&quot;);break;case&quot;skewY&quot;:l[0]?(r=l[0]*Math.PI/180,n=Math.tan(r),i=new g(1,n,0,1,0,0),h=h.append(i)):console.error(&quot;math.js: No argument to skewY transform!&quot;);break;case&quot;matrix&quot;:6===l.length?h=h.append(new g(...l)):console.error(&quot;math.js: Incorrect number of arguments for matrix!&quot;);break;default:console.error(&quot;mesh.js: Unhandled transform type: &quot;+d)}}),h},l=t=&gt;{let e=[],s=t.split(/[ ,]+/);for(let t=0,r=s.length-1;t&lt;r;t+=2)e.push(new x(parseFloat(s[t]),parseFloat(s[t+1])));return e},d=(t,e)=&gt;{for(let s in e)t.setAttribute(s,e[s])},c=(t,e,s,r,n)=&gt;{let o,i,a=[0,0,0,0];for(let h=0;h&lt;3;++h)e[h]&lt;t[h]&amp;&amp;e[h]&lt;s[h]||t[h]&lt;e[h]&amp;&amp;s[h]&lt;e[h]?a[h]=0:(a[h]=.5*((e[h]-t[h])/r+(s[h]-e[h])/n),o=Math.abs(3*(e[h]-t[h])/r),i=Math.abs(3*(s[h]-e[h])/n),a[h]&gt;o?a[h]=o:a[h]&gt;i&amp;&amp;(a[h]=i));return a},u=[[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0],[-3,3,0,0,-2,-1,0,0,0,0,0,0,0,0,0,0],[2,-2,0,0,1,1,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0],[0,0,0,0,0,0,0,0,-3,3,0,0,-2,-1,0,0],[0,0,0,0,0,0,0,0,2,-2,0,0,1,1,0,0],[-3,0,3,0,0,0,0,0,-2,0,-1,0,0,0,0,0],[0,0,0,0,-3,0,3,0,0,0,0,0,-2,0,-1,0],[9,-9,-9,9,6,3,-6,-3,6,-6,3,-3,4,2,2,1],[-6,6,6,-6,-3,-3,3,3,-4,4,-2,2,-2,-2,-1,-1],[2,0,-2,0,0,0,0,0,1,0,1,0,0,0,0,0],[0,0,0,0,2,0,-2,0,0,0,0,0,1,0,1,0],[-6,6,6,-6,-4,-2,4,2,-3,3,-3,3,-2,-1,-2,-1],[4,-4,-4,4,2,2,-2,-2,2,-2,2,-2,1,1,1,1]],f=t=&gt;{let e=[];for(let s=0;s&lt;16;++s){e[s]=0;for(let r=0;r&lt;16;++r)e[s]+=u[s][r]*t[r]}return e},p=(t,e,s)=&gt;{const r=e*e,n=s*s,o=e*e*e,i=s*s*s;return t[0]+t[1]*e+t[2]*r+t[3]*o+t[4]*s+t[5]*s*e+t[6]*s*r+t[7]*s*o+t[8]*n+t[9]*n*e+t[10]*n*r+t[11]*n*o+t[12]*i+t[13]*i*e+t[14]*i*r+t[15]*i*o},y=t=&gt;{let e=[],s=[],r=[];for(let s=0;s&lt;4;++s)e[s]=[],e[s][0]=n(t[0][s],t[1][s],t[2][s],t[3][s]),e[s][1]=[],e[s][1].push(...n(...e[s][0][0])),e[s][1].push(...n(...e[s][0][1])),e[s][2]=[],e[s][2].push(...n(...e[s][1][0])),e[s][2].push(...n(...e[s][1][1])),e[s][2].push(...n(...e[s][1][2])),e[s][2].push(...n(...e[s][1][3]));for(let t=0;t&lt;8;++t){s[t]=[];for(let r=0;r&lt;4;++r)s[t][r]=[],s[t][r][0]=n(e[0][2][t][r],e[1][2][t][r],e[2][2][t][r],e[3][2][t][r]),s[t][r][1]=[],s[t][r][1].push(...n(...s[t][r][0][0])),s[t][r][1].push(...n(...s[t][r][0][1])),s[t][r][2]=[],s[t][r][2].push(...n(...s[t][r][1][0])),s[t][r][2].push(...n(...s[t][r][1][1])),s[t][r][2].push(...n(...s[t][r][1][2])),s[t][r][2].push(...n(...s[t][r][1][3]))}for(let t=0;t&lt;8;++t){r[t]=[];for(let e=0;e&lt;8;++e)r[t][e]=[],r[t][e][0]=s[t][0][2][e],r[t][e][1]=s[t][1][2][e],r[t][e][2]=s[t][2][2][e],r[t][e][3]=s[t][3][2][e]}return r};class x{constructor(t,e){this.x=t||0,this.y=e||0}toString(){return`(x=${this.x}, y=${this.y})`}clone(){return new x(this.x,this.y)}add(t){return new x(this.x+t.x,this.y+t.y)}scale(t){return void 0===t.x?new x(this.x*t,this.y*t):new x(this.x*t.x,this.y*t.y)}distSquared(t){let e=this.x-t.x,s=this.y-t.y;return e*e+s*s}transform(t){let e=this.x*t.a+this.y*t.c+t.e,s=this.x*t.b+this.y*t.d+t.f;return new x(e,s)}}class g{constructor(t,e,s,r,n,o){void 0===t?(this.a=1,this.b=0,this.c=0,this.d=1,this.e=0,this.f=0):(this.a=t,this.b=e,this.c=s,this.d=r,this.e=n,this.f=o)}toString(){return`affine: ${this.a} ${this.c} ${this.e} \n       ${this.b} ${this.d} ${this.f}`}append(t){t instanceof g||console.error(&quot;mesh.js: argument to Affine.append is not affine!&quot;);let e=this.a*t.a+this.c*t.b,s=this.b*t.a+this.d*t.b,r=this.a*t.c+this.c*t.d,n=this.b*t.c+this.d*t.d,o=this.a*t.e+this.c*t.f+this.e,i=this.b*t.e+this.d*t.f+this.f;return new g(e,s,r,n,o,i)}}class w{constructor(t,e){this.nodes=t,this.colors=e}paintCurve(t,e){if(o(this.nodes)&gt;r){const s=n(...this.nodes);let r=[[],[]],o=[[],[]];for(let t=0;t&lt;4;++t)r[0][t]=this.colors[0][t],r[1][t]=(this.colors[0][t]+this.colors[1][t])/2,o[0][t]=r[1][t],o[1][t]=this.colors[1][t];let i=new w(s[0],r),a=new w(s[1],o);i.paintCurve(t,e),a.paintCurve(t,e)}else{let s=Math.round(this.nodes[0].x);if(s&gt;=0&amp;&amp;s&lt;e){let r=4*(~~this.nodes[0].y*e+s);t[r]=Math.round(this.colors[0][0]),t[r+1]=Math.round(this.colors[0][1]),t[r+2]=Math.round(this.colors[0][2]),t[r+3]=Math.round(this.colors[0][3])}}}}class m{constructor(t,e){this.nodes=t,this.colors=e}split(){let t=[[],[],[],[]],e=[[],[],[],[]],s=[[[],[]],[[],[]]],r=[[[],[]],[[],[]]];for(let s=0;s&lt;4;++s){const r=n(this.nodes[0][s],this.nodes[1][s],this.nodes[2][s],this.nodes[3][s]);t[0][s]=r[0][0],t[1][s]=r[0][1],t[2][s]=r[0][2],t[3][s]=r[0][3],e[0][s]=r[1][0],e[1][s]=r[1][1],e[2][s]=r[1][2],e[3][s]=r[1][3]}for(let t=0;t&lt;4;++t)s[0][0][t]=this.colors[0][0][t],s[0][1][t]=this.colors[0][1][t],s[1][0][t]=(this.colors[0][0][t]+this.colors[1][0][t])/2,s[1][1][t]=(this.colors[0][1][t]+this.colors[1][1][t])/2,r[0][0][t]=s[1][0][t],r[0][1][t]=s[1][1][t],r[1][0][t]=this.colors[1][0][t],r[1][1][t]=this.colors[1][1][t];return[new m(t,s),new m(e,r)]}paint(t,e){let s,n=!1;for(let t=0;t&lt;4;++t)if((s=o([this.nodes[0][t],this.nodes[1][t],this.nodes[2][t],this.nodes[3][t]]))&gt;r){n=!0;break}if(n){let s=this.split();s[0].paint(t,e),s[1].paint(t,e)}else{new w([...this.nodes[0]],[...this.colors[0]]).paintCurve(t,e)}}}class b{constructor(t){this.readMesh(t),this.type=t.getAttribute(&quot;type&quot;)||&quot;bilinear&quot;}readMesh(t){let e=[[]],s=[[]],r=Number(t.getAttribute(&quot;x&quot;)),n=Number(t.getAttribute(&quot;y&quot;));e[0][0]=new x(r,n);let o=t.children;for(let t=0,r=o.length;t&lt;r;++t){e[3*t+1]=[],e[3*t+2]=[],e[3*t+3]=[],s[t+1]=[];let r=o[t].children;for(let n=0,o=r.length;n&lt;o;++n){let o=r[n].children;for(let r=0,i=o.length;r&lt;i;++r){let i=r;0!==t&amp;&amp;++i;let h,d=o[r].getAttribute(&quot;path&quot;),c=&quot;l&quot;;null!=d&amp;&amp;(c=(h=d.match(/\s*([lLcC])\s*(.*)/))[1]);let u=l(h[2]);switch(c){case&quot;l&quot;:0===i?(e[3*t][3*n+3]=u[0].add(e[3*t][3*n]),e[3*t][3*n+1]=a(e[3*t][3*n],e[3*t][3*n+3]),e[3*t][3*n+2]=a(e[3*t][3*n+3],e[3*t][3*n])):1===i?(e[3*t+3][3*n+3]=u[0].add(e[3*t][3*n+3]),e[3*t+1][3*n+3]=a(e[3*t][3*n+3],e[3*t+3][3*n+3]),e[3*t+2][3*n+3]=a(e[3*t+3][3*n+3],e[3*t][3*n+3])):2===i?(0===n&amp;&amp;(e[3*t+3][3*n+0]=u[0].add(e[3*t+3][3*n+3])),e[3*t+3][3*n+1]=a(e[3*t+3][3*n],e[3*t+3][3*n+3]),e[3*t+3][3*n+2]=a(e[3*t+3][3*n+3],e[3*t+3][3*n])):(e[3*t+1][3*n]=a(e[3*t][3*n],e[3*t+3][3*n]),e[3*t+2][3*n]=a(e[3*t+3][3*n],e[3*t][3*n]));break;case&quot;L&quot;:0===i?(e[3*t][3*n+3]=u[0],e[3*t][3*n+1]=a(e[3*t][3*n],e[3*t][3*n+3]),e[3*t][3*n+2]=a(e[3*t][3*n+3],e[3*t][3*n])):1===i?(e[3*t+3][3*n+3]=u[0],e[3*t+1][3*n+3]=a(e[3*t][3*n+3],e[3*t+3][3*n+3]),e[3*t+2][3*n+3]=a(e[3*t+3][3*n+3],e[3*t][3*n+3])):2===i?(0===n&amp;&amp;(e[3*t+3][3*n+0]=u[0]),e[3*t+3][3*n+1]=a(e[3*t+3][3*n],e[3*t+3][3*n+3]),e[3*t+3][3*n+2]=a(e[3*t+3][3*n+3],e[3*t+3][3*n])):(e[3*t+1][3*n]=a(e[3*t][3*n],e[3*t+3][3*n]),e[3*t+2][3*n]=a(e[3*t+3][3*n],e[3*t][3*n]));break;case&quot;c&quot;:0===i?(e[3*t][3*n+1]=u[0].add(e[3*t][3*n]),e[3*t][3*n+2]=u[1].add(e[3*t][3*n]),e[3*t][3*n+3]=u[2].add(e[3*t][3*n])):1===i?(e[3*t+1][3*n+3]=u[0].add(e[3*t][3*n+3]),e[3*t+2][3*n+3]=u[1].add(e[3*t][3*n+3]),e[3*t+3][3*n+3]=u[2].add(e[3*t][3*n+3])):2===i?(e[3*t+3][3*n+2]=u[0].add(e[3*t+3][3*n+3]),e[3*t+3][3*n+1]=u[1].add(e[3*t+3][3*n+3]),0===n&amp;&amp;(e[3*t+3][3*n+0]=u[2].add(e[3*t+3][3*n+3]))):(e[3*t+2][3*n]=u[0].add(e[3*t+3][3*n]),e[3*t+1][3*n]=u[1].add(e[3*t+3][3*n]));break;case&quot;C&quot;:0===i?(e[3*t][3*n+1]=u[0],e[3*t][3*n+2]=u[1],e[3*t][3*n+3]=u[2]):1===i?(e[3*t+1][3*n+3]=u[0],e[3*t+2][3*n+3]=u[1],e[3*t+3][3*n+3]=u[2]):2===i?(e[3*t+3][3*n+2]=u[0],e[3*t+3][3*n+1]=u[1],0===n&amp;&amp;(e[3*t+3][3*n+0]=u[2])):(e[3*t+2][3*n]=u[0],e[3*t+1][3*n]=u[1]);break;default:console.error(&quot;mesh.js: &quot;+c+&quot; invalid path type.&quot;)}if(0===t&amp;&amp;0===n||r&gt;0){let e=window.getComputedStyle(o[r]).stopColor.match(/^rgb\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)$/i),a=window.getComputedStyle(o[r]).stopOpacity,h=255;a&amp;&amp;(h=Math.floor(255*a)),e&amp;&amp;(0===i?(s[t][n]=[],s[t][n][0]=Math.floor(e[1]),s[t][n][1]=Math.floor(e[2]),s[t][n][2]=Math.floor(e[3]),s[t][n][3]=h):1===i?(s[t][n+1]=[],s[t][n+1][0]=Math.floor(e[1]),s[t][n+1][1]=Math.floor(e[2]),s[t][n+1][2]=Math.floor(e[3]),s[t][n+1][3]=h):2===i?(s[t+1][n+1]=[],s[t+1][n+1][0]=Math.floor(e[1]),s[t+1][n+1][1]=Math.floor(e[2]),s[t+1][n+1][2]=Math.floor(e[3]),s[t+1][n+1][3]=h):3===i&amp;&amp;(s[t+1][n]=[],s[t+1][n][0]=Math.floor(e[1]),s[t+1][n][1]=Math.floor(e[2]),s[t+1][n][2]=Math.floor(e[3]),s[t+1][n][3]=h))}}e[3*t+1][3*n+1]=new x,e[3*t+1][3*n+2]=new x,e[3*t+2][3*n+1]=new x,e[3*t+2][3*n+2]=new x,e[3*t+1][3*n+1].x=(-4*e[3*t][3*n].x+6*(e[3*t][3*n+1].x+e[3*t+1][3*n].x)+-2*(e[3*t][3*n+3].x+e[3*t+3][3*n].x)+3*(e[3*t+3][3*n+1].x+e[3*t+1][3*n+3].x)+-1*e[3*t+3][3*n+3].x)/9,e[3*t+1][3*n+2].x=(-4*e[3*t][3*n+3].x+6*(e[3*t][3*n+2].x+e[3*t+1][3*n+3].x)+-2*(e[3*t][3*n].x+e[3*t+3][3*n+3].x)+3*(e[3*t+3][3*n+2].x+e[3*t+1][3*n].x)+-1*e[3*t+3][3*n].x)/9,e[3*t+2][3*n+1].x=(-4*e[3*t+3][3*n].x+6*(e[3*t+3][3*n+1].x+e[3*t+2][3*n].x)+-2*(e[3*t+3][3*n+3].x+e[3*t][3*n].x)+3*(e[3*t][3*n+1].x+e[3*t+2][3*n+3].x)+-1*e[3*t][3*n+3].x)/9,e[3*t+2][3*n+2].x=(-4*e[3*t+3][3*n+3].x+6*(e[3*t+3][3*n+2].x+e[3*t+2][3*n+3].x)+-2*(e[3*t+3][3*n].x+e[3*t][3*n+3].x)+3*(e[3*t][3*n+2].x+e[3*t+2][3*n].x)+-1*e[3*t][3*n].x)/9,e[3*t+1][3*n+1].y=(-4*e[3*t][3*n].y+6*(e[3*t][3*n+1].y+e[3*t+1][3*n].y)+-2*(e[3*t][3*n+3].y+e[3*t+3][3*n].y)+3*(e[3*t+3][3*n+1].y+e[3*t+1][3*n+3].y)+-1*e[3*t+3][3*n+3].y)/9,e[3*t+1][3*n+2].y=(-4*e[3*t][3*n+3].y+6*(e[3*t][3*n+2].y+e[3*t+1][3*n+3].y)+-2*(e[3*t][3*n].y+e[3*t+3][3*n+3].y)+3*(e[3*t+3][3*n+2].y+e[3*t+1][3*n].y)+-1*e[3*t+3][3*n].y)/9,e[3*t+2][3*n+1].y=(-4*e[3*t+3][3*n].y+6*(e[3*t+3][3*n+1].y+e[3*t+2][3*n].y)+-2*(e[3*t+3][3*n+3].y+e[3*t][3*n].y)+3*(e[3*t][3*n+1].y+e[3*t+2][3*n+3].y)+-1*e[3*t][3*n+3].y)/9,e[3*t+2][3*n+2].y=(-4*e[3*t+3][3*n+3].y+6*(e[3*t+3][3*n+2].y+e[3*t+2][3*n+3].y)+-2*(e[3*t+3][3*n].y+e[3*t][3*n+3].y)+3*(e[3*t][3*n+2].y+e[3*t+2][3*n].y)+-1*e[3*t][3*n].y)/9}}this.nodes=e,this.colors=s}paintMesh(t,e){let s=(this.nodes.length-1)/3,r=(this.nodes[0].length-1)/3;if(&quot;bilinear&quot;===this.type||s&lt;2||r&lt;2){let n;for(let o=0;o&lt;s;++o)for(let s=0;s&lt;r;++s){let r=[];for(let t=3*o,e=3*o+4;t&lt;e;++t)r.push(this.nodes[t].slice(3*s,3*s+4));let i=[];i.push(this.colors[o].slice(s,s+2)),i.push(this.colors[o+1].slice(s,s+2)),(n=new m(r,i)).paint(t,e)}}else{let n,o,a,h,l,d,u;const x=s,g=r;s++,r++;let w=new Array(s);for(let t=0;t&lt;s;++t){w[t]=new Array(r);for(let e=0;e&lt;r;++e)w[t][e]=[],w[t][e][0]=this.nodes[3*t][3*e],w[t][e][1]=this.colors[t][e]}for(let t=0;t&lt;s;++t)for(let e=0;e&lt;r;++e)0!==t&amp;&amp;t!==x&amp;&amp;(n=i(w[t-1][e][0],w[t][e][0]),o=i(w[t+1][e][0],w[t][e][0]),w[t][e][2]=c(w[t-1][e][1],w[t][e][1],w[t+1][e][1],n,o)),0!==e&amp;&amp;e!==g&amp;&amp;(n=i(w[t][e-1][0],w[t][e][0]),o=i(w[t][e+1][0],w[t][e][0]),w[t][e][3]=c(w[t][e-1][1],w[t][e][1],w[t][e+1][1],n,o));for(let t=0;t&lt;r;++t){w[0][t][2]=[],w[x][t][2]=[];for(let e=0;e&lt;4;++e)n=i(w[1][t][0],w[0][t][0]),o=i(w[x][t][0],w[x-1][t][0]),w[0][t][2][e]=n&gt;0?2*(w[1][t][1][e]-w[0][t][1][e])/n-w[1][t][2][e]:0,w[x][t][2][e]=o&gt;0?2*(w[x][t][1][e]-w[x-1][t][1][e])/o-w[x-1][t][2][e]:0}for(let t=0;t&lt;s;++t){w[t][0][3]=[],w[t][g][3]=[];for(let e=0;e&lt;4;++e)n=i(w[t][1][0],w[t][0][0]),o=i(w[t][g][0],w[t][g-1][0]),w[t][0][3][e]=n&gt;0?2*(w[t][1][1][e]-w[t][0][1][e])/n-w[t][1][3][e]:0,w[t][g][3][e]=o&gt;0?2*(w[t][g][1][e]-w[t][g-1][1][e])/o-w[t][g-1][3][e]:0}for(let s=0;s&lt;x;++s)for(let r=0;r&lt;g;++r){let n=i(w[s][r][0],w[s+1][r][0]),o=i(w[s][r+1][0],w[s+1][r+1][0]),c=i(w[s][r][0],w[s][r+1][0]),x=i(w[s+1][r][0],w[s+1][r+1][0]),g=[[],[],[],[]];for(let t=0;t&lt;4;++t){(d=[])[0]=w[s][r][1][t],d[1]=w[s+1][r][1][t],d[2]=w[s][r+1][1][t],d[3]=w[s+1][r+1][1][t],d[4]=w[s][r][2][t]*n,d[5]=w[s+1][r][2][t]*n,d[6]=w[s][r+1][2][t]*o,d[7]=w[s+1][r+1][2][t]*o,d[8]=w[s][r][3][t]*c,d[9]=w[s+1][r][3][t]*x,d[10]=w[s][r+1][3][t]*c,d[11]=w[s+1][r+1][3][t]*x,d[12]=0,d[13]=0,d[14]=0,d[15]=0,u=f(d);for(let e=0;e&lt;9;++e){g[t][e]=[];for(let s=0;s&lt;9;++s)g[t][e][s]=p(u,e/8,s/8),g[t][e][s]&gt;255?g[t][e][s]=255:g[t][e][s]&lt;0&amp;&amp;(g[t][e][s]=0)}}h=[];for(let t=3*s,e=3*s+4;t&lt;e;++t)h.push(this.nodes[t].slice(3*r,3*r+4));l=y(h);for(let s=0;s&lt;8;++s)for(let r=0;r&lt;8;++r)(a=new m(l[s][r],[[[g[0][s][r],g[1][s][r],g[2][s][r],g[3][s][r]],[g[0][s][r+1],g[1][s][r+1],g[2][s][r+1],g[3][s][r+1]]],[[g[0][s+1][r],g[1][s+1][r],g[2][s+1][r],g[3][s+1][r]],[g[0][s+1][r+1],g[1][s+1][r+1],g[2][s+1][r+1],g[3][s+1][r+1]]]])).paint(t,e)}}}transform(t){if(t instanceof x)for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].add(t);else if(t instanceof g)for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].transform(t)}scale(t){for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].scale(t)}}document.querySelectorAll(&quot;rect,circle,ellipse,path,text&quot;).forEach((r,n)=&gt;{let o=r.getAttribute(&quot;id&quot;);o||(o=&quot;patchjs_shape&quot;+n,r.setAttribute(&quot;id&quot;,o));const i=r.style.fill.match(/^url\(\s*&quot;?\s*#([^\s&quot;]+)&quot;?\s*\)/),a=r.style.stroke.match(/^url\(\s*&quot;?\s*#([^\s&quot;]+)&quot;?\s*\)/);if(i&amp;&amp;i[1]){const a=document.getElementById(i[1]);if(a&amp;&amp;&quot;meshgradient&quot;===a.nodeName){const i=r.getBBox();let l=document.createElementNS(s,&quot;canvas&quot;);d(l,{width:i.width,height:i.height});const c=l.getContext(&quot;2d&quot;);let u=c.createImageData(i.width,i.height);const f=new b(a);&quot;objectBoundingBox&quot;===a.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;f.scale(new x(i.width,i.height));const p=a.getAttribute(&quot;gradientTransform&quot;);null!=p&amp;&amp;f.transform(h(p)),&quot;userSpaceOnUse&quot;===a.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;f.transform(new x(-i.x,-i.y)),f.paintMesh(u.data,l.width),c.putImageData(u,0,0);const y=document.createElementNS(t,&quot;image&quot;);d(y,{width:i.width,height:i.height,x:i.x,y:i.y});let g=l.toDataURL();y.setAttributeNS(e,&quot;xlink:href&quot;,g),r.parentNode.insertBefore(y,r),r.style.fill=&quot;none&quot;;const w=document.createElementNS(t,&quot;use&quot;);w.setAttributeNS(e,&quot;xlink:href&quot;,&quot;#&quot;+o);const m=&quot;patchjs_clip&quot;+n,M=document.createElementNS(t,&quot;clipPath&quot;);M.setAttribute(&quot;id&quot;,m),M.appendChild(w),r.parentElement.insertBefore(M,r),y.setAttribute(&quot;clip-path&quot;,&quot;url(#&quot;+m+&quot;)&quot;),u=null,l=null,g=null}}if(a&amp;&amp;a[1]){const o=document.getElementById(a[1]);if(o&amp;&amp;&quot;meshgradient&quot;===o.nodeName){const i=parseFloat(r.style.strokeWidth.slice(0,-2))*(parseFloat(r.style.strokeMiterlimit)||parseFloat(r.getAttribute(&quot;stroke-miterlimit&quot;))||1),a=r.getBBox(),l=Math.trunc(a.width+i),c=Math.trunc(a.height+i),u=Math.trunc(a.x-i/2),f=Math.trunc(a.y-i/2);let p=document.createElementNS(s,&quot;canvas&quot;);d(p,{width:l,height:c});const y=p.getContext(&quot;2d&quot;);let g=y.createImageData(l,c);const w=new b(o);&quot;objectBoundingBox&quot;===o.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;w.scale(new x(l,c));const m=o.getAttribute(&quot;gradientTransform&quot;);null!=m&amp;&amp;w.transform(h(m)),&quot;userSpaceOnUse&quot;===o.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;w.transform(new x(-u,-f)),w.paintMesh(g.data,p.width),y.putImageData(g,0,0);const M=document.createElementNS(t,&quot;image&quot;);d(M,{width:l,height:c,x:0,y:0});let S=p.toDataURL();M.setAttributeNS(e,&quot;xlink:href&quot;,S);const k=&quot;pattern_clip&quot;+n,A=document.createElementNS(t,&quot;pattern&quot;);d(A,{id:k,patternUnits:&quot;userSpaceOnUse&quot;,width:l,height:c,x:u,y:f}),A.appendChild(M),o.parentNode.appendChild(A),r.style.stroke=&quot;url(#&quot;+k+&quot;)&quot;,g=null,p=null,S=null}}})}();
</script><script
       id="mesh_polyfill-7"
       type="text/javascript">
!function(){const t=&quot;http://www.w3.org/2000/svg&quot;,e=&quot;http://www.w3.org/1999/xlink&quot;,s=&quot;http://www.w3.org/1999/xhtml&quot;,r=2;if(document.createElementNS(t,&quot;meshgradient&quot;).x)return;const n=(t,e,s,r)=&gt;{let n=new x(.5*(e.x+s.x),.5*(e.y+s.y)),o=new x(.5*(t.x+e.x),.5*(t.y+e.y)),i=new x(.5*(s.x+r.x),.5*(s.y+r.y)),a=new x(.5*(n.x+o.x),.5*(n.y+o.y)),h=new x(.5*(n.x+i.x),.5*(n.y+i.y)),l=new x(.5*(a.x+h.x),.5*(a.y+h.y));return[[t,o,a,l],[l,h,i,r]]},o=t=&gt;{let e=t[0].distSquared(t[1]),s=t[2].distSquared(t[3]),r=.25*t[0].distSquared(t[2]),n=.25*t[1].distSquared(t[3]),o=e&gt;s?e:s,i=r&gt;n?r:n;return 18*(o&gt;i?o:i)},i=(t,e)=&gt;Math.sqrt(t.distSquared(e)),a=(t,e)=&gt;t.scale(2/3).add(e.scale(1/3)),h=t=&gt;{let e,s,r,n,o,i,a,h=new g;return t.match(/(\w+\(\s*[^)]+\))+/g).forEach(t=&gt;{let l=t.match(/[\w.-]+/g),d=l.shift();switch(d){case&quot;translate&quot;:2===l.length?e=new g(1,0,0,1,l[0],l[1]):(console.error(&quot;mesh.js: translate does not have 2 arguments!&quot;),e=new g(1,0,0,1,0,0)),h=h.append(e);break;case&quot;scale&quot;:1===l.length?s=new g(l[0],0,0,l[0],0,0):2===l.length?s=new g(l[0],0,0,l[1],0,0):(console.error(&quot;mesh.js: scale does not have 1 or 2 arguments!&quot;),s=new g(1,0,0,1,0,0)),h=h.append(s);break;case&quot;rotate&quot;:if(3===l.length&amp;&amp;(e=new g(1,0,0,1,l[1],l[2]),h=h.append(e)),l[0]){r=l[0]*Math.PI/180;let t=Math.cos(r),e=Math.sin(r);Math.abs(t)&lt;1e-16&amp;&amp;(t=0),Math.abs(e)&lt;1e-16&amp;&amp;(e=0),a=new g(t,e,-e,t,0,0),h=h.append(a)}else console.error(&quot;math.js: No argument to rotate transform!&quot;);3===l.length&amp;&amp;(e=new g(1,0,0,1,-l[1],-l[2]),h=h.append(e));break;case&quot;skewX&quot;:l[0]?(r=l[0]*Math.PI/180,n=Math.tan(r),o=new g(1,0,n,1,0,0),h=h.append(o)):console.error(&quot;math.js: No argument to skewX transform!&quot;);break;case&quot;skewY&quot;:l[0]?(r=l[0]*Math.PI/180,n=Math.tan(r),i=new g(1,n,0,1,0,0),h=h.append(i)):console.error(&quot;math.js: No argument to skewY transform!&quot;);break;case&quot;matrix&quot;:6===l.length?h=h.append(new g(...l)):console.error(&quot;math.js: Incorrect number of arguments for matrix!&quot;);break;default:console.error(&quot;mesh.js: Unhandled transform type: &quot;+d)}}),h},l=t=&gt;{let e=[],s=t.split(/[ ,]+/);for(let t=0,r=s.length-1;t&lt;r;t+=2)e.push(new x(parseFloat(s[t]),parseFloat(s[t+1])));return e},d=(t,e)=&gt;{for(let s in e)t.setAttribute(s,e[s])},c=(t,e,s,r,n)=&gt;{let o,i,a=[0,0,0,0];for(let h=0;h&lt;3;++h)e[h]&lt;t[h]&amp;&amp;e[h]&lt;s[h]||t[h]&lt;e[h]&amp;&amp;s[h]&lt;e[h]?a[h]=0:(a[h]=.5*((e[h]-t[h])/r+(s[h]-e[h])/n),o=Math.abs(3*(e[h]-t[h])/r),i=Math.abs(3*(s[h]-e[h])/n),a[h]&gt;o?a[h]=o:a[h]&gt;i&amp;&amp;(a[h]=i));return a},u=[[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0],[-3,3,0,0,-2,-1,0,0,0,0,0,0,0,0,0,0],[2,-2,0,0,1,1,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0],[0,0,0,0,0,0,0,0,-3,3,0,0,-2,-1,0,0],[0,0,0,0,0,0,0,0,2,-2,0,0,1,1,0,0],[-3,0,3,0,0,0,0,0,-2,0,-1,0,0,0,0,0],[0,0,0,0,-3,0,3,0,0,0,0,0,-2,0,-1,0],[9,-9,-9,9,6,3,-6,-3,6,-6,3,-3,4,2,2,1],[-6,6,6,-6,-3,-3,3,3,-4,4,-2,2,-2,-2,-1,-1],[2,0,-2,0,0,0,0,0,1,0,1,0,0,0,0,0],[0,0,0,0,2,0,-2,0,0,0,0,0,1,0,1,0],[-6,6,6,-6,-4,-2,4,2,-3,3,-3,3,-2,-1,-2,-1],[4,-4,-4,4,2,2,-2,-2,2,-2,2,-2,1,1,1,1]],f=t=&gt;{let e=[];for(let s=0;s&lt;16;++s){e[s]=0;for(let r=0;r&lt;16;++r)e[s]+=u[s][r]*t[r]}return e},p=(t,e,s)=&gt;{const r=e*e,n=s*s,o=e*e*e,i=s*s*s;return t[0]+t[1]*e+t[2]*r+t[3]*o+t[4]*s+t[5]*s*e+t[6]*s*r+t[7]*s*o+t[8]*n+t[9]*n*e+t[10]*n*r+t[11]*n*o+t[12]*i+t[13]*i*e+t[14]*i*r+t[15]*i*o},y=t=&gt;{let e=[],s=[],r=[];for(let s=0;s&lt;4;++s)e[s]=[],e[s][0]=n(t[0][s],t[1][s],t[2][s],t[3][s]),e[s][1]=[],e[s][1].push(...n(...e[s][0][0])),e[s][1].push(...n(...e[s][0][1])),e[s][2]=[],e[s][2].push(...n(...e[s][1][0])),e[s][2].push(...n(...e[s][1][1])),e[s][2].push(...n(...e[s][1][2])),e[s][2].push(...n(...e[s][1][3]));for(let t=0;t&lt;8;++t){s[t]=[];for(let r=0;r&lt;4;++r)s[t][r]=[],s[t][r][0]=n(e[0][2][t][r],e[1][2][t][r],e[2][2][t][r],e[3][2][t][r]),s[t][r][1]=[],s[t][r][1].push(...n(...s[t][r][0][0])),s[t][r][1].push(...n(...s[t][r][0][1])),s[t][r][2]=[],s[t][r][2].push(...n(...s[t][r][1][0])),s[t][r][2].push(...n(...s[t][r][1][1])),s[t][r][2].push(...n(...s[t][r][1][2])),s[t][r][2].push(...n(...s[t][r][1][3]))}for(let t=0;t&lt;8;++t){r[t]=[];for(let e=0;e&lt;8;++e)r[t][e]=[],r[t][e][0]=s[t][0][2][e],r[t][e][1]=s[t][1][2][e],r[t][e][2]=s[t][2][2][e],r[t][e][3]=s[t][3][2][e]}return r};class x{constructor(t,e){this.x=t||0,this.y=e||0}toString(){return`(x=${this.x}, y=${this.y})`}clone(){return new x(this.x,this.y)}add(t){return new x(this.x+t.x,this.y+t.y)}scale(t){return void 0===t.x?new x(this.x*t,this.y*t):new x(this.x*t.x,this.y*t.y)}distSquared(t){let e=this.x-t.x,s=this.y-t.y;return e*e+s*s}transform(t){let e=this.x*t.a+this.y*t.c+t.e,s=this.x*t.b+this.y*t.d+t.f;return new x(e,s)}}class g{constructor(t,e,s,r,n,o){void 0===t?(this.a=1,this.b=0,this.c=0,this.d=1,this.e=0,this.f=0):(this.a=t,this.b=e,this.c=s,this.d=r,this.e=n,this.f=o)}toString(){return`affine: ${this.a} ${this.c} ${this.e} \n       ${this.b} ${this.d} ${this.f}`}append(t){t instanceof g||console.error(&quot;mesh.js: argument to Affine.append is not affine!&quot;);let e=this.a*t.a+this.c*t.b,s=this.b*t.a+this.d*t.b,r=this.a*t.c+this.c*t.d,n=this.b*t.c+this.d*t.d,o=this.a*t.e+this.c*t.f+this.e,i=this.b*t.e+this.d*t.f+this.f;return new g(e,s,r,n,o,i)}}class w{constructor(t,e){this.nodes=t,this.colors=e}paintCurve(t,e){if(o(this.nodes)&gt;r){const s=n(...this.nodes);let r=[[],[]],o=[[],[]];for(let t=0;t&lt;4;++t)r[0][t]=this.colors[0][t],r[1][t]=(this.colors[0][t]+this.colors[1][t])/2,o[0][t]=r[1][t],o[1][t]=this.colors[1][t];let i=new w(s[0],r),a=new w(s[1],o);i.paintCurve(t,e),a.paintCurve(t,e)}else{let s=Math.round(this.nodes[0].x);if(s&gt;=0&amp;&amp;s&lt;e){let r=4*(~~this.nodes[0].y*e+s);t[r]=Math.round(this.colors[0][0]),t[r+1]=Math.round(this.colors[0][1]),t[r+2]=Math.round(this.colors[0][2]),t[r+3]=Math.round(this.colors[0][3])}}}}class m{constructor(t,e){this.nodes=t,this.colors=e}split(){let t=[[],[],[],[]],e=[[],[],[],[]],s=[[[],[]],[[],[]]],r=[[[],[]],[[],[]]];for(let s=0;s&lt;4;++s){const r=n(this.nodes[0][s],this.nodes[1][s],this.nodes[2][s],this.nodes[3][s]);t[0][s]=r[0][0],t[1][s]=r[0][1],t[2][s]=r[0][2],t[3][s]=r[0][3],e[0][s]=r[1][0],e[1][s]=r[1][1],e[2][s]=r[1][2],e[3][s]=r[1][3]}for(let t=0;t&lt;4;++t)s[0][0][t]=this.colors[0][0][t],s[0][1][t]=this.colors[0][1][t],s[1][0][t]=(this.colors[0][0][t]+this.colors[1][0][t])/2,s[1][1][t]=(this.colors[0][1][t]+this.colors[1][1][t])/2,r[0][0][t]=s[1][0][t],r[0][1][t]=s[1][1][t],r[1][0][t]=this.colors[1][0][t],r[1][1][t]=this.colors[1][1][t];return[new m(t,s),new m(e,r)]}paint(t,e){let s,n=!1;for(let t=0;t&lt;4;++t)if((s=o([this.nodes[0][t],this.nodes[1][t],this.nodes[2][t],this.nodes[3][t]]))&gt;r){n=!0;break}if(n){let s=this.split();s[0].paint(t,e),s[1].paint(t,e)}else{new w([...this.nodes[0]],[...this.colors[0]]).paintCurve(t,e)}}}class b{constructor(t){this.readMesh(t),this.type=t.getAttribute(&quot;type&quot;)||&quot;bilinear&quot;}readMesh(t){let e=[[]],s=[[]],r=Number(t.getAttribute(&quot;x&quot;)),n=Number(t.getAttribute(&quot;y&quot;));e[0][0]=new x(r,n);let o=t.children;for(let t=0,r=o.length;t&lt;r;++t){e[3*t+1]=[],e[3*t+2]=[],e[3*t+3]=[],s[t+1]=[];let r=o[t].children;for(let n=0,o=r.length;n&lt;o;++n){let o=r[n].children;for(let r=0,i=o.length;r&lt;i;++r){let i=r;0!==t&amp;&amp;++i;let h,d=o[r].getAttribute(&quot;path&quot;),c=&quot;l&quot;;null!=d&amp;&amp;(c=(h=d.match(/\s*([lLcC])\s*(.*)/))[1]);let u=l(h[2]);switch(c){case&quot;l&quot;:0===i?(e[3*t][3*n+3]=u[0].add(e[3*t][3*n]),e[3*t][3*n+1]=a(e[3*t][3*n],e[3*t][3*n+3]),e[3*t][3*n+2]=a(e[3*t][3*n+3],e[3*t][3*n])):1===i?(e[3*t+3][3*n+3]=u[0].add(e[3*t][3*n+3]),e[3*t+1][3*n+3]=a(e[3*t][3*n+3],e[3*t+3][3*n+3]),e[3*t+2][3*n+3]=a(e[3*t+3][3*n+3],e[3*t][3*n+3])):2===i?(0===n&amp;&amp;(e[3*t+3][3*n+0]=u[0].add(e[3*t+3][3*n+3])),e[3*t+3][3*n+1]=a(e[3*t+3][3*n],e[3*t+3][3*n+3]),e[3*t+3][3*n+2]=a(e[3*t+3][3*n+3],e[3*t+3][3*n])):(e[3*t+1][3*n]=a(e[3*t][3*n],e[3*t+3][3*n]),e[3*t+2][3*n]=a(e[3*t+3][3*n],e[3*t][3*n]));break;case&quot;L&quot;:0===i?(e[3*t][3*n+3]=u[0],e[3*t][3*n+1]=a(e[3*t][3*n],e[3*t][3*n+3]),e[3*t][3*n+2]=a(e[3*t][3*n+3],e[3*t][3*n])):1===i?(e[3*t+3][3*n+3]=u[0],e[3*t+1][3*n+3]=a(e[3*t][3*n+3],e[3*t+3][3*n+3]),e[3*t+2][3*n+3]=a(e[3*t+3][3*n+3],e[3*t][3*n+3])):2===i?(0===n&amp;&amp;(e[3*t+3][3*n+0]=u[0]),e[3*t+3][3*n+1]=a(e[3*t+3][3*n],e[3*t+3][3*n+3]),e[3*t+3][3*n+2]=a(e[3*t+3][3*n+3],e[3*t+3][3*n])):(e[3*t+1][3*n]=a(e[3*t][3*n],e[3*t+3][3*n]),e[3*t+2][3*n]=a(e[3*t+3][3*n],e[3*t][3*n]));break;case&quot;c&quot;:0===i?(e[3*t][3*n+1]=u[0].add(e[3*t][3*n]),e[3*t][3*n+2]=u[1].add(e[3*t][3*n]),e[3*t][3*n+3]=u[2].add(e[3*t][3*n])):1===i?(e[3*t+1][3*n+3]=u[0].add(e[3*t][3*n+3]),e[3*t+2][3*n+3]=u[1].add(e[3*t][3*n+3]),e[3*t+3][3*n+3]=u[2].add(e[3*t][3*n+3])):2===i?(e[3*t+3][3*n+2]=u[0].add(e[3*t+3][3*n+3]),e[3*t+3][3*n+1]=u[1].add(e[3*t+3][3*n+3]),0===n&amp;&amp;(e[3*t+3][3*n+0]=u[2].add(e[3*t+3][3*n+3]))):(e[3*t+2][3*n]=u[0].add(e[3*t+3][3*n]),e[3*t+1][3*n]=u[1].add(e[3*t+3][3*n]));break;case&quot;C&quot;:0===i?(e[3*t][3*n+1]=u[0],e[3*t][3*n+2]=u[1],e[3*t][3*n+3]=u[2]):1===i?(e[3*t+1][3*n+3]=u[0],e[3*t+2][3*n+3]=u[1],e[3*t+3][3*n+3]=u[2]):2===i?(e[3*t+3][3*n+2]=u[0],e[3*t+3][3*n+1]=u[1],0===n&amp;&amp;(e[3*t+3][3*n+0]=u[2])):(e[3*t+2][3*n]=u[0],e[3*t+1][3*n]=u[1]);break;default:console.error(&quot;mesh.js: &quot;+c+&quot; invalid path type.&quot;)}if(0===t&amp;&amp;0===n||r&gt;0){let e=window.getComputedStyle(o[r]).stopColor.match(/^rgb\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)$/i),a=window.getComputedStyle(o[r]).stopOpacity,h=255;a&amp;&amp;(h=Math.floor(255*a)),e&amp;&amp;(0===i?(s[t][n]=[],s[t][n][0]=Math.floor(e[1]),s[t][n][1]=Math.floor(e[2]),s[t][n][2]=Math.floor(e[3]),s[t][n][3]=h):1===i?(s[t][n+1]=[],s[t][n+1][0]=Math.floor(e[1]),s[t][n+1][1]=Math.floor(e[2]),s[t][n+1][2]=Math.floor(e[3]),s[t][n+1][3]=h):2===i?(s[t+1][n+1]=[],s[t+1][n+1][0]=Math.floor(e[1]),s[t+1][n+1][1]=Math.floor(e[2]),s[t+1][n+1][2]=Math.floor(e[3]),s[t+1][n+1][3]=h):3===i&amp;&amp;(s[t+1][n]=[],s[t+1][n][0]=Math.floor(e[1]),s[t+1][n][1]=Math.floor(e[2]),s[t+1][n][2]=Math.floor(e[3]),s[t+1][n][3]=h))}}e[3*t+1][3*n+1]=new x,e[3*t+1][3*n+2]=new x,e[3*t+2][3*n+1]=new x,e[3*t+2][3*n+2]=new x,e[3*t+1][3*n+1].x=(-4*e[3*t][3*n].x+6*(e[3*t][3*n+1].x+e[3*t+1][3*n].x)+-2*(e[3*t][3*n+3].x+e[3*t+3][3*n].x)+3*(e[3*t+3][3*n+1].x+e[3*t+1][3*n+3].x)+-1*e[3*t+3][3*n+3].x)/9,e[3*t+1][3*n+2].x=(-4*e[3*t][3*n+3].x+6*(e[3*t][3*n+2].x+e[3*t+1][3*n+3].x)+-2*(e[3*t][3*n].x+e[3*t+3][3*n+3].x)+3*(e[3*t+3][3*n+2].x+e[3*t+1][3*n].x)+-1*e[3*t+3][3*n].x)/9,e[3*t+2][3*n+1].x=(-4*e[3*t+3][3*n].x+6*(e[3*t+3][3*n+1].x+e[3*t+2][3*n].x)+-2*(e[3*t+3][3*n+3].x+e[3*t][3*n].x)+3*(e[3*t][3*n+1].x+e[3*t+2][3*n+3].x)+-1*e[3*t][3*n+3].x)/9,e[3*t+2][3*n+2].x=(-4*e[3*t+3][3*n+3].x+6*(e[3*t+3][3*n+2].x+e[3*t+2][3*n+3].x)+-2*(e[3*t+3][3*n].x+e[3*t][3*n+3].x)+3*(e[3*t][3*n+2].x+e[3*t+2][3*n].x)+-1*e[3*t][3*n].x)/9,e[3*t+1][3*n+1].y=(-4*e[3*t][3*n].y+6*(e[3*t][3*n+1].y+e[3*t+1][3*n].y)+-2*(e[3*t][3*n+3].y+e[3*t+3][3*n].y)+3*(e[3*t+3][3*n+1].y+e[3*t+1][3*n+3].y)+-1*e[3*t+3][3*n+3].y)/9,e[3*t+1][3*n+2].y=(-4*e[3*t][3*n+3].y+6*(e[3*t][3*n+2].y+e[3*t+1][3*n+3].y)+-2*(e[3*t][3*n].y+e[3*t+3][3*n+3].y)+3*(e[3*t+3][3*n+2].y+e[3*t+1][3*n].y)+-1*e[3*t+3][3*n].y)/9,e[3*t+2][3*n+1].y=(-4*e[3*t+3][3*n].y+6*(e[3*t+3][3*n+1].y+e[3*t+2][3*n].y)+-2*(e[3*t+3][3*n+3].y+e[3*t][3*n].y)+3*(e[3*t][3*n+1].y+e[3*t+2][3*n+3].y)+-1*e[3*t][3*n+3].y)/9,e[3*t+2][3*n+2].y=(-4*e[3*t+3][3*n+3].y+6*(e[3*t+3][3*n+2].y+e[3*t+2][3*n+3].y)+-2*(e[3*t+3][3*n].y+e[3*t][3*n+3].y)+3*(e[3*t][3*n+2].y+e[3*t+2][3*n].y)+-1*e[3*t][3*n].y)/9}}this.nodes=e,this.colors=s}paintMesh(t,e){let s=(this.nodes.length-1)/3,r=(this.nodes[0].length-1)/3;if(&quot;bilinear&quot;===this.type||s&lt;2||r&lt;2){let n;for(let o=0;o&lt;s;++o)for(let s=0;s&lt;r;++s){let r=[];for(let t=3*o,e=3*o+4;t&lt;e;++t)r.push(this.nodes[t].slice(3*s,3*s+4));let i=[];i.push(this.colors[o].slice(s,s+2)),i.push(this.colors[o+1].slice(s,s+2)),(n=new m(r,i)).paint(t,e)}}else{let n,o,a,h,l,d,u;const x=s,g=r;s++,r++;let w=new Array(s);for(let t=0;t&lt;s;++t){w[t]=new Array(r);for(let e=0;e&lt;r;++e)w[t][e]=[],w[t][e][0]=this.nodes[3*t][3*e],w[t][e][1]=this.colors[t][e]}for(let t=0;t&lt;s;++t)for(let e=0;e&lt;r;++e)0!==t&amp;&amp;t!==x&amp;&amp;(n=i(w[t-1][e][0],w[t][e][0]),o=i(w[t+1][e][0],w[t][e][0]),w[t][e][2]=c(w[t-1][e][1],w[t][e][1],w[t+1][e][1],n,o)),0!==e&amp;&amp;e!==g&amp;&amp;(n=i(w[t][e-1][0],w[t][e][0]),o=i(w[t][e+1][0],w[t][e][0]),w[t][e][3]=c(w[t][e-1][1],w[t][e][1],w[t][e+1][1],n,o));for(let t=0;t&lt;r;++t){w[0][t][2]=[],w[x][t][2]=[];for(let e=0;e&lt;4;++e)n=i(w[1][t][0],w[0][t][0]),o=i(w[x][t][0],w[x-1][t][0]),w[0][t][2][e]=n&gt;0?2*(w[1][t][1][e]-w[0][t][1][e])/n-w[1][t][2][e]:0,w[x][t][2][e]=o&gt;0?2*(w[x][t][1][e]-w[x-1][t][1][e])/o-w[x-1][t][2][e]:0}for(let t=0;t&lt;s;++t){w[t][0][3]=[],w[t][g][3]=[];for(let e=0;e&lt;4;++e)n=i(w[t][1][0],w[t][0][0]),o=i(w[t][g][0],w[t][g-1][0]),w[t][0][3][e]=n&gt;0?2*(w[t][1][1][e]-w[t][0][1][e])/n-w[t][1][3][e]:0,w[t][g][3][e]=o&gt;0?2*(w[t][g][1][e]-w[t][g-1][1][e])/o-w[t][g-1][3][e]:0}for(let s=0;s&lt;x;++s)for(let r=0;r&lt;g;++r){let n=i(w[s][r][0],w[s+1][r][0]),o=i(w[s][r+1][0],w[s+1][r+1][0]),c=i(w[s][r][0],w[s][r+1][0]),x=i(w[s+1][r][0],w[s+1][r+1][0]),g=[[],[],[],[]];for(let t=0;t&lt;4;++t){(d=[])[0]=w[s][r][1][t],d[1]=w[s+1][r][1][t],d[2]=w[s][r+1][1][t],d[3]=w[s+1][r+1][1][t],d[4]=w[s][r][2][t]*n,d[5]=w[s+1][r][2][t]*n,d[6]=w[s][r+1][2][t]*o,d[7]=w[s+1][r+1][2][t]*o,d[8]=w[s][r][3][t]*c,d[9]=w[s+1][r][3][t]*x,d[10]=w[s][r+1][3][t]*c,d[11]=w[s+1][r+1][3][t]*x,d[12]=0,d[13]=0,d[14]=0,d[15]=0,u=f(d);for(let e=0;e&lt;9;++e){g[t][e]=[];for(let s=0;s&lt;9;++s)g[t][e][s]=p(u,e/8,s/8),g[t][e][s]&gt;255?g[t][e][s]=255:g[t][e][s]&lt;0&amp;&amp;(g[t][e][s]=0)}}h=[];for(let t=3*s,e=3*s+4;t&lt;e;++t)h.push(this.nodes[t].slice(3*r,3*r+4));l=y(h);for(let s=0;s&lt;8;++s)for(let r=0;r&lt;8;++r)(a=new m(l[s][r],[[[g[0][s][r],g[1][s][r],g[2][s][r],g[3][s][r]],[g[0][s][r+1],g[1][s][r+1],g[2][s][r+1],g[3][s][r+1]]],[[g[0][s+1][r],g[1][s+1][r],g[2][s+1][r],g[3][s+1][r]],[g[0][s+1][r+1],g[1][s+1][r+1],g[2][s+1][r+1],g[3][s+1][r+1]]]])).paint(t,e)}}}transform(t){if(t instanceof x)for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].add(t);else if(t instanceof g)for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].transform(t)}scale(t){for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].scale(t)}}document.querySelectorAll(&quot;rect,circle,ellipse,path,text&quot;).forEach((r,n)=&gt;{let o=r.getAttribute(&quot;id&quot;);o||(o=&quot;patchjs_shape&quot;+n,r.setAttribute(&quot;id&quot;,o));const i=r.style.fill.match(/^url\(\s*&quot;?\s*#([^\s&quot;]+)&quot;?\s*\)/),a=r.style.stroke.match(/^url\(\s*&quot;?\s*#([^\s&quot;]+)&quot;?\s*\)/);if(i&amp;&amp;i[1]){const a=document.getElementById(i[1]);if(a&amp;&amp;&quot;meshgradient&quot;===a.nodeName){const i=r.getBBox();let l=document.createElementNS(s,&quot;canvas&quot;);d(l,{width:i.width,height:i.height});const c=l.getContext(&quot;2d&quot;);let u=c.createImageData(i.width,i.height);const f=new b(a);&quot;objectBoundingBox&quot;===a.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;f.scale(new x(i.width,i.height));const p=a.getAttribute(&quot;gradientTransform&quot;);null!=p&amp;&amp;f.transform(h(p)),&quot;userSpaceOnUse&quot;===a.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;f.transform(new x(-i.x,-i.y)),f.paintMesh(u.data,l.width),c.putImageData(u,0,0);const y=document.createElementNS(t,&quot;image&quot;);d(y,{width:i.width,height:i.height,x:i.x,y:i.y});let g=l.toDataURL();y.setAttributeNS(e,&quot;xlink:href&quot;,g),r.parentNode.insertBefore(y,r),r.style.fill=&quot;none&quot;;const w=document.createElementNS(t,&quot;use&quot;);w.setAttributeNS(e,&quot;xlink:href&quot;,&quot;#&quot;+o);const m=&quot;patchjs_clip&quot;+n,M=document.createElementNS(t,&quot;clipPath&quot;);M.setAttribute(&quot;id&quot;,m),M.appendChild(w),r.parentElement.insertBefore(M,r),y.setAttribute(&quot;clip-path&quot;,&quot;url(#&quot;+m+&quot;)&quot;),u=null,l=null,g=null}}if(a&amp;&amp;a[1]){const o=document.getElementById(a[1]);if(o&amp;&amp;&quot;meshgradient&quot;===o.nodeName){const i=parseFloat(r.style.strokeWidth.slice(0,-2))*(parseFloat(r.style.strokeMiterlimit)||parseFloat(r.getAttribute(&quot;stroke-miterlimit&quot;))||1),a=r.getBBox(),l=Math.trunc(a.width+i),c=Math.trunc(a.height+i),u=Math.trunc(a.x-i/2),f=Math.trunc(a.y-i/2);let p=document.createElementNS(s,&quot;canvas&quot;);d(p,{width:l,height:c});const y=p.getContext(&quot;2d&quot;);let g=y.createImageData(l,c);const w=new b(o);&quot;objectBoundingBox&quot;===o.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;w.scale(new x(l,c));const m=o.getAttribute(&quot;gradientTransform&quot;);null!=m&amp;&amp;w.transform(h(m)),&quot;userSpaceOnUse&quot;===o.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;w.transform(new x(-u,-f)),w.paintMesh(g.data,p.width),y.putImageData(g,0,0);const M=document.createElementNS(t,&quot;image&quot;);d(M,{width:l,height:c,x:0,y:0});let S=p.toDataURL();M.setAttributeNS(e,&quot;xlink:href&quot;,S);const k=&quot;pattern_clip&quot;+n,A=document.createElementNS(t,&quot;pattern&quot;);d(A,{id:k,patternUnits:&quot;userSpaceOnUse&quot;,width:l,height:c,x:u,y:f}),A.appendChild(M),o.parentNode.appendChild(A),r.style.stroke=&quot;url(#&quot;+k+&quot;)&quot;,g=null,p=null,S=null}}})}();
</script><radialGradient
       xlink:href="#linearGradient1"
       id="radialGradient2-0"
       cx="1145.9915"
       cy="1176.9067"
       fx="1145.9915"
       fy="1176.9067"
       r="296.99146"
       gradientTransform="matrix(0,-1,0.60239663,0,544.9842,1680.9915)"
       gradientUnits="userSpaceOnUse" /></defs><path
     id="path11244-4-9-6"
     style="fill:#dddddd;fill-opacity:1;stroke-width:4.859;filter:url(#filter50759)"
     d="m 890.3346,26.524661 c -4.021,0.76214 -8.4304,5.07133 -8.1797,9.15625 0.2387,3.88945 4.9099,7.41088 8.7959,7.70035 2.7826,0.20728 5.7826,-2.0319 7.0458,-4.5199 1.3216,-2.6029 1.0734,-6.30326 -0.5319,-8.74141 -1.4638,-2.22315 -4.5149,-4.09098 -7.1301,-3.59529 z m -104.5274,0.2832 c -4.0836,0.22021 -9.033,3.55971 -9.6266,7.60599 -0.4975,3.39119 2.782,6.99382 5.8972,8.42335 3.1971,1.46716 7.7464,1.13905 10.5009,-1.04887 2.4366,-1.93538 4.0465,-5.90539 3.0059,-8.83789 -1.2873,-3.62729 -5.934,-6.34983 -9.7774,-6.14258 z m 72.2676,0.35547 c -3.7221,0.31498 -8.4942,0.41263 -10.6599,3.45612 -1.8114,2.54559 -1.714,6.89438 0.1906,9.371 1.8736,2.43624 5.8018,2.25461 8.8612,2.54774 3.7997,0.36407 8.1057,0.9008 11.4061,-1.01691 2.3255,-1.35124 4.7455,-3.9417 4.6024,-6.62748 -0.1512,-2.83734 -3.0864,-5.08045 -5.5785,-6.44521 -2.6065,-1.42734 -5.8608,-1.53585 -8.8219,-1.28526 z m -38.8672,0 c -3.7269,0.31941 -8.5066,0.41503 -10.6736,3.46393 -1.8085,2.54454 -1.7057,6.88941 0.1985,9.36319 1.8746,2.43544 5.8017,2.25494 8.8611,2.54772 3.8025,0.36389 8.1275,0.92626 11.4142,-1.02026 2.3594,-1.39733 4.7774,-4.09803 4.5807,-6.8331 -0.202,-2.80671 -3.1729,-4.94334 -5.6561,-6.26692 -2.5929,-1.382 -5.7974,-1.50546 -8.7248,-1.25456 z m -130.6074,19.08203 c -4.0691,0.17473 -8.9821,3.54189 -9.5918,7.56881 -0.5107,3.37309 2.7135,6.97572 5.7976,8.43415 3.1308,1.48054 7.5736,1.18398 10.3521,-0.88333 2.4648,-1.8339 4.3148,-5.6413 3.3894,-8.5708 -1.1959,-3.78542 -5.9811,-6.71914 -9.9473,-6.54883 z m 149.3281,0.33203 c -4.1179,0.0683 -9.1006,-0.26605 -12.0846,2.57252 -2.1196,2.01632 -3.4238,5.80096 -2.2535,8.48211 1.0986,2.51684 4.6074,3.21863 7.277,3.86242 5.0488,1.21751 10.686,1.51255 15.5788,-0.22892 2.4711,-0.87953 5.5705,-2.32839 6.1718,-4.88149 0.6621,-2.81119 -1.3907,-6.08535 -3.6826,-7.8428 -2.9574,-2.26787 -7.2805,-2.02568 -11.0069,-1.96384 z m -116.6953,0.002 c -4.0851,0.0714 -9.0255,-0.25607 -11.9872,2.55843 -2.1245,2.01896 -3.4414,5.80731 -2.2708,8.49425 1.097,2.51815 4.6087,3.21862 7.2789,3.86241 5.0508,1.21773 10.6935,1.5229 15.5847,-0.22882 2.4779,-0.88741 5.5794,-2.35859 6.1737,-4.9226 0.6495,-2.80225 -1.4058,-6.05445 -3.6923,-7.79985 -2.9833,-2.27733 -7.3344,-2.02943 -11.087,-1.96382 z m 155.4961,0 c -4.0726,0.43139 -9.0481,-0.25329 -12.0142,2.57057 -2.1171,2.01545 -3.4113,5.79038 -2.2537,8.47436 1.068,2.47626 4.4952,3.20775 7.1134,3.85377 5.0736,1.25187 10.7363,1.50627 15.6761,-0.19876 2.4439,-0.84353 5.4982,-2.20854 6.165,-4.70645 0.7328,-2.74513 -1.1035,-6.05359 -3.2959,-7.86078 -2.6957,-2.22193 -6.7856,-1.77613 -10.2606,-2.13303 -0.3747,-0.0385 -0.7555,-0.0394 -1.1301,3.2e-4 z m 38.8633,0 c -4.0851,0.0716 -9.0255,-0.25608 -11.9872,2.55843 -2.1245,2.01896 -3.4413,5.80725 -2.2708,8.49425 1.0967,2.51766 4.6077,3.21689 7.277,3.86225 5.017,1.213 10.6147,1.50561 15.4832,-0.20885 2.5015,-0.88093 5.6525,-2.32152 6.2673,-4.90139 0.6695,-2.80962 -1.3913,-6.08664 -3.6847,-7.84237 -2.9795,-2.281 -7.333,-2.0281 -11.0848,-1.96232 z m 26.8666,2.57057 c -2.117,2.01545 -3.4113,5.79038 -2.2537,8.47436 1.068,2.47626 4.4952,3.20793 7.1134,3.85377 5.0769,1.2523 10.7465,1.51523 15.6859,-0.20106 2.4509,-0.85163 5.5211,-2.23536 6.1682,-4.74806 0.715,-2.77619 -1.2011,-6.08646 -3.4333,-7.88526 -2.7476,-2.21409 -6.9521,-3.17122 -10.6605,-3.18185 -4.3826,-0.0126 -9.6539,0.86424 -12.62,3.6881 z m 50.8834,-2.57057 c -4.0553,0.51335 -9.0297,-0.2571 -11.9931,2.55843 -2.1238,2.01785 -3.4181,5.79478 -2.2707,8.49027 1.035,2.43131 4.3771,3.187 6.9396,3.83216 5.1175,1.28845 10.8395,1.53554 15.8308,-0.17825 2.452,-0.84194 5.5242,-2.20299 6.1906,-4.70847 0.7334,-2.75709 -1.1156,-6.092 -3.3377,-7.88121 -2.9761,-2.3962 -7.4614,-1.76088 -11.2658,-2.11488 -0.016,-10e-4 -0.031,-3.3e-4 -0.047,0 -0.016,3.2e-4 -0.031,-1e-5 -0.047,0.002 z m 38.8672,0 c -4.0922,0.0729 -9.0411,-0.25047 -12.0064,2.57057 -2.1168,2.01379 -3.4195,5.78701 -2.2598,8.46865 1.0794,2.4959 4.5422,3.22005 7.1837,3.8659 5.0827,1.24274 10.761,1.51831 15.6958,-0.22134 2.4433,-0.86133 5.5117,-2.27037 6.1219,-4.78814 0.6857,-2.82922 -1.3479,-6.15428 -3.6525,-7.93291 -2.97,-2.29221 -7.3316,-2.02957 -11.0827,-1.96273 z m -272.1817,0.002 c -4.0996,0.0963 -9.0799,-0.23397 -12.0186,2.62609 -2.0966,2.04047 -3.3097,5.8543 -2.1054,8.52057 1.1185,2.47657 4.5865,3.13889 7.2308,3.76513 5.0626,1.19892 10.7159,1.5417 15.6061,-0.23406 2.4887,-0.90372 5.6107,-2.41639 6.1681,-5.00475 0.6134,-2.84782 -1.5761,-6.07916 -3.9179,-7.81193 -2.9796,-2.20478 -7.2575,-1.94809 -10.9631,-1.86105 z m 39.7461,0.0176 c -3.7059,0.31129 -8.4541,0.39223 -10.6217,3.41425 -1.8289,2.5499 -1.7624,6.92082 0.1446,9.41287 1.8689,2.44223 5.8054,2.25844 8.867,2.54774 3.8317,0.36207 8.186,0.9069 11.4981,-1.05343 2.3121,-1.3685 4.6837,-4.00184 4.5065,-6.68276 -0.1872,-2.83406 -3.152,-5.0284 -5.652,-6.37628 -2.5917,-1.3973 -5.8084,-1.50885 -8.7425,-1.26239 z m -130.6094,19.08194 c -4.0781,0.16782 -8.9966,3.56518 -9.5992,7.60208 -0.5025,3.36563 2.7246,6.948867 5.8031,8.398987 3.1399,1.47906 7.5857,1.17482 10.3743,-0.8917 2.4432,-1.8106 4.2945,-5.564567 3.3925,-8.468747 -1.1843,-3.81356 -5.9808,-6.80482 -9.9707,-6.64062 z m 495.6173,0 c -4.0697,0.15993 -8.9801,3.5422 -9.5918,7.5688 -0.5116,3.36769 2.7028,6.966977 5.7803,8.427067 3.1309,1.48539 7.5681,1.18487 10.3598,-0.8682 2.4495,-1.80141 4.3274,-5.542937 3.436,-8.449937 -1.1738,-3.82793 -5.9835,-6.83497 -9.9843,-6.67773 z m -462.1954,0.35546 c -3.7282,0.31735 -8.514,0.41561 -10.6753,3.47 -1.8066,2.55316 -1.6841,6.90944 0.2338,9.380107 1.8983,2.44554 5.855,2.23607 8.9372,2.52685 3.731,0.35199 7.9457,0.8774 11.1997,-0.98148 2.3442,-1.33911 4.8256,-3.893727 4.707,-6.590787 -0.1258,-2.85922 -3.0775,-5.14089 -5.5842,-6.52198 -2.6016,-1.43339 -5.8585,-1.53463 -8.8182,-1.28271 z m 38.8692,0 c -3.7176,0.32432 -8.5059,0.39611 -10.6502,3.45024 -1.8215,2.59445 -1.6602,7.02634 0.3162,9.504837 1.9884,2.49361 6.0723,2.191 9.252,2.43872 3.7282,0.29045 7.9856,0.83197 11.1599,-1.14484 2.2903,-1.42635 4.5495,-4.176257 4.2931,-6.862237 -0.2672,-2.80003 -3.2532,-4.87825 -5.7477,-6.17803 -2.574,-1.34127 -5.7318,-1.46094 -8.6233,-1.20869 z m 38.875,0 c -3.7282,0.31783 -8.5141,0.41561 -10.6754,3.47 -1.8065,2.55316 -1.684,6.90944 0.2338,9.380107 1.8984,2.44554 5.8551,2.23607 8.9373,2.52685 3.7309,0.35199 7.9456,0.8774 11.1997,-0.98148 2.3441,-1.33911 4.8257,-3.893737 4.7069,-6.590787 -0.1261,-2.86088 -3.0799,-5.14354 -5.5884,-6.52492 -2.6005,-1.4321 -5.8559,-1.53194 -8.8139,-1.27977 z m 77.7441,0 c -3.7282,0.31783 -8.5141,0.41561 -10.6753,3.47 -1.8066,2.55316 -1.6841,6.90944 0.2338,9.380107 1.8983,2.44554 5.8551,2.23582 8.9372,2.52685 3.7284,0.35205 7.9368,0.87235 11.1921,-0.97898 2.3385,-1.32991 4.8237,-3.862347 4.7145,-6.550317 -0.1165,-2.87219 -3.0726,-5.17718 -5.5883,-6.56789 -2.5983,-1.43632 -5.8559,-1.53194 -8.814,-1.27977 z m 38.8711,0 c -3.7149,0.31287 -8.4951,0.39086 -10.6426,3.43832 -1.8255,2.5906 -1.677,7.01905 0.291,9.503087 1.9598,2.47355 6.0007,2.18839 9.1459,2.44641 3.7243,0.30552 7.9504,0.82555 11.1569,-1.09313 2.2833,-1.36618 4.6117,-3.977277 4.4414,-6.632577 -0.1808,-2.81812 -3.0942,-5.02916 -5.5744,-6.3794 -2.6088,-1.42027 -5.8584,-1.53198 -8.8182,-1.28271 z m 116.6153,0 c -3.7182,0.32427 -8.5075,0.39565 -10.6522,3.45024 -1.8216,2.5944 -1.6602,7.02634 0.3162,9.504837 1.9884,2.49362 6.0723,2.191 9.2521,2.43872 3.7282,0.29044 7.9856,0.83195 11.1598,-1.14484 2.2904,-1.42635 4.5493,-4.176227 4.2932,-6.862237 -0.2669,-2.79962 -3.2519,-4.87825 -5.7458,-6.17803 -2.5739,-1.34147 -5.7317,-1.46086 -8.6233,-1.20869 z m 38.873,0 c -3.7282,0.31735 -8.514,0.41561 -10.6753,3.47 -1.8066,2.55316 -1.6841,6.90949 0.2338,9.380107 1.8988,2.44598 5.8563,2.23656 8.9392,2.52685 3.7331,0.35152 7.9505,0.87581 11.2055,-0.98539 2.3414,-1.33877 4.8184,-3.892407 4.6992,-6.586877 -0.1265,-2.85921 -3.0775,-5.14089 -5.5842,-6.52198 -2.6016,-1.43337 -5.8586,-1.53463 -8.8182,-1.28271 z m 38.8711,0 c -3.7182,0.32427 -8.5074,0.39567 -10.6521,3.45024 -1.8216,2.5944 -1.6602,7.02634 0.3162,9.504837 1.9884,2.4936 6.0723,2.191 9.252,2.43872 3.7282,0.29045 7.9856,0.83198 11.1599,-1.14484 2.2903,-1.42635 4.5492,-4.176247 4.2931,-6.862237 -0.2669,-2.7996 -3.2518,-4.87825 -5.7457,-6.17803 -2.574,-1.34149 -5.7318,-1.46086 -8.6234,-1.20869 z m 38.873,0 c -3.7282,0.31735 -8.514,0.41561 -10.6753,3.47 -1.8066,2.55316 -1.684,6.90944 0.2338,9.380107 1.8984,2.44555 5.8551,2.23607 8.9373,2.52685 3.7309,0.35198 7.9456,0.87738 11.1996,-0.98148 2.3442,-1.33911 4.8256,-3.893717 4.707,-6.590787 -0.1257,-2.85922 -3.0774,-5.14089 -5.5841,-6.52198 -2.6016,-1.4334 -5.8586,-1.53463 -8.8183,-1.28271 z m 194.3594,0 c -3.7149,0.31287 -8.4951,0.39087 -10.6425,3.43832 -1.8255,2.59061 -1.6771,7.01905 0.291,9.503087 1.9597,2.47353 6.0006,2.18839 9.1458,2.44641 3.7243,0.30553 7.9504,0.82557 11.157,-1.09313 2.2832,-1.36618 4.6116,-3.977277 4.4413,-6.632577 -0.1808,-2.81813 -3.0942,-5.02916 -5.5744,-6.3794 -2.6088,-1.42026 -5.8583,-1.53198 -8.8182,-1.28271 z m 116.6153,0 c -3.7181,0.32394 -8.5006,0.39875 -10.6522,3.44829 -1.819,2.57818 -1.6784,6.98257 0.2732,9.461867 1.9435,2.46902 5.9642,2.21256 9.0952,2.47738 3.7604,0.31804 8.0528,0.87733 11.2681,-1.09847 2.3223,-1.42709 4.6342,-4.187997 4.3848,-6.902347 -0.2573,-2.80053 -3.2519,-4.87825 -5.7458,-6.17803 -2.5739,-1.34147 -5.7317,-1.46062 -8.6233,-1.20869 z m 77.7441,0 c -3.7182,0.32427 -8.5074,0.39567 -10.6521,3.45024 -1.8216,2.5944 -1.6573,7.024 0.3162,9.504837 1.9653,2.47055 6.0052,2.18481 9.1521,2.43559 3.7606,0.29968 8.0563,0.85069 11.2598,-1.14171 2.2912,-1.425 4.5492,-4.176247 4.2931,-6.862237 -0.2669,-2.7996 -3.2518,-4.87825 -5.7457,-6.17803 -2.574,-1.34149 -5.7318,-1.46086 -8.6234,-1.20869 z m 38.873,0 c -3.7282,0.31735 -8.514,0.41561 -10.6753,3.47 -1.8066,2.55316 -1.684,6.90944 0.2338,9.380107 1.8984,2.44555 5.8551,2.23607 8.9373,2.52685 3.7309,0.35198 7.9456,0.87738 11.1996,-0.98148 2.3442,-1.33911 4.8256,-3.893717 4.707,-6.590787 -0.1257,-2.85922 -3.0774,-5.14089 -5.5841,-6.52198 -2.6016,-1.4334 -5.8586,-1.53463 -8.8183,-1.28271 z m 38.8711,0 c -3.7182,0.32421 -8.5074,0.39567 -10.6521,3.45024 -1.8216,2.5944 -1.6602,7.02634 0.3162,9.504837 1.9884,2.4936 6.0723,2.191 9.252,2.43872 3.7282,0.29045 7.9856,0.83197 11.1599,-1.14484 2.2904,-1.42635 4.5495,-4.176257 4.2932,-6.862237 -0.2672,-2.80003 -3.2533,-4.87822 -5.7477,-6.17803 -2.5735,-1.34102 -5.7305,-1.46077 -8.6215,-1.20869 z m 38.8731,0 c -3.7285,0.31358 -8.514,0.41562 -10.6753,3.47 -1.8066,2.55315 -1.6841,6.90943 0.2337,9.380107 1.8983,2.44556 5.8551,2.23607 8.9373,2.52685 3.731,0.35199 7.9457,0.87741 11.1997,-0.98148 2.3441,-1.33911 4.818,-3.893417 4.7069,-6.590787 -0.1166,-2.83223 -3.0169,-5.11322 -5.4944,-6.49057 -2.6233,-1.45841 -5.917,-1.56566 -8.9079,-1.31412 z m -816.3086,0 c -3.7144,0.31059 -8.4818,0.39787 -10.6409,3.43616 -1.8211,2.56274 -1.714,6.9469 0.2152,9.429217 1.9146,2.46339 5.9079,2.2355 9.0151,2.51666 3.7406,0.33846 7.966,0.84292 11.2201,-1.03236 2.2926,-1.32118 4.705,-3.830987 4.5928,-6.474677 -0.1218,-2.8693 -3.052,-5.18449 -5.5623,-6.57957 -2.6031,-1.44671 -5.8722,-1.54359 -8.84,-1.29543 z m 116.6171,0 c -3.7034,0.30655 -8.4527,0.38581 -10.6146,3.40841 -1.8315,2.56077 -1.7491,6.95018 0.1733,9.443457 1.8894,2.45055 5.8521,2.23792 8.9331,2.52509 3.7633,0.35075 8.0153,0.86667 11.2933,-1.01469 2.3017,-1.32099 4.726,-3.835737 4.6153,-6.487267 -0.1198,-2.86939 -3.052,-5.18445 -5.5623,-6.57957 -2.6025,-1.44643 -5.8707,-1.54104 -8.8381,-1.29543 z m 38.8711,0 c -3.716,0.31431 -8.4981,0.38997 -10.6464,3.43832 -1.8257,2.59051 -1.6771,7.01905 0.291,9.503087 1.9597,2.47355 6.0006,2.18866 9.1459,2.44641 3.7268,0.30542 7.9618,0.83455 11.1644,-1.09577 2.2965,-1.38418 4.6267,-4.037517 4.4338,-6.711967 -0.2028,-2.81096 -3.1422,-4.97809 -5.6244,-6.31264 -2.5999,-1.3978 -5.823,-1.51622 -8.7643,-1.26744 z m 388.7208,0 c -3.7035,0.30655 -8.4528,0.38579 -10.6147,3.40841 -1.8315,2.56078 -1.7491,6.95019 0.1733,9.443457 1.8895,2.45055 5.8521,2.23792 8.9332,2.52509 3.7633,0.35075 8.0152,0.86667 11.2933,-1.01469 2.3017,-1.32099 4.726,-3.835737 4.6153,-6.487267 -0.1198,-2.86939 -3.052,-5.18445 -5.5623,-6.57957 -2.6026,-1.44643 -5.8707,-1.54104 -8.8381,-1.29543 z m 38.8711,0 c -3.716,0.31431 -8.4982,0.38995 -10.6465,3.43832 -1.8256,2.59051 -1.6771,7.01906 0.291,9.503087 1.9598,2.47356 6.0007,2.18839 9.1459,2.44641 3.7255,0.30563 7.9588,0.83553 11.1607,-1.09347 2.2979,-1.3844 4.6302,-4.038477 4.4375,-6.714267 -0.2025,-2.81098 -3.1422,-4.97808 -5.6244,-6.31264 -2.5999,-1.39779 -5.8229,-1.51621 -8.7642,-1.26744 z m 77.7461,0 c -3.7299,0.31929 -8.5186,0.41426 -10.6812,3.47 -1.8068,2.55301 -1.6841,6.90951 0.2338,9.380107 1.8988,2.44595 5.856,2.24071 8.9392,2.52668 3.7719,0.34984 8.0586,0.9036 11.3178,-1.02703 2.3513,-1.39285 4.7637,-4.078557 4.5732,-6.804827 -0.1961,-2.80667 -3.156,-4.955 -5.6365,-6.28269 -2.597,-1.39004 -5.8114,-1.51347 -8.7463,-1.26224 z m -453.5137,23.412486 c -1.6945,2.66203 -1.4826,7.00422 0.5075,9.4531 1.9576,2.408893 5.8968,2.324163 9.0001,2.390343 3.408,0.0727 7.5876,0.22046 9.9865,-2.201243 2.1119,-2.13189 3.0874,-6.0734 1.8547,-8.80932 -1.5312,-3.398269 -6.0035,-5.275329 -9.7225,-5.523319 -4.1697,-0.27805 -9.3823,1.16511 -11.6263,4.690439 z m 200.0586,-3.998419 c -4.1119,0.0713 -9.1102,-0.26591 -12.0608,2.59882 -2.1191,2.057459 -3.3318,5.908899 -2.1215,8.603159 1.0859,2.4172 4.4576,3.08511 7.0343,3.703493 5.0924,1.22211 10.7652,1.5131 15.7096,-0.21289 2.4504,-0.855373 5.5311,-2.244393 6.1598,-4.762483 0.7023,-2.81277 -1.2868,-6.14644 -3.5726,-7.929699 -2.9769,-2.3224 -7.3738,-2.06589 -11.1488,-2.0004 z m -38.9531,0.002 c -4.0917,0.0918 -9.059,-0.23887 -11.9976,2.60983 -2.1043,2.039959 -3.3348,5.855409 -2.1348,8.529299 1.1123,2.47849 4.5788,3.14896 7.2218,3.777053 5.0686,1.2045 10.73,1.53831 15.6274,-0.23845 2.4825,-0.900653 5.5943,-2.406243 6.1564,-4.986603 0.6188,-2.84079 -1.5476,-6.07626 -3.8804,-7.811499 -2.9827,-2.2187 -7.2763,-1.96297 -10.9928,-1.87963 z m 77.7441,0 c -4.089,0.0843 -9.0422,-0.22962 -11.9899,2.60556 -2.0998,2.019609 -3.3542,5.792779 -2.187,8.462159 1.0811,2.47251 4.5085,3.1933 7.1297,3.834853 5.0752,1.24221 10.7358,1.49815 15.6737,-0.21009 2.439,-0.843743 5.5228,-2.199043 6.1508,-4.702253 0.7172,-2.85883 -1.3268,-6.2465 -3.6579,-8.050159 -2.9757,-2.30242 -7.3577,-2.01766 -11.1194,-1.94007 z m 26.9265,2.57573 c -2.1629,2.017549 -3.3746,5.905439 -2.1659,8.604999 1.0942,2.44377 4.5122,3.10328 7.1164,3.725523 5.0537,1.20752 10.6729,1.48342 15.5866,-0.20578 2.4434,-0.839953 5.4991,-2.191143 6.1751,-4.684853 0.7421,-2.73749 -1.0241,-6.1088 -3.2534,-7.862329 -2.9905,-2.35231 -7.4738,-1.80009 -11.2784,-1.75726 -4.1243,0.0464 -9.1643,-0.63377 -12.1804,2.1797 z m -142.6824,-2.5562 c -3.7116,0.32575 -8.4935,0.38662 -10.6369,3.434199 -1.8278,2.59886 -1.6697,7.04225 0.3108,9.52673 1.985,2.490093 6.0641,2.180153 9.2386,2.432013 3.6959,0.29323 7.9131,0.84738 11.068,-1.099973 2.3282,-1.43709 4.6505,-4.21423 4.3867,-6.9375 -0.2731,-2.81951 -3.3174,-4.880669 -5.8358,-6.177489 -2.5523,-1.31425 -5.6716,-1.42897 -8.5314,-1.17798 z m 194.3594,0 c -3.7156,0.32852 -8.5064,0.391 -10.6465,3.446119 -1.8242,2.60413 -1.6488,7.05159 0.3399,9.53239 1.998,2.492473 6.0883,2.173713 9.2735,2.417183 3.7124,0.28377 7.9682,0.85416 11.1112,-1.141793 2.3253,-1.47667 4.5757,-4.34451 4.2602,-7.08095 -0.3197,-2.77254 -3.3453,-4.744389 -5.836,-6.003659 -2.553,-1.29079 -5.6526,-1.42125 -8.5023,-1.16929 z m 38.875,0 c -3.7034,0.30971 -8.448,0.39241 -10.6139,3.412289 -1.8293,2.55047 -1.7626,6.9221 0.1446,9.41483 1.8667,2.439823 5.7997,2.248993 8.8573,2.546533 3.7622,0.3661 8.0139,0.89814 11.298,-0.973413 2.3482,-1.33823 4.8346,-3.89534 4.7164,-6.59555 -0.1252,-2.86092 -3.0799,-5.143549 -5.5884,-6.524929 -2.6006,-1.4321 -5.8555,-1.52717 -8.814,-1.27976 z m 38.8672,0 c -3.715,0.32858 -8.5012,0.39401 -10.6445,3.446119 -1.8229,2.59592 -1.6605,7.03024 0.3164,9.51091 1.9833,2.488683 6.0576,2.189973 9.2302,2.438753 3.7339,0.29279 8.0157,0.86501 11.178,-1.141883 2.3257,-1.47598 4.5757,-4.34453 4.2601,-7.08095 -0.3197,-2.77248 -3.3454,-4.744219 -5.836,-6.003439 -2.5536,-1.29105 -5.6539,-1.42161 -8.5042,-1.16951 z m 38.877,0 c -3.7034,0.30929 -8.448,0.39241 -10.6139,3.412289 -1.8293,2.55047 -1.7627,6.92217 0.1446,9.41483 1.8672,2.440223 5.8005,2.254273 8.8592,2.546363 3.8084,0.36368 8.1323,0.91159 11.4314,-1.025493 2.3315,-1.36894 4.7313,-4.00269 4.5693,-6.70151 -0.1687,-2.81171 -3.0872,-5.015849 -5.5612,-6.362459 -2.6122,-1.42182 -5.8656,-1.53154 -8.8294,-1.28402 z m 116.6132,0 c -3.712,0.32115 -8.4977,0.38364 -10.6369,3.434199 -1.8285,2.60752 -1.6523,7.06206 0.3381,9.54822 1.9832,2.477163 6.0459,2.161933 9.2094,2.410493 3.6981,0.29056 7.9186,0.84876 11.0738,-1.101903 2.3279,-1.43918 4.6375,-4.22073 4.3789,-6.94531 -0.2644,-2.78591 -3.2506,-4.841769 -5.7337,-6.132369 -2.5775,-1.33968 -5.7356,-1.46372 -8.6296,-1.21333 z m 38.8946,0 c -3.7157,0.32387 -8.5034,0.3791 -10.6513,3.428409 -1.8289,2.59644 -1.669,7.03533 0.3056,9.52276 1.9603,2.469393 5.9957,2.187203 9.1384,2.440263 3.7536,0.30225 8.0426,0.85798 11.2404,-1.130583 2.3041,-1.43279 4.5811,-4.2035 4.3126,-6.90343 -0.2803,-2.81883 -3.3158,-4.881809 -5.8339,-6.179439 -2.5461,-1.31209 -5.6583,-1.4267 -8.5118,-1.17798 z m 38.8496,0 c -3.7119,0.3223 -8.4935,0.38663 -10.6369,3.434199 -1.8278,2.59885 -1.6698,7.04224 0.3107,9.52673 1.985,2.490123 6.0642,2.180373 9.2387,2.432013 3.6973,0.29307 7.9139,0.84294 11.0719,-1.101933 2.3217,-1.42982 4.6363,-4.18907 4.3867,-6.90429 -0.2576,-2.80187 -3.2543,-4.880039 -5.7497,-6.179989 -2.5735,-1.34066 -5.7305,-1.45775 -8.6214,-1.20673 z m 38.8711,0 c -3.7156,0.32841 -8.5015,0.39441 -10.6465,3.446119 -1.8229,2.59348 -1.6649,7.02425 0.3086,9.50505 1.9762,2.484193 6.0404,2.190823 9.2048,2.441403 3.7446,0.29652 8.0391,0.87312 11.2112,-1.138673 2.3262,-1.4753 4.5762,-4.34456 4.2602,-7.08095 -0.3203,-2.77339 -3.3482,-4.744339 -5.8399,-6.003679 -2.552,-1.28986 -5.65,-1.42103 -8.4984,-1.16927 z m -1049.5333,0 c -3.713,0.30921 -8.4712,0.39794 -10.6388,3.428339 -1.8229,2.54852 -1.7446,6.91206 0.1617,9.39878 1.8695,2.438493 5.8006,2.253453 8.8592,2.546383 3.8024,0.36416 8.1012,0.88398 11.414,-1.017633 2.2979,-1.31908 4.714,-3.83361 4.6024,-6.48087 -0.121,-2.86934 -3.0521,-5.184409 -5.5623,-6.579579 -2.602,-1.44616 -5.8696,-1.54247 -8.8362,-1.29542 z m 38.8692,0 c -3.7064,0.30771 -8.4579,0.39139 -10.6215,3.416409 -1.8282,2.556 -1.7488,6.93589 0.1681,9.42598 1.889,2.453743 5.8539,2.247793 8.9371,2.535923 3.7703,0.35235 8.0312,0.86474 11.3142,-1.022443 2.2972,-1.32046 4.7141,-3.83361 4.6025,-6.48087 -0.1211,-2.86934 -3.0521,-5.184449 -5.5623,-6.579579 -2.6026,-1.44643 -5.8708,-1.54177 -8.8381,-1.29542 z m 388.7227,0 c -3.713,0.30921 -8.4712,0.39793 -10.6389,3.428339 -1.823,2.54852 -1.7446,6.91206 0.1618,9.39878 1.8694,2.438493 5.8006,2.253433 8.8592,2.546363 3.8023,0.36415 8.1012,0.88399 11.4139,-1.017613 2.2979,-1.31908 4.7141,-3.83362 4.6024,-6.48087 -0.121,-2.86935 -3.0521,-5.184409 -5.5623,-6.579579 -2.602,-1.44615 -5.8695,-1.54247 -8.8361,-1.29542 z m 38.8691,0 c -3.7064,0.30795 -8.4585,0.39092 -10.6215,3.416409 -1.8283,2.55741 -1.7463,6.93924 0.1723,9.42966 1.8888,2.451763 5.8513,2.244633 8.9329,2.532213 3.7704,0.35186 8.0313,0.86477 11.3143,-1.022413 2.2971,-1.32046 4.7139,-3.83361 4.6024,-6.48087 -0.1209,-2.86955 -3.0515,-5.185489 -5.5619,-6.580699 -2.6027,-1.44645 -5.8711,-1.54085 -8.8385,-1.2943 z m 388.7227,0 c -3.713,0.30921 -8.4712,0.39793 -10.6389,3.428339 -1.823,2.54852 -1.7446,6.91206 0.1618,9.39878 1.8694,2.438493 5.8006,2.253433 8.8592,2.546363 3.8023,0.36415 8.1012,0.88399 11.4139,-1.017613 2.2979,-1.31908 4.7141,-3.83362 4.6024,-6.48087 -0.121,-2.86935 -3.0521,-5.184409 -5.5623,-6.579579 -2.602,-1.44615 -5.8695,-1.54247 -8.8361,-1.29542 z m 38.8691,0 c -3.7064,0.30795 -8.4585,0.39092 -10.6215,3.416409 -1.8283,2.55741 -1.7463,6.93924 0.1723,9.42966 1.8888,2.451763 5.8513,2.244633 8.9329,2.532213 3.7704,0.35186 8.0313,0.86477 11.3143,-1.022413 2.2971,-1.32046 4.7139,-3.83361 4.6024,-6.48087 -0.1209,-2.86955 -3.0515,-5.185489 -5.5619,-6.580699 -2.6027,-1.44645 -5.8711,-1.54085 -8.8385,-1.2943 z m -252.6719,19.435542 c -3.7221,0.31477 -8.4942,0.41263 -10.6599,3.45612 -1.8114,2.5456 -1.714,6.89439 0.1907,9.37101 1.8736,2.43622 5.8017,2.25459 8.8611,2.54774 3.7972,0.36384 8.0988,0.8976 11.3986,-1.01617 2.3261,-1.34904 4.7519,-3.93317 4.6119,-6.61846 -0.1481,-2.83959 -3.0849,-5.08691 -5.5783,-6.45363 -2.6066,-1.42874 -5.8622,-1.5371 -8.8241,-1.28661 z m 427.5918,0 c -3.7221,0.31477 -8.4942,0.41264 -10.6599,3.45612 -1.8114,2.54559 -1.7141,6.89439 0.1906,9.37101 1.8736,2.43625 5.8018,2.2546 8.8612,2.54774 3.7972,0.36384 8.0988,0.8976 11.3986,-1.01617 2.3261,-1.34904 4.7519,-3.93317 4.6119,-6.61846 -0.1481,-2.83959 -3.0849,-5.08691 -5.5783,-6.45363 -2.6066,-1.42874 -5.8622,-1.5371 -8.8241,-1.28661 z m -1088.4101,0 c -3.7164,0.31609 -8.4958,0.39496 -10.6467,3.44202 -1.8222,2.58136 -1.6816,6.99227 0.2726,9.47521 1.9362,2.46006 5.9427,2.19708 9.0615,2.46863 3.7028,0.32239 7.9066,0.86941 11.1029,-1.02745 2.3575,-1.39908 4.7819,-4.09062 4.5885,-6.8252 -0.1986,-2.80853 -3.1683,-4.95089 -5.6521,-6.27683 -2.5926,-1.38404 -5.7984,-1.50545 -8.7267,-1.25638 z m 38.873,0 c -3.7044,0.31242 -8.4504,0.39197 -10.6178,3.4123 -1.8299,2.54998 -1.766,6.92171 0.1407,9.41483 1.867,2.44129 5.8018,2.25475 8.8612,2.54774 3.8005,0.36396 8.1272,0.93389 11.4083,-1.01821 2.3723,-1.4114 4.7919,-4.14522 4.5826,-6.89767 -0.212,-2.7881 -3.1747,-4.89478 -5.6449,-6.20491 -2.5973,-1.37749 -5.8006,-1.50115 -8.7301,-1.25408 z m 505.334,0 c -3.7038,0.312 -8.4488,0.39243 -10.6158,3.4123 -1.8298,2.55003 -1.766,6.92171 0.1407,9.41483 1.867,2.44128 5.8017,2.25475 8.8611,2.54774 3.8005,0.36397 8.1273,0.9339 11.4084,-1.01821 2.3723,-1.4114 4.7927,-4.14528 4.5826,-6.89767 -0.2129,-2.78874 -3.1789,-4.89308 -5.65,-6.20312 -2.5966,-1.37661 -5.7984,-1.50257 -8.727,-1.25587 z m 38.873,0 c -3.6965,0.30885 -8.4312,0.38214 -10.5984,3.39255 -1.8376,2.55248 -1.785,6.93451 0.1233,9.43458 1.8647,2.44305 5.8018,2.25459 8.8612,2.54776 3.7991,0.36405 8.1181,0.92431 11.4043,-1.01648 2.3585,-1.39289 4.781,-4.083 4.5905,-6.81544 -0.1958,-2.80936 -3.1628,-4.95688 -5.6463,-6.28464 -2.5941,-1.38689 -5.8032,-1.50325 -8.7346,-1.25833 z m 38.8731,0 c -3.7283,0.30966 -8.5081,0.4146 -10.6755,3.46393 -1.8086,2.54449 -1.7058,6.88941 0.1984,9.3632 1.8746,2.43545 5.8018,2.25478 8.8612,2.54771 3.8017,0.36399 8.1,0.88279 11.4119,-1.01896 2.2982,-1.31966 4.7069,-3.83475 4.6024,-6.48283 -0.1121,-2.83979 -2.9897,-5.15088 -5.4683,-6.54143 -2.6248,-1.47256 -5.9308,-1.58073 -8.9301,-1.33162 z m 77.7441,0 c -3.7283,0.30966 -8.5087,0.41413 -10.6755,3.46393 -1.8084,2.54538 -1.7027,6.8912 0.2025,9.36495 1.8748,2.43428 5.8005,2.25335 8.8591,2.54599 3.8011,0.36368 8.0986,0.88248 11.41,-1.01899 2.2982,-1.31968 4.707,-3.83476 4.6024,-6.48283 -0.1121,-2.83981 -2.9898,-5.15088 -5.4684,-6.54143 -2.6248,-1.47255 -5.9308,-1.58073 -8.9301,-1.33162 z m 349.8477,0 c -3.728,0.31383 -8.5081,0.4146 -10.6755,3.46393 -1.8086,2.54449 -1.7057,6.88941 0.1984,9.3632 1.8746,2.43546 5.8018,2.25481 8.8612,2.54774 3.8017,0.364 8.1083,0.89726 11.4119,-1.01899 2.3202,-1.34584 4.7377,-3.92323 4.6005,-6.60197 -0.1453,-2.83656 -3.0717,-5.08783 -5.5604,-6.45653 -2.6085,-1.43456 -5.8696,-1.54711 -8.8361,-1.29738 z M 367.9205,123.9895 c -4.0601,0.18555 -8.9689,3.5081 -9.595,7.52401 -0.5256,3.372 2.6656,7.01232 5.7513,8.47013 3.1898,1.50702 7.7415,1.18112 10.5393,-0.96789 2.4351,-1.87039 4.1522,-5.73306 3.1794,-8.6454 -1.2415,-3.71719 -5.96,-6.55976 -9.875,-6.38085 z m -35.3281,0.33203 c -4.1179,0.0683 -9.0987,-0.26411 -12.0845,2.57252 -2.1183,2.01244 -3.4271,5.78927 -2.2618,8.46865 1.0961,2.52027 4.6066,3.2275 7.2775,3.87534 5.0172,1.21696 10.6169,1.50657 15.4868,-0.20753 2.5029,-0.88096 5.6558,-2.32136 6.2715,-4.90234 0.6701,-2.80929 -1.3907,-6.08535 -3.6826,-7.8428 -2.9574,-2.26788 -7.2805,-2.02568 -11.0069,-1.96384 z m -38.9512,0.002 c -4.1142,0.0748 -9.0956,-0.2402 -12.0663,2.60715 -2.0971,2.00997 -3.3665,5.77187 -2.1999,8.43207 1.1045,2.51853 4.6105,3.22846 7.2833,3.87555 5.0325,1.21834 10.6545,1.5211 15.5319,-0.21676 2.4947,-0.88886 5.6188,-2.3593 6.2244,-4.9374 0.6548,-2.78775 -1.3774,-6.03443 -3.6497,-7.77711 -2.9886,-2.29206 -7.3579,-2.05193 -11.1237,-1.9835 z m 310.9766,0 c -4.0922,0.0728 -9.0411,-0.25048 -12.0064,2.57057 -2.1168,2.01379 -3.4253,5.78952 -2.2598,8.46865 1.0963,2.52024 4.606,3.22994 7.2774,3.87582 5.0525,1.22157 10.6976,1.51652 15.5925,-0.23277 2.4745,-0.88433 5.5749,-2.34577 6.1717,-4.90493 0.654,-2.80476 -1.4003,-6.06433 -3.6886,-7.81307 -2.9821,-2.27891 -7.3342,-2.031 -11.0868,-1.96427 z m 39.6679,0.0195 c -3.7315,0.31975 -8.5178,0.4195 -10.6851,3.47391 -1.8045,2.54331 -1.6956,6.88316 0.208,9.35321 1.8773,2.43579 5.8054,2.25844 8.8671,2.54774 3.8316,0.36207 8.1944,0.92119 11.498,-1.05343 2.3291,-1.39217 4.6932,-4.08216 4.4929,-6.78823 -0.2076,-2.80382 -3.1606,-4.94601 -5.6402,-6.2713 -2.5962,-1.38764 -5.8076,-1.51323 -8.7407,-1.2619 z m 1049.545,0 c -3.7055,0.30638 -8.4519,0.39151 -10.6198,3.41229 -1.83,2.54993 -1.7662,6.92187 0.1407,9.41483 1.8684,2.44266 5.8062,2.25089 8.8671,2.54788 3.7629,0.36509 8.0091,0.88369 11.2993,-0.97821 2.3277,-1.31722 4.8058,-3.82358 4.7092,-6.4964 -0.1039,-2.87381 -3.0428,-5.20074 -5.5545,-6.60106 -2.6019,-1.45062 -5.8731,-1.5448 -8.842,-1.29933 z m 38.8691,0 c -3.7201,0.32402 -8.5179,0.39001 -10.6582,3.45003 -1.8228,2.6061 -1.6361,7.05329 0.3535,9.53435 1.986,2.47652 6.048,2.16638 9.213,2.41171 3.7135,0.28785 7.9432,0.81985 11.1166,-1.13005 2.2899,-1.40703 4.586,-4.11006 4.3521,-6.78752 -0.2474,-2.8322 -3.2606,-4.953 -5.7786,-6.273 -2.5633,-1.34377 -5.7151,-1.45665 -8.5984,-1.20552 z m 15.1621,19.08203 c -4.0677,0.13349 -8.9699,3.53471 -9.5898,7.55709 -0.5173,3.3567 2.6737,6.94786 5.7329,8.42313 3.0849,1.48767 7.4497,1.21239 10.2461,-0.7649 2.4725,-1.74822 4.4867,-5.40299 3.6577,-8.31542 -1.1122,-3.90748 -5.9864,-7.03315 -10.0469,-6.8999 z m -1472.8671,0.35547 c -3.7282,0.31782 -8.5141,0.41561 -10.6754,3.47 -1.8065,2.55315 -1.684,6.90944 0.2338,9.38011 1.8984,2.44555 5.8551,2.23607 8.9373,2.52685 3.7309,0.35199 7.9456,0.8774 11.1997,-0.98148 2.3441,-1.33911 4.8257,-3.89374 4.7069,-6.59079 -0.126,-2.86088 -3.0799,-5.14355 -5.5884,-6.52493 -2.6005,-1.4321 -5.8559,-1.53193 -8.8139,-1.27976 z m 38.8691,0 c -3.7176,0.32431 -8.5059,0.39611 -10.6502,3.45024 -1.8215,2.59444 -1.6602,7.02634 0.3162,9.50484 1.9885,2.49361 6.0723,2.191 9.2521,2.43872 3.7281,0.29045 7.9856,0.83197 11.1598,-1.14484 2.2904,-1.42635 4.5495,-4.17626 4.2932,-6.86224 -0.2672,-2.80003 -3.2533,-4.87826 -5.7477,-6.17803 -2.5741,-1.34127 -5.7318,-1.46094 -8.6234,-1.20869 z m 38.875,0 c -3.7282,0.31782 -8.5141,0.41561 -10.6753,3.47 -1.8066,2.55315 -1.6841,6.90944 0.2338,9.38011 1.8983,2.44555 5.855,2.23607 8.9372,2.52685 3.731,0.35199 7.9457,0.8774 11.1997,-0.98148 2.3441,-1.33911 4.8258,-3.89374 4.7069,-6.59079 -0.126,-2.86088 -3.0799,-5.14355 -5.5883,-6.52493 -2.6006,-1.4321 -5.8559,-1.53193 -8.814,-1.27976 z m 233.2305,0 c -3.7182,0.32427 -8.5074,0.39567 -10.6521,3.45024 -1.8216,2.59439 -1.6603,7.02634 0.3161,9.50484 1.9885,2.49361 6.0724,2.191 9.2521,2.43872 3.7282,0.29045 7.9856,0.83197 11.1598,-1.14484 2.2904,-1.42635 4.5493,-4.17624 4.2932,-6.86224 -0.2669,-2.79961 -3.2518,-4.87825 -5.7458,-6.17803 -2.5739,-1.34149 -5.7318,-1.46087 -8.6233,-1.20869 z m 38.873,0 c -3.7282,0.31734 -8.514,0.4156 -10.6753,3.47 -1.8066,2.55315 -1.6841,6.90944 0.2338,9.38011 1.8983,2.44554 5.855,2.23607 8.9372,2.52685 3.731,0.35199 7.9457,0.8774 11.1997,-0.98148 2.3441,-1.33911 4.8255,-3.89373 4.7069,-6.59079 -0.1257,-2.85922 -3.0774,-5.1409 -5.5841,-6.52199 -2.6016,-1.43338 -5.8585,-1.53462 -8.8182,-1.2827 z m 1088.416,0 c -3.7282,0.31783 -8.514,0.41561 -10.6753,3.47 -1.8066,2.55316 -1.684,6.90944 0.2338,9.38011 1.8983,2.44553 5.8551,2.23582 8.9372,2.52685 3.7284,0.35205 7.9368,0.87235 11.1921,-0.97898 2.3385,-1.32991 4.8237,-3.86234 4.7146,-6.55032 -0.1166,-2.87219 -3.0727,-5.17718 -5.5884,-6.5679 -2.5982,-1.43632 -5.8559,-1.53193 -8.814,-1.27976 z m -1321.6445,0 c -3.7143,0.31058 -8.4818,0.39787 -10.6408,3.43616 -1.8211,2.56274 -1.714,6.9468 0.2152,9.42922 1.9137,2.46251 5.9052,2.23539 9.0112,2.51666 3.7418,0.33885 7.9686,0.84351 11.224,-1.03236 2.2926,-1.32114 4.705,-3.83099 4.5927,-6.47468 -0.1217,-2.86931 -3.052,-5.18449 -5.5622,-6.57957 -2.6032,-1.4467 -5.8723,-1.54359 -8.8401,-1.29543 z m 202.4531,23.41249 c -1.7367,2.63469 -1.4829,7.00443 0.5075,9.45314 1.9607,2.41225 5.9057,2.33526 9.0138,2.39212 3.4433,0.063 7.6985,0.20815 10.0764,-2.28314 2.1004,-2.2006 2.9714,-6.26943 1.6001,-8.98493 -1.557,-3.0833 -6.0004,-5.10607 -9.6734,-5.31263 -4.1466,-0.23319 -9.3799,1.48208 -11.5244,4.73544 z m -310.9766,0 c -1.7357,2.62579 -1.4968,6.98376 0.4835,9.43043 1.9589,2.42036 5.9114,2.34409 9.0244,2.41213 3.4136,0.0746 7.6166,0.23291 10.0019,-2.21013 2.1239,-2.17525 3.0935,-6.22077 1.7544,-8.95009 -1.5387,-3.13594 -6.0227,-5.18873 -9.7256,-5.40889 -4.1491,-0.24668 -9.3888,1.47444 -11.5386,4.72655 z m -28.3906,-3.99647 c -4.069,0.0766 -8.9929,-0.24227 -11.9361,2.56861 -2.1193,2.02409 -3.4126,5.8141 -2.2426,8.50102 1.0812,2.4829 4.5318,3.19164 7.1626,3.83414 5.0339,1.22939 10.6382,1.47476 15.5443,-0.193 2.4581,-0.83559 5.5806,-2.15697 6.2336,-4.66976 0.7411,-2.85246 -1.2775,-6.26162 -3.6005,-8.07524 -2.9777,-2.32468 -7.3843,-2.03684 -11.1613,-1.96577 z m 196.0411,-1.68166 c -3.0323,-0.31081 -6.2863,0.066 -9.0411,1.37059 -2.6878,1.27286 -5.5616,3.19925 -6.6238,5.97701 -0.804,2.10223 -0.6603,4.93281 0.7155,6.71408 1.5793,2.04472 4.6872,2.41056 7.2494,2.7424 5.9542,0.77115 12.7746,1.23218 17.9144,-1.87101 1.5614,-0.94273 2.9722,-2.72855 3.0376,-4.55134 0.095,-2.65618 -1.9144,-5.21127 -3.9397,-6.9324 -2.5225,-2.14354 -6.0194,-3.1118 -9.3123,-3.44933 z m 64.0402,4.30419 c -2.1024,2.05049 -3.3031,5.8828 -2.0921,8.5582 1.1076,2.44687 4.5308,3.10546 7.1436,3.72747 5.0491,1.20195 10.6651,1.48933 15.569,-0.21038 2.454,-0.85057 5.5212,-2.22784 6.185,-4.73884 0.7236,-2.73773 -1.1176,-6.03144 -3.3097,-7.82406 -2.7708,-2.26586 -7.051,-3.2353 -10.8147,-3.24518 -4.4064,-0.0116 -9.7448,0.86892 -12.6811,3.73279 z m 38.9409,-0.0448 c -2.1258,2.05459 -3.3737,5.90359 -2.164,8.6012 1.0988,2.45051 4.5296,3.10542 7.1418,3.72928 5.0158,1.19794 10.5901,1.47751 15.4697,-0.19118 2.4834,-0.8493 5.6041,-2.20928 6.2842,-4.74433 0.7357,-2.74196 -1.1165,-6.04976 -3.3159,-7.84474 -2.7949,-2.28096 -7.061,-3.22232 -10.8277,-3.23276 -4.3719,-0.0121 -9.6574,0.85006 -12.5881,3.68253 z M 411.0436,163.2161 c -3.7156,0.32847 -8.5015,0.39442 -10.6465,3.44612 -1.8229,2.59348 -1.6653,7.02455 0.3086,9.50505 1.9772,2.48476 6.0432,2.18906 9.2087,2.43947 3.7433,0.2961 8.0362,0.87411 11.2073,-1.13674 2.3263,-1.47514 4.5758,-4.34451 4.2602,-7.08094 -0.3198,-2.7725 -3.3455,-4.74419 -5.8361,-6.00345 -2.553,-1.29079 -5.6526,-1.42143 -8.5022,-1.16951 z m 1321.6504,0 c -3.703,0.31444 -8.448,0.3924 -10.6139,3.41229 -1.8293,2.55047 -1.7627,6.92217 0.1446,9.41483 1.8672,2.44022 5.8005,2.25408 8.8592,2.54636 3.8077,0.36386 8.1304,0.91196 11.4294,-1.02386 2.3345,-1.36983 4.7503,-4.0059 4.5772,-6.70704 -0.1826,-2.84953 -3.1765,-5.05056 -5.6921,-6.40145 -2.5821,-1.38658 -5.7841,-1.48911 -8.7044,-1.24113 z m -1360.5156,0 c -3.7053,0.30189 -8.451,0.39151 -10.6178,3.41229 -1.8294,2.55038 -1.7626,6.9221 0.1446,9.41483 1.8667,2.4398 5.7996,2.24931 8.8572,2.54653 3.7654,0.36603 8.0196,0.89501 11.3073,-0.97654 2.3414,-1.33282 4.812,-3.8768 4.709,-6.56899 -0.1079,-2.82272 -2.9841,-5.11037 -5.4489,-6.4903 -2.6325,-1.47381 -5.9444,-1.58282 -8.9514,-1.33782 z m -101.4532,19.08008 c -4.0571,0.20806 -8.9636,3.51664 -9.5813,7.53183 -0.5202,3.38098 2.6893,7.02568 5.7884,8.47403 3.2172,1.5036 7.8157,1.16674 10.6035,-1.03321 2.4243,-1.91317 4.0407,-5.84583 3.0176,-8.75976 -1.284,-3.65689 -5.9575,-6.41139 -9.8282,-6.21289 z m 151.7657,2.94113 c -2.0621,2.04931 -3.3512,5.77035 -2.1996,8.43974 1.0558,2.44713 4.4262,3.19637 7.0119,3.84193 5.0984,1.27284 10.7952,1.52368 15.7634,-0.18801 2.4559,-0.84611 5.5274,-2.21614 6.1957,-4.7262 0.7295,-2.73962 -1.1431,-6.00027 -3.3017,-7.83816 -2.8848,-2.45608 -7.2557,-2.7046 -11.0443,-2.68523 -4.2733,0.0219 -9.3943,0.14367 -12.4254,3.15593 z m 85.7324,-2.5857 c -3.7098,0.3224 -8.4879,0.38701 -10.6311,3.43224 -1.8286,2.59824 -1.6752,7.04199 0.3049,9.52674 1.9891,2.49603 5.8679,2.81799 9.05,3.06533 3.7215,0.28927 8.1875,0.21193 11.3504,-1.77041 2.302,-1.44276 4.5554,-4.2324 4.2812,-6.93528 -0.2826,-2.78601 -3.2712,-4.83045 -5.7586,-6.11668 -2.5702,-1.32902 -5.7142,-1.45245 -8.5968,-1.20194 z m -281.2438,0.47351 c -2.3079,2.88646 -3.3696,9.31312 -1.3813,12.30578 1.9884,2.99266 5.3613,2.24711 8.8018,2.58973 3.4404,0.34262 8.6816,0.67682 11.5257,-1.01269 2.8441,-1.68951 4.6437,-4.01255 4.5807,-6.8954 -0.063,-2.88285 -2.8276,-5.48701 -5.3164,-7.29038 -2.4888,-1.80338 -5.758,-2.93565 -8.9593,-2.90324 -3.2013,0.0324 -6.9433,0.31975 -9.2512,3.2062 z m 242.3785,-0.47351 c -3.7266,0.31445 -8.5051,0.41548 -10.6716,3.46393 -1.8084,2.54459 -1.7057,6.8894 0.1985,9.36319 1.8746,2.43545 5.8017,2.25481 8.8611,2.54774 3.8018,0.364 8.0999,0.88253 11.412,-1.01899 2.2978,-1.31923 4.714,-3.83361 4.6024,-6.48087 -0.121,-2.86934 -3.052,-5.1845 -5.5623,-6.57958 -2.6032,-1.4467 -5.8725,-1.54582 -8.8401,-1.29542 z m 77.7442,0 c -3.7267,0.31445 -8.5051,0.41548 -10.6716,3.46393 -1.8085,2.54459 -1.7058,6.8894 0.1984,9.36319 1.8746,2.43545 5.8018,2.25483 8.8612,2.54774 3.7979,0.36361 8.0907,0.8797 11.4005,-1.01812 2.3007,-1.31919 4.7241,-3.83199 4.6138,-6.48174 -0.1194,-2.86941 -3.052,-5.1845 -5.5623,-6.57958 -2.6031,-1.4467 -5.8724,-1.54582 -8.84,-1.29542 z m 1205.0312,0 c -3.7267,0.31445 -8.5051,0.41549 -10.6716,3.46393 -1.8084,2.54459 -1.7058,6.8894 0.1984,9.36319 1.8746,2.43546 5.8018,2.25479 8.8612,2.54771 3.8017,0.364 8.0998,0.88254 11.4119,-1.01896 2.2979,-1.31923 4.7141,-3.8336 4.6025,-6.48087 -0.121,-2.86935 -3.052,-5.1845 -5.5623,-6.57958 -2.6032,-1.44671 -5.8725,-1.54583 -8.8401,-1.29542 z M 457.8991,201.44848 c -4.1218,0.40744 -8.6198,5.24835 -8.1661,9.36523 0.452,4.10105 5.9125,8.07548 9.9711,7.33374 3.9889,-0.72899 7.3011,-6.21106 6.617,-10.20791 -0.598,-3.49358 -4.8948,-6.83973 -8.422,-6.49106 z m -206.584,0.2832 c -4.0806,0.1657 -9.0112,3.54995 -9.6188,7.58842 -0.5071,3.37045 2.7259,6.9615 5.8089,8.41489 3.1316,1.4763 7.5675,1.17492 10.3483,-0.88747 2.4531,-1.81932 4.3074,-5.59253 3.3991,-8.50841 -1.1831,-3.79789 -5.9629,-6.76882 -9.9375,-6.60743 z m -35.4121,0.33594 c -4.0934,0.43916 -9.1181,-0.26006 -12.0722,2.60726 -2.112,2.05 -3.3362,5.89107 -2.1205,8.57162 1.1218,2.47346 4.5956,3.11695 7.2394,3.73879 5.0363,1.18459 10.6286,1.45866 15.5197,-0.22822 2.411,-0.83155 5.4235,-2.16665 6.0932,-4.62758 0.7502,-2.75658 -1.0532,-6.10972 -3.2571,-7.92748 -2.7859,-2.29779 -7.0276,-1.77947 -10.6213,-2.13521 -0.2591,-0.0257 -0.5223,-0.027 -0.7812,8.2e-4 z m 272.8964,0.0195 c -3.6733,0.57566 -8.4398,0.4002 -10.6197,3.4123 -1.8272,2.52473 -1.806,6.85707 0.065,9.34942 1.8246,2.43038 5.7136,2.29682 8.737,2.6054 3.8605,0.39403 8.246,0.95024 11.5985,-1.0044 2.347,-1.36842 4.7719,-4.00806 4.6118,-6.72014 -0.1658,-2.80761 -3.0896,-5.00193 -5.5598,-6.3467 -2.6136,-1.42284 -5.8649,-1.07933 -8.8328,-1.29588 z m 38.8692,0 c -3.7165,0.31421 -8.4798,0.40628 -10.6467,3.44202 -1.8178,2.54669 -1.7333,6.90289 0.1716,9.3851 1.871,2.43818 5.8018,2.25441 8.8611,2.54777 3.7959,0.36398 8.1096,0.92197 11.3947,-1.01421 2.3598,-1.39081 4.7863,-4.07498 4.6021,-6.80794 -0.1887,-2.80056 -3.1365,-4.95234 -5.6093,-6.28052 -2.6033,-1.3983 -5.8289,-1.52117 -8.7735,-1.27222 z m 1205.0312,0 c -3.7165,0.31421 -8.4798,0.4063 -10.6466,3.44202 -1.8178,2.54669 -1.7334,6.90288 0.1715,9.3851 1.8711,2.43819 5.8018,2.25441 8.8612,2.54777 3.7958,0.36398 8.1096,0.92198 11.3947,-1.01421 2.3598,-1.39081 4.7862,-4.07499 4.602,-6.80794 -0.1887,-2.80055 -3.1364,-4.95234 -5.6092,-6.28052 -2.6034,-1.39831 -5.829,-1.52117 -8.7736,-1.27222 z m 31.418,0.22461 c -3.2901,0.43864 -6.1257,3.82356 -7.0792,7.0029 -1.0487,3.49686 -0.4471,8.26955 2.2628,10.71585 2.3339,2.10687 6.8426,2.85486 9.3796,0.99763 3.971,-2.90696 4.9878,-9.9881 2.9477,-14.46662 -1.1925,-2.6178 -4.6595,-4.62991 -7.5109,-4.24976 z M 224.85,225.43225 c -1.7597,2.60639 -1.613,6.95916 0.3344,9.42848 1.911,2.42322 5.8361,2.39271 8.9211,2.47578 3.5015,0.0943 7.8281,0.25769 10.2623,-2.26108 2.1064,-2.17957 2.9792,-6.21658 1.6525,-8.94188 -1.4589,-2.99655 -2.8971,-4.02198 -8.1593,-5.45112 -5.2621,-1.42915 -10.845,1.54158 -13.011,4.74982 z m -27.5935,-3.90953 c -3.7054,0.31111 -8.4527,0.39268 -10.6198,3.41425 -1.8288,2.54996 -1.7655,6.92319 0.1446,9.41287 1.8913,2.46511 5.8717,2.2599 8.965,2.55182 3.7564,0.3545 8.0122,0.88853 11.2743,-1.00744 2.3397,-1.35982 4.7836,-3.9666 4.6304,-6.66838 -0.1616,-2.85098 -3.14,-5.07766 -5.65,-6.43932 -2.5888,-1.40436 -5.8097,-1.51021 -8.7445,-1.2638 z m 1554.8808,0 c -3.7128,0.3136 -8.4719,0.3991 -10.6388,3.4303 -1.8222,2.54903 -1.7413,6.91245 0.1658,9.39858 1.8709,2.43889 5.8031,2.25357 8.863,2.54598 3.8013,0.36326 8.1245,0.92541 11.4102,-1.02028 2.359,-1.39693 4.7759,-4.0965 4.5807,-6.83114 -0.2,-2.80196 -3.1623,-4.93836 -5.6402,-6.26155 -2.5967,-1.38663 -5.8074,-1.50965 -8.7407,-1.26189 z m 4.6817,28.28125 c 0.5203,4.05646 5.8859,7.92028 9.9161,7.22502 3.9246,-0.67706 7.3456,-5.92822 6.7409,-9.86467 -0.5678,-3.69631 -5.1006,-7.34342 -8.818,-6.93606 -4.1005,0.44934 -8.3638,5.48418 -7.839,9.57571 z M 182.3092,240.91139 c -3.8933,-0.15362 -8.8178,0.77889 -10.9746,4.02381 -1.7356,2.61118 -1.5238,6.9468 0.4336,9.39611 1.9182,2.4003 5.8163,2.36013 8.8877,2.44489 3.4769,0.0959 7.7621,0.27396 10.1982,-2.20856 2.1243,-2.16473 3.1397,-6.2275 1.758,-8.9274 -1.7216,-3.36381 -6.5271,-4.57987 -10.3029,-4.72885 z m 1537.5031,2.65183 c -2.0322,2.11946 -3.3044,5.88106 -2.0942,8.55635 1.1072,2.44741 4.5305,3.10746 7.1438,3.72914 5.0643,1.20476 10.6956,1.4829 15.6153,-0.21857 2.4191,-0.83665 5.4251,-2.19124 6.1042,-4.65922 0.7452,-2.70816 -1.0714,-5.91919 -3.1395,-7.81978 -2.7706,-2.54618 -7.0304,-3.27915 -10.7932,-3.30797 -4.4547,-0.0341 -9.7532,0.50447 -12.8364,3.72005 z M 216.6901,240.96019 c -3.7128,0.30999 -8.4755,0.39752 -10.6371,3.43204 -1.8222,2.55798 -1.7251,6.93507 0.1957,9.41982 1.8929,2.44867 5.8533,2.23922 8.9351,2.52492 3.7713,0.34962 8.0331,0.86193 11.3158,-1.02711 2.2935,-1.31976 4.705,-3.83098 4.5928,-6.47467 -0.1218,-2.86931 -3.052,-5.1845 -5.5623,-6.57958 -2.6031,-1.4467 -5.8722,-1.54321 -8.84,-1.29542 z m 1502.0175,19.08008 c -4.0476,0.21666 -8.9475,3.49186 -9.5746,7.49644 -0.5299,3.38346 2.667,7.04595 5.766,8.50356 3.2137,1.51153 7.8245,1.19121 10.6055,-1.01758 2.4469,-1.94348 4.0405,-5.94577 2.9844,-8.88672 -1.2984,-3.6157 -5.945,-6.30105 -9.7813,-6.0957 z m -1521.457,0.35547 c -3.703,0.31444 -8.448,0.3924 -10.6139,3.41229 -1.8292,2.55048 -1.7625,6.9221 0.1446,9.41483 1.8676,2.4409 5.8018,2.25544 8.8612,2.54772 3.8071,0.3637 8.1291,0.91052 11.4274,-1.02522 2.3344,-1.36998 4.7503,-4.00591 4.5772,-6.70705 -0.1826,-2.84952 -3.1765,-5.05056 -5.6921,-6.40144 -2.582,-1.38658 -5.7841,-1.48911 -8.7044,-1.24113 z m 1554.8867,0 c -3.713,0.30921 -8.4711,0.39796 -10.6388,3.42834 -1.823,2.54851 -1.7446,6.91198 0.1617,9.39878 1.8698,2.43919 5.8018,2.25482 8.8612,2.54774 3.8017,0.364 8.0998,0.88251 11.4119,-1.01899 2.2979,-1.31923 4.7141,-3.8336 4.6025,-6.48087 -0.121,-2.86935 -3.0521,-5.18442 -5.5623,-6.57958 -2.602,-1.44617 -5.8696,-1.54248 -8.8362,-1.29542 z m -50.3496,18.79687 c -4.024,0.74608 -8.4159,5.07047 -8.1797,9.15625 0.2233,3.86244 4.8229,7.38686 8.6785,7.70701 2.801,0.23258 5.8435,-1.98959 7.1418,-4.4824 1.3373,-2.56773 1.1354,-6.24159 -0.4339,-8.67448 -1.4643,-2.27003 -4.5507,-4.19883 -7.2067,-3.70638 z m -1524.7578,0.61914 c -4.0916,0.0713 -9.0397,-0.25427 -12.0056,2.5652 -2.1191,2.01444 -3.4247,5.79025 -2.2645,8.47402 1.0787,2.49529 4.5415,3.21688 7.1818,3.86421 5.0452,1.23698 10.682,1.52363 15.5828,-0.19887 2.5017,-0.8793 5.6518,-2.31877 6.269,-4.89774 0.6714,-2.80531 -1.3797,-6.08191 -3.6685,-7.83755 -2.9803,-2.28614 -7.3394,-2.0347 -11.095,-1.96927 z m 1555.6699,0.0195 c -3.7163,0.3161 -8.4951,0.39543 -10.6466,3.44202 -1.8224,2.58047 -1.6847,6.99053 0.2685,9.47345 1.9365,2.46168 5.9454,2.19864 9.0656,2.47039 3.7009,0.32232 7.902,0.86791 11.0972,-1.02713 2.3589,-1.39904 4.7869,-4.08974 4.5942,-6.82552 -0.1978,-2.80857 -3.1683,-4.95089 -5.6521,-6.27683 -2.5926,-1.38405 -5.7984,-1.50546 -8.7268,-1.25638 z M 162.8737,299.21801 c -3.8872,-0.12416 -8.7957,0.77472 -10.9577,4.00761 -1.7397,2.60155 -1.5578,6.92949 0.3877,9.38101 1.919,2.41823 5.8386,2.39786 8.9248,2.47452 3.5302,0.0877 7.9188,0.2536 10.3366,-2.32017 2.0987,-2.23421 2.9167,-6.38956 1.4497,-9.08115 -1.7673,-3.24276 -6.4499,-4.34392 -10.1411,-4.46182 z m 31.0221,-0.18393 c -2.917,0.73793 -6.4838,1.60207 -7.985,4.20975 -1.5549,2.70099 -1.549,6.89613 0.3826,9.3419 1.8978,2.4029 5.781,2.3932 8.8413,2.49226 3.5025,0.11337 7.8382,0.31969 10.2819,-2.19201 2.149,-2.20874 2.9919,-6.30334 1.6788,-9.0912 -1.3347,-2.83354 -5.2175,-3.64665 -8.2106,-4.56922 -1.677,-0.29094 -3.456,-0.30975 -4.989,-0.19148 z m 1519.3626,0.23273 c -3.7187,0.31876 -8.5134,0.39137 -10.6523,3.45003 -1.8226,2.60625 -1.6361,7.05328 0.3535,9.53434 1.986,2.47652 6.0483,2.16321 9.213,2.41169 3.6846,0.28929 7.8713,0.8144 11.0332,-1.09942 2.3048,-1.39509 4.6426,-4.06747 4.4397,-6.754 -0.2124,-2.81272 -3.1692,-4.9645 -5.6576,-6.29289 -2.5931,-1.38432 -5.8007,-1.5008 -8.7295,-1.24975 z m -32.2717,22.01288 c -2.1447,1.98991 -3.3594,5.81772 -2.1897,8.49936 1.0618,2.43447 4.4289,3.15602 7.0075,3.7924 5.1028,1.25933 10.7942,1.51193 15.7664,-0.19136 2.4251,-0.83076 5.4525,-2.16963 6.1318,-4.64145 0.7525,-2.73827 -0.9851,-6.12769 -3.2111,-7.89106 -2.975,-2.35676 -7.4536,-1.80552 -11.2487,-1.76424 -4.1503,0.0451 -9.2137,-0.62664 -12.2562,2.19635 z m -1513.7855,0.83688 c -1.8255,2.52272 -1.8092,6.85338 0.063,9.34162 1.8488,2.45715 5.7873,2.30514 8.8466,2.61523 3.7955,0.38471 8.0838,0.90405 11.4032,-0.97626 2.3311,-1.32045 4.809,-3.83887 4.7053,-6.51593 -0.1116,-2.87946 -0.5452,-3.51746 -7.5052,-8.17166 -6.9599,-4.6542 -15.3355,0.69779 -17.513,3.70699 z m 23.44,15.38263 c -4.0253,0.63665 -8.2952,5.00215 -8.1914,9.07617 0.093,3.65956 4.1475,7.19805 7.7637,7.76758 2.8828,0.45404 6.2323,-1.52421 7.793,-3.99023 1.5083,-2.38339 1.6347,-5.99402 0.2614,-8.45771 -1.4287,-2.56297 -4.7284,-4.8542 -7.6267,-4.39581 z m 1507.8497,9.33152 c 0.1655,3.69785 4.4826,7.10025 8.1588,7.53309 2.8361,0.33392 6.0186,-1.73262 7.472,-4.19073 1.4296,-2.4178 1.6313,-6.09125 0.07,-8.42619 -1.6239,-2.42852 -5.2795,-3.93471 -8.1268,-3.28114 -3.6662,0.84152 -7.7422,4.60727 -7.574,8.36497 z M 158.3756,338.13988 c -3.7156,0.32847 -8.5015,0.39442 -10.6465,3.44612 -1.8228,2.59348 -1.6652,7.02455 0.3086,9.50505 1.9773,2.48476 6.0432,2.18906 9.2088,2.43947 3.7432,0.2961 8.0361,0.87412 11.2072,-1.13674 2.3263,-1.47514 4.5758,-4.34452 4.2602,-7.08095 -0.3197,-2.7725 -3.3454,-4.74418 -5.8361,-6.00344 -2.553,-1.29079 -5.6525,-1.42143 -8.5022,-1.16951 z m 1516.0098,0 c -3.7103,0.312 -8.4569,0.40566 -10.6311,3.42834 -1.8202,2.53055 -1.7696,6.86387 0.1096,9.35095 1.8284,2.41983 5.7053,2.28395 8.723,2.58774 3.8739,0.38999 8.2775,0.94732 11.6354,-1.02327 2.3283,-1.36634 4.7189,-4.00276 4.5537,-6.69728 -0.1727,-2.81696 -3.1005,-5.02019 -5.5804,-6.36748 -2.6075,-1.41664 -5.8531,-1.52766 -8.8102,-1.279 z M 164.9636,360.1611 c -2.0984,2.00997 -3.3644,5.77012 -2.2038,8.43402 1.086,2.49271 4.5428,3.21718 7.1837,3.86395 5.0552,1.23801 10.6966,1.50449 15.6124,-0.20517 2.4593,-0.85534 5.5391,-2.24489 6.1889,-4.76636 0.7124,-2.76464 -1.1913,-6.06403 -9.5518,-9.29072 -8.3605,-3.22668 -14.2565,-0.88336 -17.2294,1.96428 z m 1477.1441,-0.008 c -2.0274,2.09159 -3.3704,5.78638 -2.2049,8.45593 1.0863,2.48824 4.5403,3.20469 7.1774,3.85075 5.0213,1.23018 10.6147,1.48263 15.5083,-0.18468 2.4705,-0.84173 5.5826,-2.18517 6.2575,-4.70633 0.7435,-2.77747 -1.2366,-6.02041 -3.3813,-7.93548 -2.7828,-2.48482 -6.9947,-3.19166 -10.7254,-3.19826 -4.3891,-0.008 -9.5768,0.56645 -12.6316,3.71807 z m 44.266,-2.35261 c -3.2896,0.43877 -6.1256,3.82213 -7.0792,7.00095 -1.0492,3.49738 -0.4475,8.27102 2.2628,10.7178 2.3338,2.10691 6.843,2.85545 9.3796,0.99763 3.9715,-2.90879 4.9842,-9.99331 2.9418,-14.47247 -1.1923,-2.61494 -4.6563,-4.62387 -7.505,-4.24391 z M 165.983,376.38012 c -3.8357,1.34328 -8.2801,5.35106 -7.7833,9.3847 0.5029,4.08348 5.8421,7.54539 9.9494,7.30475 2.9846,-0.17487 5.9651,-3.18629 6.5606,-6.11617 0.7019,-3.45322 -1.5604,-7.44491 -4.3048,-9.65531 -1.1724,-0.94429 -3.0011,-1.41553 -4.4219,-0.91797 z m 1504.1524,0.27734 c -4.0733,0.18285 -8.9965,3.53773 -9.6094,7.56881 -0.5123,3.36907 2.7082,6.96851 5.7881,8.42707 3.1315,1.48302 7.5846,1.20117 10.3578,-0.87606 2.4813,-1.85858 4.3098,-5.72262 3.3582,-8.67319 -1.2082,-3.74649 -5.9622,-6.62316 -9.8947,-6.44663 z m -1472.8848,0.35352 c -3.7183,0.32381 -8.5134,0.39137 -10.6523,3.45003 -1.8226,2.60625 -1.6361,7.05328 0.3535,9.53434 1.986,2.47652 6.0483,2.16208 9.213,2.41172 3.6777,0.29012 7.8732,0.8464 11.0138,-1.08934 2.3517,-1.44957 4.6991,-4.25149 4.4349,-7.00146 -0.2671,-2.78051 -3.2684,-4.81349 -5.7499,-6.09606 -2.5755,-1.33118 -5.7248,-1.46075 -8.613,-1.20923 z m 1438.2637,0 c -3.6631,0.57228 -8.4147,0.39209 -10.5926,3.39255 -1.8346,2.52748 -1.8249,6.86996 0.048,9.36917 1.8232,2.43294 5.7166,2.29334 8.7408,2.60547 3.8244,0.39472 8.1512,0.93239 11.4936,-0.96781 2.3474,-1.33456 4.8369,-3.89141 4.7128,-6.58883 -0.1328,-2.88595 -3.1331,-5.17091 -5.6681,-6.55666 -2.5808,-1.41081 -5.8004,-1.04438 -8.7342,-1.25389 -10e-5,-1e-5 -2e-4,-2e-5 -3e-4,0 z m 15.168,19.08203 c -4.08,0.22128 -9.0143,3.57648 -9.6016,7.62001 -0.4921,3.38864 2.7854,6.98284 5.8975,8.41103 3.1904,1.46409 7.7245,1.13653 10.4794,-1.03885 2.4366,-1.924 4.0718,-5.87352 3.043,-8.80274 -1.282,-3.65022 -5.9552,-6.39897 -9.8183,-6.18945 z M 182.319,396.39965 c -3.8971,-0.13561 -8.8254,0.77665 -10.9844,4.02381 -1.736,2.61093 -1.5273,6.94958 0.4336,9.39611 1.9426,2.42372 5.8863,2.3741 8.9916,2.44609 3.4664,0.0804 7.7553,0.24229 10.1529,-2.26249 2.1164,-2.21104 3.0366,-6.33654 1.6035,-9.04102 -1.7435,-3.2904 -6.4757,-4.43299 -10.1972,-4.5625 z m 1432.8984,0.0293 c -4.0811,0.0913 -9.0226,-0.23445 -11.9692,2.59064 -2.106,2.01913 -3.3786,5.79576 -2.21,8.46902 1.0874,2.48735 4.5429,3.20065 7.1807,3.84203 5.0913,1.23795 10.7857,1.54612 15.7173,-0.22396 2.4627,-0.88391 5.5577,-2.35135 6.1283,-4.90486 0.6403,-2.86551 -1.5277,-6.15081 -3.8801,-7.90792 -2.9709,-2.21908 -7.2598,-1.94785 -10.967,-1.86495 z m -1398.5234,0.0176 c -3.7129,0.31355 -8.4714,0.39955 -10.6389,3.4303 -1.8223,2.54814 -1.7443,6.91071 0.1618,9.39682 1.8711,2.4405 5.8057,2.25515 8.867,2.54774 3.8019,0.36337 8.1288,0.93024 11.412,-1.02081 2.3647,-1.4052 4.7785,-4.12458 4.575,-6.86773 -0.207,-2.79084 -3.1642,-4.90877 -5.6345,-6.22393 -2.5989,-1.38372 -5.8085,-1.51016 -8.7424,-1.26239 z m 1407.4765,23.41637 c -1.7375,2.6513 -1.4568,7.0468 0.5589,9.49332 2.0071,2.43611 6.0155,2.32469 9.1718,2.35487 3.4103,0.0326 7.6422,0.15033 9.9568,-2.35441 2.0822,-2.2532 2.8494,-6.38877 1.4058,-9.09587 -1.6381,-3.07184 -6.4523,-3.59209 -10.0079,-3.70706 -3.8543,-0.12463 -8.9495,0.0499 -11.0854,3.30915 z m -1426.914,-3.9789 c -3.7051,0.31116 -8.4525,0.39107 -10.6198,3.41229 -1.8294,2.55033 -1.7658,6.9246 0.1446,9.41483 1.89,2.46354 5.8678,2.25966 8.9591,2.55043 3.7642,0.35406 8.0411,0.90533 11.2968,-1.01687 2.3606,-1.39372 4.7902,-4.0809 4.6021,-6.81576 -0.1931,-2.80688 -3.156,-4.955 -5.6365,-6.28269 -2.5971,-1.39004 -5.811,-1.50874 -8.7463,-1.26223 z m 38.8711,0 c -3.7121,0.30504 -8.4701,0.39748 -10.635,3.42834 -1.8231,2.5524 -1.74,6.92313 0.1737,9.40832 1.8908,2.45544 5.8582,2.24725 8.9433,2.54104 3.7286,0.35506 7.9355,0.87094 11.194,-0.97582 2.3366,-1.32424 4.8177,-3.84275 4.7244,-6.52688 -0.099,-2.84116 -2.9893,-5.15355 -5.4686,-6.54459 -2.6252,-1.47287 -5.9318,-1.57694 -8.9318,-1.33041 z m 1360.5195,0 c -3.7121,0.3052 -8.4708,0.397 -10.635,3.42834 -1.8229,2.55329 -1.7369,6.92488 0.1778,9.41008 1.8905,2.45381 5.8555,2.24573 8.9392,2.53928 3.7287,0.35495 7.9355,0.87096 11.1941,-0.97582 2.3366,-1.32424 4.8175,-3.84275 4.7243,-6.52688 -0.099,-2.84128 -2.9889,-5.15424 -5.4683,-6.54534 -2.6252,-1.4729 -5.932,-1.57632 -8.9321,-1.32966 z m 19.0664,19.38672 c -3.8941,-0.13786 -8.8304,0.77219 -10.9746,4.02576 -1.7364,2.63489 -1.4812,7.00457 0.5094,9.4531 1.961,2.41207 5.9057,2.33393 9.0138,2.39222 3.4366,0.0645 7.6818,0.21331 10.0588,-2.26952 2.109,-2.2029 3.045,-6.306 1.6231,-9.00391 -1.7432,-3.30747 -6.4941,-4.46537 -10.2305,-4.59765 z m -51.3534,2.6307 c -2.0307,2.1012 -3.3505,5.81331 -2.1804,8.49097 1.0663,2.44008 4.4427,3.15962 7.0279,3.79826 5.0601,1.25004 10.704,1.51338 15.6357,-0.17364 2.4869,-0.8507 5.6092,-2.2203 6.2862,-4.75996 0.7306,-2.7409 -1.2132,-5.94102 -3.3271,-7.83246 -2.8013,-2.50649 -7.0449,-3.22237 -10.8038,-3.23221 -4.3905,-0.0115 -9.5873,0.55202 -12.6385,3.70904 z m -1347.67,-2.5819 c -3.7267,0.31445 -8.5051,0.41548 -10.6717,3.46393 -1.8084,2.54459 -1.7057,6.88941 0.1985,9.3632 1.8746,2.43545 5.8018,2.25481 8.8612,2.54774 3.8017,0.364 8.0998,0.88253 11.4119,-1.01899 2.2978,-1.31923 4.7141,-3.83362 4.6024,-6.48088 -0.121,-2.86934 -3.052,-5.18449 -5.5623,-6.57957 -2.6031,-1.4467 -5.8724,-1.54583 -8.84,-1.29543 z m 38.873,0 c -3.6721,0.57566 -8.4399,0.39883 -10.6158,3.4123 -1.8272,2.53045 -1.7959,6.87205 0.085,9.36309 1.8428,2.44115 5.7582,2.28994 8.8017,2.59362 3.8383,0.38297 8.181,0.90508 11.5275,-1.01313 2.2988,-1.31763 4.7141,-3.83362 4.6024,-6.48088 -0.121,-2.86934 -3.052,-5.18445 -5.5623,-6.57957 -2.6025,-1.44643 -5.8684,-1.07895 -8.8381,-1.29543 z m 1306.7012,19.38672 c -3.8938,-0.14728 -8.8258,0.77523 -10.9746,4.02577 -1.7357,2.62574 -1.499,6.98401 0.4814,9.43048 1.9636,2.42569 5.9258,2.35186 9.046,2.414 3.429,0.0683 7.656,0.21159 10.039,-2.25501 2.1062,-2.1801 3.0821,-6.24553 1.6862,-8.93634 -1.7334,-3.34143 -6.5164,-4.53662 -10.278,-4.6789 z m -1326.1328,0.0488 c -3.6734,0.57566 -8.4399,0.40019 -10.6198,3.41229 -1.8272,2.52473 -1.806,6.85708 0.065,9.34943 1.8246,2.43038 5.7135,2.29777 8.737,2.6054 3.8673,0.39349 8.2612,0.94758 11.6176,-1.0134 2.34,-1.3672 4.7598,-4.00415 4.5927,-6.70919 -0.1749,-2.83199 -3.1398,-5.03019 -5.6362,-6.37889 -2.5947,-1.40181 -5.8148,-1.05416 -8.7564,-1.26564 z m 38.8691,0 c -3.7164,0.31556 -8.4798,0.40628 -10.6467,3.44202 -1.8177,2.54669 -1.7333,6.90289 0.1716,9.3851 1.8711,2.43818 5.8018,2.25441 8.8611,2.54777 3.7959,0.36398 8.1098,0.92219 11.3948,-1.01421 2.3601,-1.39124 4.7894,-4.07661 4.602,-6.8099 -0.1926,-2.81005 -3.1592,-4.96074 -5.6426,-6.28989 -2.5952,-1.38904 -5.8072,-1.50993 -8.7402,-1.26089 z m 1321.6504,0 c -3.7055,0.30611 -8.4398,0.40022 -10.6197,3.41229 -1.8272,2.52472 -1.8061,6.85707 0.065,9.34943 1.8246,2.4304 5.7135,2.29777 8.737,2.6054 3.8673,0.39349 8.2612,0.94759 11.6176,-1.0134 2.3401,-1.3672 4.7525,-4.00372 4.5927,-6.70919 -0.1656,-2.80322 -3.0788,-4.9984 -5.5441,-6.34289 -2.6173,-1.42739 -5.8774,-1.54708 -8.8485,-1.30164 z m -52.8672,19.08203 c -4.0691,0.17473 -8.9826,3.54183 -9.5918,7.56881 -0.5103,3.37307 2.7154,6.9743 5.7995,8.43255 3.1303,1.48009 7.5721,1.18498 10.3502,-0.88173 2.465,-1.83372 4.3149,-5.64129 3.3894,-8.5708 -1.1959,-3.78542 -5.9811,-6.71914 -9.9473,-6.54883 z M 255.567,474.19061 c -3.712,0.30416 -8.4676,0.39743 -10.6351,3.42618 -1.824,2.54865 -1.7483,6.91331 0.158,9.40094 1.8702,2.44045 5.8045,2.25405 8.8651,2.54788 3.794,0.36424 8.0809,0.88198 11.3896,-1.00996 2.2991,-1.31462 4.7168,-3.81807 4.6189,-6.46465 -0.1053,-2.84693 -2.9855,-5.17153 -5.4686,-6.56803 -2.6226,-1.47496 -5.929,-1.57809 -8.9279,-1.33236 z m 38.8711,0 c -3.6832,0.57974 -8.4651,0.41103 -10.6447,3.43616 -1.8172,2.52221 -1.7782,6.84239 0.092,9.32556 1.8295,2.42905 5.7175,2.2976 8.7428,2.6054 3.8628,0.39301 8.2607,0.96351 11.6044,-1.01026 2.3624,-1.39453 4.7812,-4.09705 4.5864,-6.83342 -0.1994,-2.80199 -3.1622,-4.93836 -5.6402,-6.26155 -2.5967,-1.38664 -5.8044,-1.05103 -8.7407,-1.26189 z m 1282.7754,0 c -3.7152,0.31444 -8.4779,0.40189 -10.6447,3.43616 -1.8198,2.54835 -1.735,6.90872 0.1717,9.39272 1.8716,2.43827 5.8027,2.25691 8.8629,2.54598 3.8317,0.36195 8.1952,0.92229 11.4981,-1.05344 2.331,-1.39433 4.6954,-4.08936 4.4929,-6.79798 -0.2094,-2.80127 -3.1623,-4.93836 -5.6402,-6.26155 -2.5967,-1.38663 -5.8074,-1.51015 -8.7407,-1.26189 z M 265.1964,496.33163 c -1.4993,0.9807 -1.9432,2.90668 -2.1347,4.57441 -0.2125,2.50576 0.5527,5.46426 2.9001,6.75549 2.5043,1.31184 5.4212,1.05121 8.1446,1.41795 3.4585,0.3381 7.2028,0.72801 10.3927,-0.96396 2.1827,-1.1757 4.1679,-3.0882 4.81,-5.54549 0.4069,-1.91719 -0.5792,-3.82133 -1.9627,-5.09756 -1.1984,-1.16354 -2.5975,-2.17615 -4.1506,-2.79506 -2.4619,-0.59736 -5.3609,-1.46371 -9.2818,-1.25879 -3.9208,0.20492 -6.2719,1.73523 -8.7176,2.91301 z m 48.6616,-2.70352 c -3.7109,0.32291 -8.4884,0.39244 -10.6328,3.43831 -1.8247,2.59199 -1.6758,7.02378 0.2969,9.50505 1.9862,2.49821 6.0749,2.19373 9.2563,2.44851 3.6897,0.29549 7.8966,0.84276 11.0503,-1.095 2.3276,-1.43012 4.6541,-4.1896 4.4063,-6.91015 -0.2552,-2.80116 -3.2532,-4.87837 -5.7477,-6.17803 -2.5759,-1.34204 -5.7357,-1.46047 -8.6293,-1.20869 z m 1233.2983,3.41229 c -1.8255,2.52271 -1.8092,6.85336 0.063,9.34161 1.8488,2.45715 5.7873,2.30484 8.8466,2.61524 3.7955,0.38509 8.0889,0.91502 11.4033,-0.97399 2.3443,-1.33611 4.8219,-3.8928 4.7032,-6.58851 -0.1259,-2.85971 -3.077,-5.14254 -5.5841,-6.52394 -2.6033,-1.43439 -5.8396,-2.18764 -8.8536,-1.95958 -3.7696,0.28523 -8.4008,1.07998 -10.5784,4.08917 z M 295.664,528.49761 c -4.0591,1.22279 -9.0055,0.57565 -12.6097,-1.65625 -2.0586,-1.27475 -4.0232,-3.60468 -4.0566,-6.02577 -0.032,-2.3483 1.8263,-4.63543 3.7718,-5.95094 3.1524,-2.13158 7.5329,-3.00139 11.2251,-2.08016 4.2599,1.06289 10.2101,3.81324 10.3056,8.20274 0.083,3.81412 -4.9833,6.40999 -8.6362,7.51038 z m 30.275,0.39335 c 3.0047,1.2187 7.0875,0.89184 9.6681,-1.07127 2.4255,-1.84504 4.394,-5.60918 3.3955,-8.4884 -1.4223,-4.10133 -6.9987,-7.19193 -11.2842,-6.50084 -3.86,0.62246 -7.7325,4.84417 -7.8079,8.75329 -0.061,3.15707 3.1023,6.12039 6.0285,7.30722 z m 1246.9991,-16.18271 c -4.0695,0.16389 -8.9686,3.54396 -9.5918,7.5688 -0.5178,3.3438 2.6423,6.94188 5.6939,8.40365 3.1573,1.51242 7.65,1.21922 10.4675,-0.85875 2.4493,-1.80643 4.3027,-5.5663 3.4011,-8.47308 -1.183,-3.81397 -5.9807,-6.80131 -9.9707,-6.64062 z m -34.5996,0.35351 c -3.7064,0.30795 -8.4582,0.39116 -10.6215,3.41642 -1.8282,2.55671 -1.7474,6.93741 0.1702,9.42783 1.8864,2.44991 5.8451,2.24437 8.9236,2.53248 3.774,0.3532 8.0392,0.86782 11.3257,-1.02086 2.2973,-1.3202 4.7139,-3.83361 4.6024,-6.48087 -0.1209,-2.86955 -3.0515,-5.18548 -5.5619,-6.58069 -2.6027,-1.44645 -5.8711,-1.54086 -8.8385,-1.29431 z m -1224.4668,19.4375 c -3.7038,0.312 -8.4488,0.39241 -10.6158,3.41229 -1.8299,2.55003 -1.766,6.92171 0.1407,9.41483 1.867,2.44129 5.8017,2.25475 8.8611,2.54774 3.8005,0.36396 8.1273,0.9339 11.4084,-1.0182 2.3723,-1.4114 4.7926,-4.14528 4.5826,-6.89767 -0.2129,-2.78874 -3.179,-4.89309 -5.65,-6.20313 -2.5966,-1.3766 -5.7984,-1.50256 -8.727,-1.25586 z m 1243.9043,0 c -3.7238,0.31805 -8.4991,0.41154 -10.6661,3.45655 -1.8115,2.54539 -1.7136,6.8941 0.191,9.37057 1.8736,2.4362 5.8017,2.25459 8.8611,2.54777 3.7991,0.36407 8.1182,0.92433 11.4044,-1.01648 2.3585,-1.39289 4.7817,-4.08304 4.5905,-6.81544 -0.1967,-2.81152 -3.1682,-4.95856 -5.6541,-6.28659 -2.5922,-1.38482 -5.7985,-1.50648 -8.7268,-1.25638 z M 299.8893,551.58129 c -4.0868,0.20041 -9.0239,3.58383 -9.6133,7.63282 -0.4915,3.37683 2.7719,6.95665 5.8701,8.38711 3.1758,1.46633 7.6775,1.1416 10.4465,-0.99573 2.4317,-1.87693 4.1456,-5.74045 3.1697,-8.6531 -1.2443,-3.71383 -5.961,-6.56294 -9.873,-6.3711 z m 1242.9551,0.30274 c -3.8966,-0.13469 -8.8288,0.77103 -10.9844,4.01992 -1.7371,2.61817 -1.5131,6.96641 0.4558,9.41507 1.9412,2.41422 5.8727,2.36089 8.9697,2.43182 3.4634,0.0793 7.7502,0.24603 10.1448,-2.25744 2.1203,-2.21666 3.0364,-6.35339 1.5977,-9.0625 -1.7436,-3.28327 -6.4683,-4.41845 -10.1836,-4.54687 z m -1209.543,0.0488 c -3.7073,0.32018 -8.4736,0.38842 -10.6252,3.42444 -1.8304,2.58275 -1.7088,7.00386 0.2463,9.49353 1.9403,2.47085 5.9645,2.20788 9.0951,2.4715 3.7619,0.31678 8.056,0.87679 11.2721,-1.1004 2.321,-1.42691 4.6305,-4.18733 4.3808,-6.90039 -0.2576,-2.80048 -3.2519,-4.87797 -5.7457,-6.17803 -2.5739,-1.34182 -5.7315,-1.46041 -8.6234,-1.21065 z m 1243.9121,0 c -3.7315,0.32002 -8.5178,0.4195 -10.6851,3.47392 -1.8046,2.54331 -1.6957,6.88316 0.208,9.35321 1.8773,2.43579 5.8057,2.25512 8.867,2.54774 3.8006,0.36329 8.13,0.93662 11.4083,-1.02028 2.3738,-1.417 4.7857,-4.16444 4.5707,-6.92067 -0.2165,-2.77654 -3.1688,-4.86938 -5.6296,-6.17352 -2.6006,-1.37826 -5.8068,-1.51189 -8.7393,-1.2604 z m 15.1602,19.08594 c -4.0668,0.14862 -8.9698,3.53317 -9.5899,7.55514 -0.5175,3.35667 2.6737,6.94781 5.7329,8.42313 3.0844,1.48747 7.4577,1.22552 10.2444,-0.76448 2.494,-1.78101 4.4868,-5.50979 3.6228,-8.45016 -1.1352,-3.86368 -5.9859,-6.9107 -10.0102,-6.76363 z m -1278.5098,0.35156 c -3.713,0.32251 -8.4932,0.39271 -10.6387,3.44027 -1.8247,2.592 -1.6727,7.02134 0.2969,9.50505 1.9637,2.47627 6.0097,2.19388 9.1599,2.44733 3.7531,0.30194 8.0391,0.85145 11.2385,-1.13351 2.298,-1.42567 4.5691,-4.1782 4.3145,-6.87046 -0.2648,-2.80026 -3.2534,-4.87798 -5.7477,-6.17803 -2.574,-1.3416 -5.7316,-1.46182 -8.6234,-1.21065 z m 1243.9062,0 c -3.7036,0.30916 -8.448,0.39404 -10.6138,3.41425 -1.8287,2.55011 -1.7623,6.92076 0.1446,9.41288 1.8684,2.44179 5.8048,2.25077 8.865,2.54788 3.7642,0.36545 8.0187,0.89654 11.3034,-0.97789 2.3436,-1.33739 4.8219,-3.8928 4.7032,-6.58852 -0.1259,-2.85971 -3.0772,-5.14215 -5.5841,-6.52394 -2.6014,-1.43392 -5.8581,-1.53176 -8.8183,-1.28466 z m -1258.8457,19.3887 c -3.8963,-0.11527 -8.8404,0.76839 -10.9785,4.0277 -1.7373,2.64828 -1.4614,7.03993 0.5509,9.48575 2.0075,2.43994 6.0201,2.35994 9.1798,2.36244 3.5274,0.003 7.9207,0.0256 10.2525,-2.62123 1.9657,-2.23121 2.5752,-6.2689 1.1028,-8.85232 -1.8197,-3.19267 -6.4342,-4.29367 -10.1075,-4.40234 z m 33.5625,0.0293 c -1.8111,-0.0572 -3.6393,0.0106 -7.5951,1.33523 -3.9558,1.32463 -5.8961,4.36123 -6.194,6.97607 -0.3334,2.92566 1.2402,8.51496 14.1325,8.39709 12.8923,-0.11788 14.6044,-6.47885 14.2187,-9.20472 -0.3921,-2.77029 -3.1099,-5.24296 -5.6395,-6.43847 -2.7081,-1.27986 -5.9288,-0.97071 -8.9226,-1.0652 z m 1244.7168,0.0195 c -3.7116,0.32536 -8.4977,0.38364 -10.6369,3.4342 -1.8285,2.60753 -1.6523,7.06207 0.3381,9.54823 1.9832,2.47716 6.0459,2.16192 9.2094,2.41048 3.6981,0.29056 7.9185,0.84857 11.0738,-1.10189 2.3275,-1.43874 4.6445,-4.22001 4.3789,-6.94336 -0.2746,-2.81512 -3.3135,-4.87237 -5.8281,-6.16731 -2.5535,-1.31493 -5.674,-1.43116 -8.5352,-1.18035 z M 303.3424,623.0227 c 1.8438,2.43993 5.7585,2.28666 8.8017,2.58972 3.8377,0.38218 8.2101,0.95735 11.5257,-1.01269 2.372,-1.40936 4.7878,-4.14425 4.5788,-6.89539 -0.2117,-2.78724 -5.9045,-7.89006 -17.7298,-6.19942 -11.8253,1.69063 -9.0582,9.02772 -7.1764,11.51778 z m 1282.6852,-9.36288 c -1.6812,2.62961 -1.7917,6.8728 0.09,9.36288 1.8438,2.43994 5.7585,2.28666 8.8017,2.58972 3.8365,0.38206 8.2069,0.95614 11.522,-1.01236 2.3733,-1.40929 4.7931,-4.14341 4.5845,-6.89572 -0.2113,-2.78772 -3.1687,-4.90347 -5.643,-6.20491 -3.3283,-1.75062 -7.4565,-2.06496 -11.1782,-1.52556 -2.9589,0.42883 -6.5665,1.16699 -8.177,3.68595 z m -1.2203,15.38827 c -4.0175,0.49172 -8.2661,5.2974 -7.7872,9.31638 0.4887,4.1019 5.8958,8.117 9.9594,7.3748 4.006,-0.7318 7.3585,-6.268 6.614,-10.27169 -0.6632,-3.56603 -5.1859,-6.86015 -8.7862,-6.41949 z m -1298.5302,0.28906 c -2.8446,1.12753 -5.6471,3.06665 -6.7314,6.0528 -0.8211,2.09342 -1.0022,4.81372 0.6775,6.54652 1.9794,1.842 4.7851,2.1982 7.2984,2.8468 5.905,1.2911 12.4245,1.2025 17.8118,-1.82 1.7477,-0.9419 3.3478,-2.6645 3.1908,-4.7836 -0.1592,-2.77045 -1.9128,-5.27691 -4.1367,-6.83887 -2.8258,-1.74595 -2.1826,-1.43093 -5.4621,-2.4088 -3.2795,-0.97788 -10.3244,-0.4919 -12.6483,0.40515 z m 1329.7997,0.34177 c -3.7073,0.32024 -8.4785,0.38497 -10.6252,3.42443 -1.8313,2.59282 -1.6923,7.02972 0.2775,9.51892 1.9613,2.4784 6.01,2.1935 9.1603,2.4473 3.7554,0.3025 8.0468,0.8582 11.2459,-1.1318 2.3016,-1.4316 4.5675,-4.1995 4.3067,-6.8975 -0.2698,-2.79132 -3.2521,-4.85651 -5.7399,-6.15071 -2.5756,-1.33988 -5.7328,-1.4605 -8.6253,-1.21064 z m -13.9844,19.08205 c -4.0781,0.1689 -8.9951,3.5654 -9.5993,7.6021 -0.5032,3.3615 2.7159,6.9433 5.7898,8.3939 3.1428,1.483 7.5953,1.182 10.3876,-0.8867 2.4454,-1.8117 4.2965,-5.5704 3.3926,-8.4765 -1.1855,-3.8117 -5.9823,-6.798 -9.9707,-6.6328 z m -1292.4941,0 c -4.0693,0.1599 -8.9819,3.5404 -9.5918,7.5668 -0.5109,3.3731 2.7136,6.9755 5.7976,8.4342 3.1306,1.4808 7.5641,1.1729 10.3519,-0.8816 2.4452,-1.8021 4.3184,-5.54 3.4266,-8.4436 -1.1753,-3.8272 -5.9839,-6.8331 -9.9843,-6.6758 z m 1325.9218,0.3496 c -3.7053,0.3111 -8.4526,0.3927 -10.6197,3.4142 -1.8289,2.55 -1.7623,6.9208 0.1446,9.4129 1.8684,2.4418 5.8046,2.2534 8.8651,2.5479 3.7886,0.3646 8.0824,0.9072 11.3742,-1.0035 2.3404,-1.3585 4.7836,-3.9666 4.6304,-6.6684 -0.1616,-2.851 -3.1401,-5.0776 -5.6501,-6.4393 -2.5887,-1.4044 -5.8097,-1.5102 -8.7445,-1.2638 z m -1360.5195,0 c -3.7053,0.3111 -8.4526,0.3927 -10.6197,3.4142 -1.8289,2.55 -1.7623,6.9208 0.1446,9.4129 1.8684,2.4418 5.8045,2.2534 8.865,2.5479 3.7887,0.3646 8.0825,0.9072 11.3743,-1.0035 2.3404,-1.3585 4.7835,-3.9666 4.6303,-6.6684 -0.1616,-2.851 -3.14,-5.0777 -5.65,-6.4393 -2.5887,-1.4044 -5.8097,-1.5102 -8.7445,-1.2638 z m -13.9922,19.082 c -4.0696,0.16 -8.9831,3.5418 -9.5918,7.5688 -0.5101,3.3752 2.7191,6.9777 5.8055,8.4361 3.1283,1.4783 7.5572,1.1698 10.3424,-0.8831 2.4454,-1.8023 4.3197,-5.5399 3.4283,-8.444 -1.1749,-3.8277 -5.9836,-6.835 -9.9844,-6.6778 z m 1360.5196,0 c -4.0697,0.16 -8.9832,3.5418 -9.5918,7.5688 -0.5101,3.3752 2.7191,6.9777 5.8054,8.4361 3.1284,1.4783 7.5572,1.1698 10.3425,-0.8831 2.4454,-1.8023 4.3196,-5.54 3.4282,-8.444 -1.1749,-3.8276 -5.9835,-6.835 -9.9843,-6.6778 z m -1327.0996,0.3535 c -3.7149,0.3193 -8.4981,0.3921 -10.6428,3.442 -1.8242,2.5942 -1.6686,7.0282 0.3068,9.5092 1.9857,2.4939 6.0687,2.1886 9.2465,2.4417 3.6971,0.2945 7.9133,0.8421 11.0719,-1.1018 2.321,-1.4285 4.6309,-4.1839 4.3886,-6.8985 -0.248,-2.7791 -3.2026,-4.8576 -5.6726,-6.1552 -2.5927,-1.3621 -5.7806,-1.4882 -8.6984,-1.2374 z m 1360.5195,0 c -3.7144,0.3236 -8.4981,0.3921 -10.6428,3.442 -1.8242,2.5942 -1.6689,7.0285 0.3068,9.5092 1.9871,2.495 6.0725,2.1918 9.2524,2.4408 3.7232,0.2914 7.9736,0.8336 11.1459,-1.1371 2.2943,-1.4253 4.5642,-4.1734 4.3088,-6.8623 -0.2667,-2.8071 -3.2656,-4.8872 -5.7669,-6.1889 -2.569,-1.3369 -5.7191,-1.455 -8.6042,-1.2037 z m -25.9141,23.4145 c -1.6915,2.6631 -1.484,7.0026 0.5054,9.4513 1.9582,2.4103 5.8993,2.3254 9.0041,2.3921 3.4058,0.073 7.5904,0.2299 9.9807,-2.1973 2.1225,-2.1553 3.0735,-6.1408 1.8151,-8.8916 -1.5462,-3.3798 -6.0146,-5.2225 -9.724,-5.456 -4.1582,-0.2616 -9.3475,1.1845 -11.5813,4.7015 z m -1354.039,-3.977 c -3.7046,0.3151 -8.4539,0.393 -10.6176,3.4164 -1.8277,2.554 -1.7522,6.9307 0.162,9.4204 1.8863,2.4534 5.8488,2.2509 8.93,2.5395 3.7806,0.3542 8.07,0.895 11.3449,-1.0267 2.3324,-1.3687 4.7494,-3.9982 4.5791,-6.6972 -0.18,-2.8512 -3.1722,-5.0577 -5.6884,-6.4105 -2.5831,-1.3888 -5.7879,-1.4904 -8.71,-1.2419 z m 1399.3984,0 c -3.7134,0.3051 -8.4629,0.4039 -10.6389,3.4284 -1.8209,2.5308 -1.7696,6.865 0.1096,9.3529 1.8249,2.4159 5.695,2.2807 8.7073,2.5857 3.8675,0.3917 8.2446,0.9206 11.618,-1.0111 2.2993,-1.3167 4.7063,-3.8333 4.6024,-6.4809 -0.1115,-2.8408 -2.9889,-5.1542 -5.4683,-6.5453 -2.6246,-1.4726 -5.9307,-1.5761 -8.9301,-1.3297 z m 15.1543,19.082 c -4.0479,0.1593 -8.9322,3.4918 -9.5688,7.4926 -0.5351,3.3632 2.6234,7.0069 5.6918,8.484 3.15,1.5164 7.6412,1.2134 10.4524,-0.8649 2.4529,-1.8135 4.3041,-5.5864 3.3953,-8.4984 -1.1882,-3.807 -5.9856,-6.7701 -9.9707,-6.6133 z m -1440.4688,4.3305 c -1.7351,2.6091 -1.5254,6.9417 0.4297,9.3903 1.9154,2.3988 5.8095,2.3622 8.878,2.4468 3.4839,0.096 7.7777,0.2703 10.2177,-2.2183 2.1195,-2.1617 3.0765,-6.1896 1.7517,-8.9118 -1.518,-3.1188 -5.46,-4.7448 -9.4384,-5.0562 -5.5019,-0.6087 -9.6796,1.1026 -11.8387,4.3492 z m 45.3594,-3.977 c -3.7279,0.3141 -8.5081,0.4146 -10.6755,3.464 -1.8086,2.5445 -1.7057,6.8894 0.1984,9.3632 1.8747,2.4354 5.8018,2.2548 8.8612,2.5477 3.8017,0.364 8.1077,0.8962 11.4119,-1.019 2.3184,-1.3438 4.7356,-3.9163 4.6005,-6.5926 -0.1433,-2.8392 -3.0694,-5.0962 -5.5599,-6.467 -2.6081,-1.4355 -5.87,-1.5462 -8.8366,-1.2963 z m 1360.5195,0 c -3.7279,0.3141 -8.5087,0.4142 -10.6755,3.464 -1.8084,2.5454 -1.7027,6.8912 0.2025,9.3649 1.8748,2.4343 5.8005,2.2531 8.8591,2.546 3.7972,0.3636 8.0971,0.8947 11.3986,-1.0162 2.3233,-1.3446 4.7504,-3.918 4.6157,-6.5989 -0.1426,-2.8392 -3.0729,-5.0935 -5.5638,-6.4635 -2.6085,-1.4347 -5.8701,-1.5462 -8.8366,-1.2963 z m -1379.9628,19.4356 c -3.7188,0.3183 -8.5134,0.3913 -10.6524,3.45 -1.8225,2.6063 -1.6362,7.0534 0.3535,9.5343 1.9865,2.477 6.0492,2.1688 9.215,2.4115 3.7285,0.2859 7.9747,0.8081 11.1591,-1.1524 2.2638,-1.3936 4.5184,-4.0645 4.3037,-6.7141 -0.2272,-2.8024 -3.1562,-4.9503 -5.6359,-6.2753 -2.5967,-1.3876 -5.8096,-1.5051 -8.743,-1.254 z m 77.7441,0 c -3.7188,0.3183 -8.5134,0.3913 -10.6523,3.45 -1.8226,2.6063 -1.6362,7.0534 0.3535,9.5343 1.9864,2.477 6.0491,2.1688 9.2149,2.4115 3.7286,0.2859 7.9748,0.8081 11.1592,-1.1524 2.2637,-1.3936 4.5184,-4.0645 4.3036,-6.7141 -0.2271,-2.8024 -3.1561,-4.9503 -5.6358,-6.2753 -2.5968,-1.3876 -5.8096,-1.5051 -8.7431,-1.254 z m -38.8652,0 c -3.7053,0.3023 -8.4504,0.3919 -10.6178,3.4123 -1.8299,2.5499 -1.7662,6.9218 0.1407,9.4148 1.8683,2.4426 5.8061,2.2509 8.867,2.5479 3.7629,0.3651 8.0091,0.8837 11.2994,-0.9782 2.3277,-1.3173 4.7988,-3.8234 4.7091,-6.4964 -0.095,-2.8473 -2.9855,-5.1716 -5.4686,-6.5681 -2.6232,-1.4752 -5.9302,-1.5771 -8.9298,-1.3323 z m 77.7441,0 c -3.7315,0.3197 -8.5178,0.4195 -10.6851,3.4739 -1.8046,2.5433 -1.6957,6.8831 0.208,9.3532 1.8773,2.4358 5.8054,2.2584 8.867,2.5477 3.8317,0.3621 8.1945,0.9212 11.4981,-1.0534 2.3291,-1.3922 4.6932,-4.0822 4.4929,-6.7882 -0.2076,-2.8039 -3.1607,-4.946 -5.6402,-6.2713 -2.5962,-1.3877 -5.8077,-1.5133 -8.7407,-1.2619 z m 1282.7754,0 c -3.7323,0.3112 -8.5178,0.4195 -10.6851,3.4739 -1.8046,2.5433 -1.6957,6.8831 0.208,9.3532 1.8773,2.4358 5.8061,2.2511 8.867,2.5479 3.763,0.3648 8.0098,0.8831 11.2994,-0.9802 2.3282,-1.3187 4.7987,-3.8281 4.7072,-6.5023 -0.097,-2.8466 -2.989,-5.1676 -5.4723,-6.5627 -2.6221,-1.4731 -5.927,-1.5798 -8.9242,-1.3298 z m -13.9942,19.082 c -4.0697,0.1566 -8.9751,3.5426 -9.5917,7.5684 -0.5141,3.3559 2.6816,6.9409 5.7408,8.4133 3.0855,1.4851 7.4624,1.2287 10.2441,-0.7682 2.5012,-1.7956 4.48,-5.5555 3.6006,-8.5063 -1.1459,-3.8448 -5.9848,-6.8615 -9.9938,-6.7072 z m -1250.1347,0.334 c -4.1119,0.073 -9.0928,-0.2457 -12.0603,2.6016 -2.1045,2.0195 -3.3734,5.8012 -2.1966,8.47 1.1057,2.5076 4.6033,3.2033 7.2681,3.8435 5.0539,1.2142 10.6864,1.4875 15.5915,-0.232 2.4304,-0.852 5.4826,-2.2351 6.1063,-4.7339 0.7041,-2.8213 -1.2821,-6.1684 -3.5743,-7.9577 -2.9721,-2.3201 -7.3648,-2.0584 -11.1347,-1.9915 z m 1283.5508,0.02 c -3.7116,0.3228 -8.4858,0.395 -10.6348,3.4383 -1.8242,2.5833 -1.6872,6.9991 0.2695,9.4836 1.942,2.4657 5.9598,2.2019 9.0873,2.4656 3.7532,0.3166 8.0355,0.8778 11.2467,-1.0906 2.3291,-1.4277 4.6539,-4.1896 4.4063,-6.9102 -0.2549,-2.8007 -3.2518,-4.8784 -5.7458,-6.178 -2.5757,-1.3423 -5.7356,-1.4604 -8.6292,-1.2087 z m -1399.3907,0 c -3.7154,0.314 -8.4983,0.3937 -10.6425,3.4442 -1.8226,2.5928 -1.6622,7.0209 0.3086,9.503 1.9593,2.4678 5.992,2.1832 9.1325,2.4405 3.7248,0.3052 7.9515,0.8259 11.1586,-1.093 2.2832,-1.3662 4.6116,-3.9773 4.4413,-6.6326 -0.1808,-2.8181 -3.0941,-5.0293 -5.5744,-6.3794 -2.6105,-1.4211 -5.8623,-1.533 -8.8241,-1.2827 z m 38.8731,0 c -3.7193,0.3135 -8.5067,0.3978 -10.6521,3.4522 -1.8176,2.5876 -1.6548,7.0039 0.3103,9.4814 1.96,2.4711 5.995,2.1944 9.1384,2.4541 3.7233,0.3076 7.9477,0.8254 11.1546,-1.0911 2.2828,-1.3641 4.6113,-3.9706 4.4453,-6.6248 -0.1759,-2.8122 -3.0754,-5.0268 -5.5481,-6.3778 -2.6159,-1.4292 -5.8781,-1.5444 -8.8484,-1.294 z m 38.8711,0 c -3.7018,0.3066 -8.4432,0.3939 -10.608,3.4123 -1.8285,2.5493 -1.7633,6.9189 0.1428,9.4107 1.8689,2.4432 5.8067,2.257 8.8688,2.5499 3.8018,0.3637 8.1104,0.8989 11.4119,-1.021 2.3225,-1.3505 4.7361,-3.939 4.5946,-6.6219 -0.149,-2.8259 -3.0662,-5.0648 -5.5464,-6.4274 -2.6173,-1.4379 -5.8876,-1.5492 -8.8637,-1.3026 z m 19.4414,19.4375 c -3.7103,0.3115 -8.4562,0.4061 -10.6311,3.4283 -1.8203,2.5297 -1.7758,6.8645 0.1057,9.349 1.8514,2.4447 5.775,2.2922 8.8268,2.5935 3.843,0.3794 8.2089,0.9255 11.5393,-1.0293 2.3236,-1.3639 4.7134,-3.9899 4.5519,-6.6794 -0.1693,-2.8188 -3.0942,-5.0292 -5.5744,-6.3794 -2.6088,-1.4203 -5.8583,-1.5312 -8.8182,-1.2827 z m 38.873,0 c -3.705,0.3087 -8.4555,0.3918 -10.6175,3.4164 -1.8282,2.5575 -1.7464,6.9393 0.1722,9.4297 1.8893,2.4522 5.8524,2.2476 8.9349,2.5322 3.7949,0.3504 8.0971,0.8767 11.3848,-1.0507 2.2982,-1.3473 4.6738,-3.9255 4.528,-6.5854 -0.1555,-2.8362 -3.0766,-5.085 -5.5666,-6.4517 -2.6093,-1.4322 -5.8695,-1.5377 -8.8358,-1.2905 z m 1166.1563,0 c -3.7157,0.3281 -8.5076,0.3901 -10.6465,3.4461 -1.8239,2.606 -1.6451,7.057 0.3477,9.5363 2.0155,2.5076 6.1357,2.177 9.3439,2.4175 3.6858,0.2763 7.9056,0.8301 11.0291,-1.146 2.3171,-1.466 4.5746,-4.3039 4.2725,-7.0291 -0.3087,-2.7847 -3.3356,-4.7821 -5.8332,-6.0519 -2.5536,-1.2983 -5.66,-1.4249 -8.5135,-1.1729 z m 77.7461,0 c -3.7103,0.3124 -8.4569,0.4056 -10.6311,3.4283 -1.8202,2.5306 -1.7696,6.8639 0.1096,9.351 1.8284,2.4198 5.7053,2.2839 8.723,2.5877 3.8739,0.39 8.2775,0.9473 11.6354,-1.0233 2.3283,-1.3663 4.7196,-4.0028 4.5537,-6.6972 -0.1736,-2.8195 -3.1059,-5.023 -5.5885,-6.3707 -2.6056,-1.4144 -5.8479,-1.5246 -8.8021,-1.2758 z m -38.8653,0 c -3.7051,0.3111 -8.4525,0.3911 -10.6197,3.4123 -1.8295,2.5503 -1.7659,6.9246 0.1446,9.4148 1.89,2.4636 5.8677,2.2597 8.9591,2.5504 3.7655,0.3542 8.0422,0.903 11.3006,-1.0172 2.3538,-1.3871 4.7796,-4.0593 4.5977,-6.7853 -0.1879,-2.8146 -3.1506,-4.9786 -5.636,-6.3128 -2.5953,-1.3932 -5.811,-1.5087 -8.7463,-1.2622 z m -1189.8769,19.08 c -4.055,0.2107 -8.9581,3.5166 -9.5755,7.5299 -0.5201,3.3806 2.6885,7.0242 5.7864,8.4741 3.2102,1.5024 7.7999,1.1719 10.584,-1.0215 2.4335,-1.9172 4.0602,-5.8623 3.0332,-8.7852 -1.2838,-3.654 -5.9604,-6.3981 -9.8281,-6.1973 z m 963.2321,2.9327 c -2.0245,2.0944 -3.3678,5.7852 -2.205,8.456 1.0794,2.4793 4.5146,3.2048 7.1406,3.8497 5.0578,1.2421 10.7036,1.5094 15.6231,-0.2004 2.4671,-0.8575 5.5682,-2.2482 6.2083,-4.7803 0.7074,-2.7982 -1.3529,-6.0088 -3.526,-7.9083 -2.8022,-2.4492 -6.9924,-3.1483 -10.714,-3.1412 -4.3564,0.01 -9.4993,0.5924 -12.527,3.7245 z m 38.8391,0.021 c -2.0911,2.0089 -3.3405,5.7647 -2.1792,8.4217 1.0889,2.4914 4.5427,3.2173 7.1837,3.8639 5.0621,1.2393 10.7166,1.5204 15.6333,-0.2078 2.4671,-0.8672 5.5461,-2.291 6.1845,-4.827 0.6927,-2.752 -1.2169,-6.0167 -3.4314,-7.7914 -2.7873,-2.2337 -6.9982,-3.1966 -10.7309,-3.2013 -4.4005,-0.01 -9.6849,0.8838 -12.66,3.7419 z m 38.9015,-0.016 c -2.1006,2.0122 -3.3552,5.7726 -2.2035,8.4437 1.055,2.4468 4.425,3.1957 7.01,3.8419 5.0879,1.2719 10.7665,1.5065 15.7325,-0.1798 2.4379,-0.8279 5.4929,-2.1519 6.1801,-4.6332 0.7613,-2.7485 -1.0402,-6.0957 -3.23,-7.9231 -2.6749,-2.2321 -6.9659,-3.2365 -10.692,-3.2621 -4.4415,-0.031 -9.8249,0.8656 -12.7971,3.7126 z m 38.8427,0.016 c -2.0911,2.0089 -3.3406,5.7647 -2.1793,8.4217 1.0889,2.4914 4.5428,3.2173 7.1838,3.8639 5.062,1.2392 10.7172,1.5223 15.6332,-0.2078 2.4695,-0.8691 5.5505,-2.2978 6.1876,-4.8371 0.6899,-2.7499 -1.2213,-6.0091 -3.4344,-7.7813 -2.7882,-2.2326 -6.9982,-3.1966 -10.731,-3.2013 -4.4004,-0.01 -9.6848,0.8838 -12.6599,3.7419 z m 38.905,-0.021 c -2.1036,2.015 -3.3769,5.7892 -2.205,8.456 1.1049,2.5143 4.6092,3.2162 7.279,3.8602 5.0376,1.2152 10.6579,1.5031 15.5448,-0.2209 2.4617,-0.8685 5.5339,-2.2942 6.1668,-4.8267 0.6896,-2.759 -1.233,-6.0255 -3.4546,-7.801 -2.7831,-2.2241 -6.9812,-3.1813 -10.704,-3.1867 -4.3878,-0.01 -9.6567,0.874 -12.627,3.7191 z m -1153.3102,-2.5791 c -3.7044,0.3124 -8.4504,0.3919 -10.6178,3.4123 -1.83,2.55 -1.766,6.9217 0.1407,9.4148 1.867,2.4413 5.8017,2.2548 8.8611,2.5477 3.8018,0.3641 8.1302,0.9346 11.4121,-1.0185 2.371,-1.411 4.7881,-4.1443 4.5789,-6.8954 -0.2122,-2.7886 -3.1744,-4.8963 -5.645,-6.2068 -2.5971,-1.3777 -5.8005,-1.5012 -8.73,-1.2541 z m 1205.0234,0 c -3.7073,0.3202 -8.4785,0.3849 -10.6252,3.4244 -1.8313,2.5928 -1.6923,7.0297 0.2775,9.5189 1.9604,2.4773 6.0074,2.1922 9.1563,2.4462 3.754,0.3029 8.0412,0.8558 11.2421,-1.1287 2.2999,-1.4258 4.5729,-4.1801 4.3184,-6.8741 -0.2645,-2.7993 -3.2523,-4.8764 -5.7457,-6.1761 -2.574,-1.3416 -5.7315,-1.4604 -8.6234,-1.2106 z m 38.8808,0 c -3.7283,0.3096 -8.5087,0.4141 -10.6755,3.4639 -1.8084,2.5454 -1.7027,6.8912 0.2025,9.365 1.8748,2.4342 5.8005,2.2531 8.8591,2.5459 3.7972,0.3637 8.0895,0.8816 11.3986,-1.0161 2.3015,-1.3199 4.7172,-3.8346 4.6138,-6.4857 -0.1107,-2.8398 -2.9897,-5.1508 -5.4683,-6.5414 -2.6248,-1.4726 -5.9309,-1.5807 -8.9302,-1.3316 z m -213.8046,19.4336 c -3.708,0.3202 -8.4831,0.3823 -10.6272,3.4244 -1.8319,2.599 -1.6828,7.0464 0.2971,9.5346 1.9846,2.494 6.0685,2.1894 9.2462,2.4367 3.7295,0.2902 7.9887,0.8314 11.1637,-1.1468 2.289,-1.4261 4.5454,-4.1755 4.2893,-6.8602 -0.267,-2.7992 -3.2505,-4.8781 -5.7438,-6.1781 -2.5744,-1.3423 -5.7328,-1.4604 -8.6253,-1.2106 z m 38.873,0 c -3.7187,0.3187 -8.5134,0.3914 -10.6523,3.45 -1.8226,2.6063 -1.6361,7.0533 0.3535,9.5344 1.986,2.4765 6.0482,2.1639 9.213,2.4116 3.6939,0.2891 7.8927,0.8145 11.0603,-1.1077 2.2931,-1.3915 4.6106,-4.0571 4.4083,-6.7317 -0.213,-2.8152 -3.1637,-4.9754 -5.6533,-6.3069 -2.5921,-1.3862 -5.8007,-1.5008 -8.7295,-1.2497 z m 77.7441,0 c -3.7188,0.318 -8.5134,0.3914 -10.6523,3.45 -1.8226,2.6063 -1.6361,7.0533 0.3535,9.5344 1.986,2.4765 6.0479,2.1677 9.213,2.4116 3.7236,0.287 7.9616,0.8095 11.1454,-1.1427 2.2665,-1.3898 4.5322,-4.0521 4.3233,-6.7025 -0.2213,-2.8078 -3.1529,-4.9658 -5.6358,-6.2952 -2.5968,-1.3904 -5.8122,-1.5066 -8.7471,-1.2556 z m -1127.2792,0 c -3.6976,0.3036 -8.4208,0.3903 -10.6005,3.3925 -1.8348,2.5273 -1.8159,6.8631 0.048,9.3692 1.7625,2.3701 5.5359,2.2787 8.4727,2.5938 3.9437,0.423 8.4095,0.9695 11.8576,-0.9905 2.3025,-1.3087 4.7237,-3.8183 4.6189,-6.4646 -0.1137,-2.8735 -3.0427,-5.2008 -5.5544,-6.6011 -2.602,-1.4506 -5.873,-1.5431 -8.842,-1.2993 z m 932.9277,0 c -3.7055,0.3064 -8.4522,0.3913 -10.6198,3.4123 -1.8297,2.5501 -1.7644,6.922 0.1427,9.4148 1.8682,2.442 5.8048,2.2511 8.8651,2.5479 3.7642,0.3651 8.0122,0.883 11.3032,-0.9802 2.3263,-1.317 4.8022,-3.8229 4.7053,-6.4944 -0.1043,-2.8738 -3.0428,-5.2008 -5.5545,-6.6011 -2.6019,-1.4506 -5.8731,-1.5448 -8.842,-1.2993 z m 38.8711,0 c -3.7315,0.3199 -8.5178,0.4195 -10.6851,3.4739 -1.8046,2.5433 -1.6957,6.8831 0.208,9.3532 1.8773,2.4358 5.8057,2.2551 8.867,2.5477 3.8019,0.3635 8.129,0.9309 11.4121,-1.0204 2.3663,-1.4065 4.7817,-4.1288 4.5769,-6.874 -0.2082,-2.7904 -3.1674,-4.9055 -5.6378,-6.2195 -2.5991,-1.3825 -5.808,-1.5124 -8.7411,-1.2609 z m 116.6172,0 c -3.7055,0.3064 -8.4519,0.3915 -10.6198,3.4123 -1.83,2.5499 -1.7662,6.9218 0.1407,9.4148 1.8684,2.4426 5.8061,2.2509 8.867,2.5479 3.7629,0.3651 8.0091,0.8837 11.2994,-0.9782 2.3277,-1.3172 4.8057,-3.8236 4.7091,-6.4964 -0.1039,-2.8738 -3.0427,-5.2008 -5.5544,-6.6011 -2.6019,-1.4506 -5.8731,-1.5448 -8.842,-1.2993 z m 77.7441,0 c -3.7055,0.3068 -8.4518,0.3915 -10.6197,3.4123 -1.83,2.5499 -1.7662,6.9218 0.1407,9.4148 1.8684,2.4426 5.8058,2.2542 8.867,2.5479 3.7946,0.3641 8.0837,0.8843 11.3913,-1.0108 2.3025,-1.3192 4.7271,-3.8339 4.6172,-6.4853 -0.119,-2.8701 -3.0513,-5.1867 -5.5619,-6.5827 -2.6013,-1.4464 -5.8684,-1.5418 -8.8346,-1.2962 z m -179.2012,19.084 c -4.0689,0.1686 -8.9819,3.5403 -9.5918,7.5668 -0.5109,3.3731 2.7141,6.9747 5.7977,8.4342 3.1266,1.4798 7.5606,1.1833 10.3405,-0.8753 2.4608,-1.8223 4.3234,-5.6065 3.4108,-8.5294 -1.1866,-3.8003 -5.9793,-6.7612 -9.9572,-6.5963 z m -86.3319,2.9412 c -2.1473,2.013 -3.3302,5.8883 -2.1205,8.5716 1.1037,2.4483 4.5293,3.1071 7.1418,3.7292 5.0539,1.2035 10.6701,1.4731 15.5841,-0.2127 2.4224,-0.8311 5.4485,-2.1644 6.1287,-4.6334 0.7549,-2.7398 -0.9809,-6.1339 -3.2081,-7.8992 -2.9755,-2.3584 -7.4566,-1.806 -11.2532,-1.7631 -4.1563,0.047 -9.2403,-0.6352 -12.2728,2.2076 z m -881.1993,-2.5896 c -3.7036,0.3091 -8.4472,0.3946 -10.6139,3.4142 -1.8287,2.5485 -1.7663,6.9171 0.1388,9.409 1.8687,2.4443 5.8084,2.2543 8.8709,2.5518 3.7642,0.3656 8.0188,0.895 11.3035,-0.9796 2.3431,-1.3372 4.8215,-3.8916 4.703,-6.5868 -0.1257,-2.8598 -3.0772,-5.1422 -5.5841,-6.524 -2.6014,-1.4339 -5.8581,-1.5317 -8.8182,-1.2846 z m 932.9277,0 c -3.7036,0.3096 -8.4472,0.3946 -10.6139,3.4142 -1.8287,2.5485 -1.7663,6.9171 0.1388,9.409 1.8688,2.4443 5.8084,2.2543 8.8709,2.5518 3.7642,0.3656 8.0188,0.895 11.3035,-0.9796 2.3432,-1.3372 4.8218,-3.8916 4.7031,-6.5868 -0.126,-2.8614 -3.0798,-5.1448 -5.5884,-6.5269 -2.6004,-1.4327 -5.8554,-1.5291 -8.814,-1.2817 z m -946.914,19.082 c -4.0697,0.1599 -8.9832,3.5417 -9.5918,7.5688 -0.5102,3.3752 2.7194,6.9769 5.8054,8.4361 3.1255,1.4779 7.5506,1.1725 10.3347,-0.8772 2.4485,-1.8028 4.3275,-5.543 3.436,-8.45 -1.1738,-3.8279 -5.9835,-6.835 -9.9843,-6.6777 z m 916.1386,4.3285 c -1.737,2.6353 -1.4817,7.0061 0.5094,9.455 1.9614,2.4126 5.9071,2.3356 9.0158,2.3922 3.4421,0.063 7.6949,0.2066 10.0725,-2.2831 2.1,-2.199 2.9742,-6.2648 1.6048,-8.9796 -1.5567,-3.0859 -6.0021,-5.1101 -9.6768,-5.3176 -4.1467,-0.2341 -9.3814,1.4799 -11.5257,4.7331 z m -882.7187,-3.975 c -3.712,0.3212 -8.4932,0.3868 -10.6369,3.4342 -1.8277,2.5981 -1.6708,7.0404 0.3088,9.5248 1.9846,2.4906 6.064,2.1817 9.2386,2.4339 3.6965,0.2937 7.9154,0.8491 11.0699,-1.1 2.3289,-1.4389 4.6407,-4.2199 4.3829,-6.9453 -0.2637,-2.7865 -3.2501,-4.8437 -5.7336,-6.1348 -2.5774,-1.3399 -5.7357,-1.4633 -8.6297,-1.2128 z m 855.1836,0 c -3.7119,0.3215 -8.4935,0.3866 -10.6369,3.4342 -1.8278,2.5988 -1.6698,7.0422 0.3107,9.5267 1.985,2.4901 6.0642,2.1802 9.2387,2.432 3.6959,0.2932 7.913,0.8474 11.0679,-1.1 2.3282,-1.437 4.6431,-4.2135 4.3868,-6.9375 -0.2626,-2.7908 -3.2543,-4.8514 -5.7415,-6.1443 -2.5762,-1.3392 -5.7331,-1.4617 -8.6257,-1.2111 z m -840.0137,19.082 c -4.0758,0.1632 -8.9933,3.5577 -9.5977,7.5918 -0.5045,3.3679 2.7245,6.9536 5.8038,8.408 3.1283,1.4775 7.5561,1.1789 10.3422,-0.8721 2.4499,-1.8035 4.3271,-5.5476 3.4341,-8.4558 -1.1748,-3.826 -5.9833,-6.8321 -9.9824,-6.6719 z m -34.6035,0.3535 c -3.663,0.572 -8.4168,0.389 -10.5926,3.3906 -1.8353,2.5318 -1.8194,6.8827 0.061,9.3809 1.8405,2.4449 5.7607,2.293 8.8059,2.5966 3.8441,0.3832 8.2114,0.9344 11.5446,-1.0185 2.3354,-1.3682 4.7499,-4.0058 4.5772,-6.707 -0.1821,-2.8486 -3.1739,-5.0499 -5.6884,-6.4007 -2.583,-1.3876 -5.7834,-1.0344 -8.7081,-1.2419 z m 310.9726,0 c -3.709,0.3314 -8.4879,0.387 -10.631,3.4323 -1.8286,2.5982 -1.6752,7.042 0.3048,9.5267 1.9891,2.496 6.0782,2.1873 9.2602,2.4347 3.7229,0.2895 7.9919,0.8619 11.1441,-1.1398 2.3267,-1.4774 4.5873,-4.3502 4.2595,-7.0867 -0.3366,-2.8103 -3.4366,-4.7755 -5.9695,-6.0386 -2.5188,-1.2561 -5.5646,-1.3791 -8.3681,-1.1286 z m 533.6147,3.3947 c -1.8336,2.5273 -1.8217,6.8686 0.051,9.367 1.8227,2.4318 5.7134,2.2982 8.7369,2.6054 3.8706,0.3933 8.2697,0.9481 11.6273,-1.0175 2.3359,-1.3674 4.7499,-4.0058 4.5772,-6.707 -0.1821,-2.8486 -3.1739,-5.0499 -5.6885,-6.4007 -2.5829,-1.3875 -6.0808,-1.7006 -9.1558,-1.4157 -3.5705,0.3307 -7.97,0.5665 -10.1481,3.5685 z m -572.476,-3.3947 c -3.728,0.3143 -8.5081,0.4146 -10.6756,3.464 -1.8085,2.5444 -1.7057,6.8894 0.1985,9.3631 1.8746,2.4355 5.8018,2.2549 8.8611,2.5478 3.8018,0.364 8.0999,0.8825 11.412,-1.019 2.2978,-1.3192 4.7141,-3.8336 4.6024,-6.4809 -0.121,-2.8693 -3.052,-5.1844 -5.5623,-6.5796 -2.602,-1.4461 -5.8698,-1.5454 -8.8361,-1.2954 z m 611.1195,4.2573 c -1.5784,2.6925 -1.7917,6.8728 0.09,9.3628 1.8438,2.44 5.7586,2.2867 8.8018,2.5898 3.8364,0.382 8.2069,0.9561 11.5219,-1.0124 2.3733,-1.4093 4.5022,-4.1367 4.5845,-6.8957 0.076,-2.5542 -1.841,-5.0542 -3.8561,-6.6253 -2.9433,-2.2947 -7.0484,-3.5118 -10.7579,-3.1021 -3.922,0.4331 -8.3887,2.2788 -10.3842,5.6829 z m -42.0062,14.8248 c -4.0824,0.2121 -9.017,3.5576 -9.6247,7.6001 -0.5059,3.3655 2.7125,6.9687 5.7985,8.4038 3.2175,1.4961 7.8091,1.1733 10.5957,-1.0235 2.4303,-1.9159 4.0492,-5.8569 3.0254,-8.7773 -1.2785,-3.6471 -5.9355,-6.4037 -9.7949,-6.2031 z m -821.7813,0.3535 c -3.7316,0.3185 -8.5178,0.4195 -10.685,3.4739 -1.8047,2.5433 -1.6956,6.883 0.208,9.3532 1.8763,2.4349 5.803,2.255 8.8631,2.5477 3.8019,0.3637 8.1254,0.925 11.4122,-1.0202 2.3587,-1.3961 4.7747,-4.0931 4.5826,-6.8273 -0.1964,-2.7951 -3.1446,-4.9331 -5.6146,-6.256 -2.6029,-1.394 -5.8243,-1.5225 -8.7663,-1.2713 z m 194.3613,0 c -3.6733,0.5756 -8.4398,0.4002 -10.6197,3.4123 -1.8272,2.5247 -1.806,6.857 0.065,9.3494 1.8246,2.4304 5.7136,2.2968 8.7369,2.6054 3.8606,0.394 8.246,0.95 11.5985,-1.0044 2.3467,-1.368 4.7775,-4.007 4.6119,-6.7182 -0.1731,-2.8321 -3.1399,-5.0302 -5.6362,-6.3789 -2.5947,-1.4018 -5.8149,-1.0542 -8.7564,-1.2656 z m 38.8692,0 c -3.7165,0.3142 -8.4798,0.4062 -10.6467,3.442 -1.8178,2.5467 -1.7333,6.9029 0.1715,9.3851 1.8711,2.4382 5.8019,2.2544 8.8612,2.5478 3.7958,0.3639 8.1097,0.9222 11.3947,-1.0142 2.3602,-1.3913 4.7867,-4.0765 4.6021,-6.8099 -0.1891,-2.8001 -3.1368,-4.9509 -5.6093,-6.2786 -2.6034,-1.3981 -5.8289,-1.5212 -8.7735,-1.2722 z m 38.873,0 c -3.6727,0.5756 -8.4383,0.4006 -10.6178,3.4123 -1.8271,2.5247 -1.806,6.857 0.065,9.3494 1.8246,2.4304 5.7136,2.2968 8.737,2.6054 3.8606,0.394 8.2459,0.95 11.5985,-1.0044 2.3466,-1.368 4.7704,-4.0066 4.6118,-6.7182 -0.164,-2.8031 -3.0794,-4.9974 -5.5445,-6.3418 -2.6179,-1.4276 -5.8762,-1.085 -8.85,-1.3027 z m 38.8711,0 c -3.7165,0.3142 -8.4798,0.4062 -10.6467,3.442 -1.8177,2.5467 -1.7333,6.9029 0.1716,9.3851 1.8711,2.4382 5.8018,2.2544 8.8611,2.5478 3.7959,0.3639 8.1098,0.9222 11.3948,-1.0142 2.3601,-1.3913 4.7866,-4.0765 4.602,-6.8099 -0.1891,-2.8001 -3.1368,-4.9509 -5.6092,-6.2786 -2.6035,-1.3981 -5.829,-1.5212 -8.7736,-1.2722 z m 38.8731,0 c -3.7277,0.3171 -8.5081,0.4146 -10.6756,3.4639 -1.8085,2.5445 -1.7057,6.8894 0.1985,9.3632 1.8746,2.4354 5.8017,2.2549 8.8611,2.5477 3.8025,0.3639 8.1269,0.9253 11.4142,-1.0202 2.3587,-1.396 4.7747,-4.0931 4.5826,-6.8273 -0.1963,-2.7951 -3.1446,-4.9331 -5.6146,-6.256 -2.6029,-1.394 -5.8242,-1.5216 -8.7662,-1.2713 z m 38.873,0 c -3.717,0.315 -8.4813,0.4058 -10.6486,3.442 -1.8179,2.5466 -1.7334,6.9029 0.1715,9.3851 1.8711,2.4382 5.8019,2.2541 8.8612,2.5477 3.7964,0.3644 8.1039,0.9123 11.3967,-1.0121 2.3451,-1.3706 4.7775,-4.007 4.6118,-6.7182 -0.1731,-2.8321 -3.1398,-5.0302 -5.6362,-6.3789 -2.5947,-1.4018 -5.8178,-1.5147 -8.7564,-1.2656 z m 38.8711,0 c -3.7316,0.3185 -8.5178,0.4195 -10.6851,3.4739 -1.8046,2.5433 -1.6954,6.883 0.208,9.3532 1.8759,2.4345 5.8018,2.2549 8.8612,2.5477 3.8025,0.3639 8.1268,0.9253 11.4141,-1.0202 2.3588,-1.396 4.7747,-4.0931 4.5827,-6.8273 -0.1964,-2.7951 -3.1446,-4.9331 -5.6147,-6.256 -2.6028,-1.394 -5.8243,-1.5225 -8.7662,-1.2713 z m 427.5918,0 c -3.7315,0.3195 -8.5184,0.419 -10.685,3.4739 -1.8044,2.5442 -1.6925,6.8848 0.212,9.3549 1.8761,2.4333 5.8005,2.2535 8.8591,2.546 3.8019,0.3636 8.1324,0.9367 11.4122,-1.0202 2.3739,-1.4165 4.7859,-4.1626 4.5727,-6.9188 -0.2145,-2.773 -3.1596,-4.8669 -5.6163,-6.1709 -2.6044,-1.3823 -5.8169,-1.5165 -8.7547,-1.2649 z m -713.6894,19.084 c -4.0686,0.1856 -8.9821,3.5419 -9.5918,7.5688 -0.5107,3.3731 2.7137,6.9754 5.7976,8.4341 3.1295,1.4803 7.5775,1.1943 10.3483,-0.8812 2.4807,-1.8581 4.3134,-5.7194 3.3621,-8.6693 -1.2105,-3.7531 -5.9767,-6.6322 -9.9162,-6.4524 z m 379.0019,0 c -4.0691,0.1747 -8.9821,3.5419 -9.5918,7.5688 -0.5107,3.3731 2.7135,6.9757 5.7976,8.4341 3.1308,1.4806 7.5736,1.184 10.3521,-0.8833 2.4648,-1.8339 4.3148,-5.6413 3.3894,-8.5708 -1.1959,-3.7854 -5.9811,-6.7192 -9.9473,-6.5488 z m -358.4354,2.943 c -2.0253,2.0842 -3.3523,5.7726 -2.1938,8.4378 1.0747,2.4724 4.494,3.2062 7.1114,3.8517 5.0776,1.2521 10.7426,1.5002 15.6877,-0.2013 2.4299,-0.836 5.4651,-2.1848 6.1374,-4.665 0.7441,-2.7452 -1.1486,-5.9767 -3.2556,-7.8873 -2.768,-2.5101 -6.993,-3.2261 -10.7295,-3.2462 -4.4287,-0.024 -9.6713,0.5342 -12.7576,3.7103 z m 310.9502,0.015 c -2.0305,2.1211 -3.3044,5.8811 -2.0942,8.5564 1.1072,2.4474 4.5304,3.1081 7.1438,3.7291 5.0766,1.2065 10.7209,1.4789 15.6524,-0.2264 2.3984,-0.8293 5.3859,-2.1676 6.0545,-4.6157 0.7496,-2.7445 -1.1132,-5.989 -3.2151,-7.9065 -2.7685,-2.5255 -7.0108,-3.243 -10.7581,-3.2634 -4.4384,-0.024 -9.714,0.5204 -12.7833,3.7265 z m -453.5734,-2.6069 c -3.7116,0.3085 -8.4672,0.3977 -10.6351,3.4262 -1.8243,2.5484 -1.7501,6.9132 0.1561,9.4009 1.8704,2.4411 5.8061,2.2509 8.867,2.5479 3.7629,0.3651 8.0091,0.8837 11.2994,-0.9782 2.3277,-1.3172 4.8065,-3.8236 4.7091,-6.4964 -0.1047,-2.876 -3.0482,-5.2024 -5.5623,-6.603 -2.6,-1.4485 -5.8681,-1.5439 -8.8342,-1.2974 z m 272.0938,0 c -3.7147,0.323 -8.4973,0.3944 -10.6428,3.444 -1.8236,2.5921 -1.6691,7.0206 0.301,9.5033 1.9639,2.475 6.0084,2.1932 9.1579,2.4453 3.7619,0.3011 8.0595,0.8501 11.2637,-1.1436 2.2899,-1.4249 4.5457,-4.1756 4.2893,-6.8603 -0.2673,-2.7996 -3.252,-4.878 -5.7458,-6.178 -2.5739,-1.3419 -5.7316,-1.4622 -8.6233,-1.2107 z m 544.2148,0 c -3.7053,0.3111 -8.4526,0.3927 -10.6197,3.4143 -1.8289,2.5499 -1.7655,6.9231 0.1446,9.4128 1.8913,2.4651 5.8717,2.2599 8.965,2.5518 3.7564,0.3545 8.0122,0.8886 11.2743,-1.0074 2.3397,-1.3598 4.7836,-3.9666 4.6304,-6.6684 -0.1616,-2.851 -3.1401,-5.0776 -5.6501,-6.4393 -2.5887,-1.4044 -5.8097,-1.5102 -8.7445,-1.2638 z m -621.9492,0 c -3.7067,0.3025 -8.4542,0.3922 -10.6217,3.4143 -1.829,2.5499 -1.7623,6.9207 0.1446,9.4128 1.8684,2.4418 5.8045,2.2541 8.8651,2.5479 3.7939,0.3643 8.0809,0.882 11.3896,-1.01 2.2991,-1.3146 4.7167,-3.818 4.6189,-6.4646 -0.1053,-2.8469 -2.9855,-5.1715 -5.4686,-6.568 -2.6227,-1.475 -5.929,-1.5772 -8.9279,-1.3324 z m 38.8711,0 c -3.6832,0.5797 -8.4652,0.411 -10.6447,3.4362 -1.8173,2.5222 -1.7748,6.8398 0.092,9.3255 1.8067,2.4058 5.6502,2.2913 8.6428,2.6016 3.895,0.4037 8.3219,0.9667 11.7043,-1.0064 2.3444,-1.3676 4.7621,-4.009 4.6001,-6.7182 -0.1678,-2.8064 -3.0908,-4.9979 -5.5602,-6.3417 -2.6143,-1.4227 -5.8659,-1.0803 -8.8343,-1.297 z m 77.7441,0 c -3.7059,0.3113 -8.4541,0.3922 -10.6217,3.4143 -1.8289,2.5499 -1.7624,6.9208 0.1446,9.4128 1.8689,2.4423 5.8054,2.2585 8.867,2.5478 3.8317,0.362 8.1939,0.9201 11.4981,-1.0535 2.3283,-1.3907 4.6936,-4.0772 4.4948,-6.782 -0.2062,-2.8054 -3.1598,-4.9505 -5.6403,-6.277 -2.5964,-1.3885 -5.8084,-1.5088 -8.7425,-1.2624 z m 38.8731,0 c -3.7121,0.3042 -8.4673,0.3977 -10.6352,3.4262 -1.8242,2.5484 -1.75,6.9132 0.1561,9.4009 1.8704,2.4411 5.8061,2.2509 8.867,2.5479 3.7629,0.3651 8.0092,0.8837 11.2994,-0.9782 2.3277,-1.3172 4.7988,-3.8234 4.7091,-6.4964 -0.095,-2.8473 -2.9855,-5.1715 -5.4686,-6.568 -2.6226,-1.475 -5.929,-1.5781 -8.9278,-1.3324 z m 38.8691,0 c -3.7053,0.3111 -8.4526,0.3927 -10.6197,3.4143 -1.8289,2.5499 -1.7624,6.9207 0.1446,9.4128 1.8684,2.4418 5.8045,2.2534 8.865,2.5479 3.7887,0.3646 8.0825,0.9072 11.3742,-1.0035 2.3405,-1.3585 4.7836,-3.9666 4.6304,-6.6684 -0.1616,-2.8509 -3.14,-5.0776 -5.65,-6.4393 -2.5887,-1.4044 -5.8097,-1.5102 -8.7445,-1.2638 z m 38.875,0 c -3.7117,0.3085 -8.4673,0.3977 -10.6352,3.4262 -1.8242,2.5484 -1.75,6.9132 0.1562,9.4009 1.8704,2.4411 5.8061,2.2509 8.867,2.5479 3.7628,0.3651 8.0091,0.8837 11.2993,-0.9782 2.3277,-1.3172 4.8066,-3.8236 4.7092,-6.4964 -0.1048,-2.876 -3.0483,-5.2024 -5.5623,-6.603 -2.6001,-1.4485 -5.8681,-1.5439 -8.8342,-1.2974 z m -441.5859,19.0819 c -4.0601,0.162 -8.9536,3.5196 -9.5833,7.5338 -0.5259,3.3527 2.6334,6.9719 5.6927,8.4409 3.1526,1.5137 7.6428,1.2163 10.4563,-0.861 2.4528,-1.8108 4.3069,-5.5794 3.4011,-8.4906 -1.1851,-3.8088 -5.9811,-6.782 -9.9668,-6.6231 z m 111.1641,0.3536 c -3.7182,0.3242 -8.5074,0.3956 -10.6521,3.4502 -1.8216,2.5944 -1.6603,7.0263 0.3161,9.5048 1.9885,2.4936 6.0724,2.191 9.2521,2.4388 3.7282,0.2904 7.9856,0.8319 11.1598,-1.1449 2.2904,-1.4263 4.5493,-4.1762 4.2932,-6.8622 -0.2669,-2.7996 -3.2518,-4.8783 -5.7458,-6.1781 -2.5739,-1.3415 -5.7318,-1.4608 -8.6233,-1.2086 z m 38.873,0 c -3.7282,0.3173 -8.514,0.4156 -10.6753,3.47 -1.8066,2.5531 -1.6841,6.9094 0.2338,9.3801 1.8983,2.4455 5.855,2.236 8.9372,2.5268 3.731,0.352 7.9457,0.8774 11.1997,-0.9815 2.3441,-1.3391 4.8255,-3.8937 4.7069,-6.5908 -0.1257,-2.8592 -3.0774,-5.1409 -5.5841,-6.5219 -2.6016,-1.4334 -5.8585,-1.5347 -8.8182,-1.2827 z m 388.7188,0 c -3.7182,0.3242 -8.5075,0.3956 -10.6522,3.4502 -1.8216,2.5944 -1.6602,7.0263 0.3162,9.5048 1.9884,2.4937 6.0723,2.191 9.2521,2.4388 3.7282,0.2904 7.9856,0.8319 11.1598,-1.1449 2.2904,-1.4263 4.5493,-4.1762 4.2932,-6.8622 -0.2669,-2.7997 -3.2519,-4.8783 -5.7458,-6.1781 -2.5739,-1.3414 -5.7317,-1.4608 -8.6233,-1.2086 z m 272.1054,0 c -3.7282,0.3178 -8.514,0.4156 -10.6753,3.47 -1.8066,2.5531 -1.684,6.9094 0.2338,9.3801 1.8983,2.4455 5.8551,2.2358 8.9372,2.5268 3.7284,0.3521 7.9368,0.8724 11.1921,-0.979 2.3385,-1.3299 4.8237,-3.8623 4.7146,-6.5503 -0.1166,-2.8722 -3.0727,-5.1772 -5.5884,-6.5679 -2.5982,-1.4363 -5.8559,-1.5319 -8.814,-1.2797 z m -777.4355,0 c -3.712,0.3093 -8.4901,0.3835 -10.6357,3.4284 -1.8285,2.5949 -1.6744,7.0313 0.2978,9.5188 1.9561,2.4672 5.9868,2.1829 9.1247,2.4405 3.7235,0.3057 7.9477,0.8254 11.1547,-1.0911 2.2827,-1.3642 4.6112,-3.9706 4.4452,-6.6248 -0.1758,-2.8113 -3.0744,-5.0248 -5.5461,-6.3758 -2.6135,-1.4285 -5.8725,-1.5434 -8.8406,-1.296 z m 427.5917,0 c -3.7034,0.3065 -8.4527,0.3858 -10.6146,3.4084 -1.8315,2.5607 -1.7491,6.9501 0.1733,9.4434 1.8894,2.4506 5.8521,2.238 8.9331,2.5251 3.7633,0.3508 8.0153,0.8667 11.2933,-1.0147 2.3017,-1.321 4.726,-3.8357 4.6153,-6.4872 -0.1198,-2.8694 -3.052,-5.1845 -5.5623,-6.5796 -2.6025,-1.4464 -5.8707,-1.5411 -8.8381,-1.2954 z m 38.8711,0 c -3.716,0.3143 -8.4981,0.3899 -10.6464,3.4383 -1.8257,2.5905 -1.6771,7.019 0.291,9.5031 1.9597,2.4735 6.0006,2.1881 9.1459,2.4464 3.7229,0.3057 7.9528,0.8358 11.1532,-1.0907 2.3003,-1.3846 4.6371,-4.0391 4.445,-6.7171 -0.2016,-2.811 -3.1422,-4.978 -5.6244,-6.3126 -2.5999,-1.3978 -5.823,-1.5162 -8.7643,-1.2674 z m 92.9083,19.0839 c -4.0435,0.1628 -8.9287,3.4736 -9.571,7.4691 -0.5414,3.3681 2.6162,7.0244 5.6882,8.5075 3.1435,1.5176 7.6326,1.2219 10.4369,-0.8568 2.4685,-1.8297 4.3182,-5.6408 3.3931,-8.5709 -1.1952,-3.7857 -5.9806,-6.7085 -9.9472,-6.5489 z m -581.7337,1.9649 c -2.2979,1.3541 -5.1765,3.3358 -5.2933,6.0005 -0.1357,3.098 2.7738,6.0488 5.5206,7.4881 3.3742,1.768 7.7995,1.5156 11.423,0.3403 2.6737,-0.8672 5.9758,-2.4286 6.6767,-5.1506 0.7894,-3.0658 -1.2726,-6.7825 -3.7829,-8.7113 -2.2879,-1.758 -5.6761,-1.3847 -8.5598,-1.2868 -2.0415,0.069 -4.2244,0.2828 -5.9843,1.3198 z m 811.459,0 c -2.2228,1.4786 -5.184,3.3356 -5.3018,6.0026 -0.1368,3.0987 2.7725,6.0532 5.5213,7.49 3.4086,1.7816 7.8851,1.5353 11.5341,0.3195 2.6683,-0.889 5.9476,-2.512 6.6088,-5.2457 0.7441,-3.0766 -1.4132,-6.7146 -3.9177,-8.6503 -2.3056,-1.7819 -5.7347,-1.043 -8.477,-1.2357 -2.7424,-0.1927 -4.5131,0.352 -5.9677,1.3196 z m -743.6393,0.9743 c -2.0249,2.0884 -3.3554,5.7726 -2.2035,8.4437 1.0553,2.4473 4.4265,3.1949 7.0119,3.8419 5.0683,1.2683 10.7281,1.5169 15.6729,-0.1699 2.4841,-0.8474 5.604,-2.2093 6.2842,-4.7443 0.7359,-2.7425 -1.2008,-5.9522 -3.316,-7.8466 -2.8096,-2.5164 -7.0716,-3.2269 -10.8433,-3.2339 -4.3802,-0.01 -9.5572,0.5644 -12.6062,3.7091 z m 38.8672,0 c -2.0206,2.0901 -3.3494,5.7706 -2.1977,8.4398 1.0557,2.4465 4.4252,3.1949 7.01,3.8419 5.0689,1.2687 10.7299,1.5187 15.6748,-0.1699 2.4858,-0.8489 5.6056,-2.2151 6.2862,-4.7521 0.7341,-2.7362 -1.1921,-5.9419 -3.3037,-7.8304 -2.8391,-2.5391 -7.1477,-3.2448 -10.9566,-3.2435 -4.3509,0 -9.4889,0.5861 -12.513,3.7142 z m 401.5663,-2.5857 c -3.715,0.3282 -8.5061,0.3906 -10.6445,3.4462 -1.8239,2.606 -1.6452,7.057 0.3476,9.5363 2.0155,2.5075 6.1357,2.177 9.3439,2.4174 3.6858,0.2763 7.9056,0.8302 11.0291,-1.146 2.3172,-1.4659 4.5749,-4.3038 4.2726,-7.029 -0.309,-2.7852 -3.3371,-4.7822 -5.8352,-6.052 -2.5537,-1.298 -5.66,-1.4249 -8.5135,-1.1729 z m 38.877,0 c -3.7037,0.3055 -8.448,0.3924 -10.6139,3.4123 -1.8293,2.5505 -1.7658,6.9246 0.1446,9.4149 1.8895,2.4631 5.8667,2.2559 8.9571,2.5505 3.7306,0.3557 7.9431,0.874 11.1997,-0.9802 2.3409,-1.3329 4.8189,-3.8717 4.7148,-6.5635 -0.1099,-2.84 -3.012,-5.1361 -5.4945,-6.5199 -2.6216,-1.4612 -5.9166,-1.5608 -8.9078,-1.3141 z m 233.2285,0 c -3.7157,0.3281 -8.5076,0.3902 -10.6465,3.4462 -1.8239,2.606 -1.6423,7.0546 0.3476,9.5363 1.9923,2.4846 6.0686,2.171 9.244,2.4146 3.7183,0.2853 7.9764,0.8488 11.1291,-1.1432 2.318,-1.4645 4.5746,-4.3038 4.2725,-7.029 -0.3087,-2.7848 -3.3356,-4.7822 -5.8332,-6.052 -2.5536,-1.2982 -5.66,-1.4248 -8.5135,-1.1729 z m -738.5586,0 c -3.7051,0.3112 -8.4525,0.3911 -10.6198,3.4123 -1.8294,2.5504 -1.7658,6.9246 0.1447,9.4149 1.8899,2.4635 5.8677,2.2596 8.9591,2.5504 3.7642,0.3541 8.041,0.9053 11.2967,-1.0169 2.3606,-1.3937 4.7902,-4.0809 4.6021,-6.8157 -0.1931,-2.8069 -3.156,-4.955 -5.6365,-6.2827 -2.597,-1.3901 -5.811,-1.5088 -8.7463,-1.2623 z m 727.0859,18.7969 c -3.883,1.3214 -8.5064,5.1215 -8.1617,9.2086 0.3392,4.0214 5.4014,7.7313 9.4345,7.5874 3.2823,-0.1171 6.6679,-3.4684 7.2188,-6.7063 0.5949,-3.4964 -2.1119,-7.3011 -4.9617,-9.4124 -0.9627,-0.7132 -2.3957,-1.0633 -3.5299,-0.6773 z m -235.7422,0.2852 c -4.0658,0.1621 -8.9635,3.5326 -9.5898,7.5531 -0.5214,3.3467 2.638,6.9525 5.6919,8.4174 3.1559,1.5138 7.6481,1.2199 10.4656,-0.8568 2.4502,-1.8061 4.3063,-5.5657 3.405,-8.4731 -1.1826,-3.8147 -5.9821,-6.7997 -9.9727,-6.6406 z m -517.2656,4.3304 c -1.7364,2.6335 -1.4816,7.0012 0.5071,9.4496 1.9578,2.4104 5.8978,2.3349 9.0024,2.3957 3.4365,0.067 7.6759,0.2154 10.0608,-2.2597 2.1054,-2.1851 3.0111,-6.2309 1.6638,-8.9497 -1.5287,-3.0848 -5.9861,-5.1439 -9.6635,-5.3626 -4.159,-0.2473 -9.4244,1.4716 -11.5706,4.7267 z m 550.6875,-3.9769 c -3.6944,0.3116 -8.4267,0.3834 -10.5926,3.3925 -1.8374,2.5526 -1.785,6.9345 0.1233,9.4346 1.8647,2.443 5.8018,2.2549 8.8612,2.5477 3.8031,0.364 8.1199,0.9114 11.416,-1.0205 2.3381,-1.3703 4.7608,-4.0071 4.5886,-6.7118 -0.1814,-2.8496 -3.1765,-5.0505 -5.6921,-6.4014 -2.5821,-1.3866 -5.784,-1.4875 -8.7044,-1.2411 z m 233.2324,0 c -3.7221,0.3147 -8.4942,0.4126 -10.6599,3.4561 -1.8114,2.5456 -1.714,6.8944 0.1907,9.371 1.8736,2.4362 5.8017,2.2546 8.8611,2.5477 3.7972,0.3639 8.0988,0.8976 11.3986,-1.0162 2.3261,-1.349 4.7519,-3.9331 4.6119,-6.6184 -0.1481,-2.8396 -3.0849,-5.0869 -5.5783,-6.4536 -2.6066,-1.4288 -5.8622,-1.5371 -8.8241,-1.2866 z m -738.5644,0 c -3.7267,0.3144 -8.5051,0.4154 -10.6716,3.4639 -1.8085,2.5446 -1.7058,6.8894 0.1984,9.3632 1.8746,2.4354 5.8018,2.2548 8.8612,2.5477 3.7979,0.3636 8.0907,0.8797 11.4005,-1.0181 2.3007,-1.3192 4.7241,-3.832 4.6138,-6.4817 -0.1194,-2.8695 -3.052,-5.1845 -5.5623,-6.5796 -2.6031,-1.4467 -5.8724,-1.5458 -8.84,-1.2954 z m 38.8711,0 c -3.7047,0.3129 -8.4428,0.4009 -10.6176,3.4164 -1.8261,2.5319 -1.7813,6.8677 0.092,9.3648 1.784,2.3778 5.5806,2.2689 8.5371,2.5781 3.9223,0.4102 8.3951,1.0064 11.7884,-1.003 2.3743,-1.4061 4.7897,-4.1439 4.5807,-6.8954 -0.2117,-2.7877 -3.1733,-4.8947 -5.6429,-6.2049 -2.5994,-1.3791 -5.8058,-1.5037 -8.7379,-1.256 z m 494.7183,3.4164 c -1.4601,2.7592 -1.7815,6.8677 0.092,9.3648 1.784,2.3778 5.5806,2.2689 8.5371,2.5781 3.921,0.4101 8.392,1.0055 11.7846,-1.0027 2.3753,-1.406 4.7932,-4.1434 4.5846,-6.8957 -0.2112,-2.7877 -3.118,-5.0048 -5.643,-6.2049 -4.4895,-2.1338 -10.0949,-2.1224 -14.8903,-0.8133 -1.7251,0.4709 -3.6286,1.3931 -4.465,2.9737 z m -8.816,16.01909 c -3.7308,0.3205 -8.5163,0.42 -10.6831,3.4739 -1.8046,2.5434 -1.6957,6.88318 0.208,9.35328 1.8773,2.4358 5.8057,2.2551 8.867,2.5477 3.8019,0.3634 8.1303,0.9331 11.4121,-1.0204 2.368,-1.4096 4.7814,-4.1398 4.573,-6.88768 -0.2115,-2.7882 -3.1714,-4.8974 -5.641,-6.2088 -2.5984,-1.3798 -5.8048,-1.5098 -8.736,-1.258 z m 38.875,0 c -3.7219,0.3107 -8.5167,0.3915 -10.6601,3.45 -1.8225,2.6006 -1.6473,7.04058 0.3359,9.52078 1.9864,2.4841 6.0578,2.1745 9.2286,2.4253 3.6844,0.2914 7.8621,0.8009 11.0332,-1.0974 2.2813,-1.3656 4.6089,-3.9692 4.4452,-6.62288 -0.173,-2.8048 -3.0588,-5.0185 -5.523,-6.3693 -2.6177,-1.4349 -5.8849,-1.5549 -8.8598,-1.3065 z m 155.4883,0 c -3.7283,0.3094 -8.5084,0.4144 -10.6755,3.4639 -1.8087,2.5452 -1.7046,6.89118 0.2005,9.36508 1.8754,2.4354 5.8036,2.2489 8.863,2.5461 3.7563,0.3649 7.9939,0.8826 11.2802,-0.9731 2.3334,-1.3176 4.8152,-3.8233 4.7283,-6.50158 -0.092,-2.8453 -2.9796,-5.1705 -5.4605,-6.5668 -2.6245,-1.4772 -5.9347,-1.5827 -8.936,-1.3336 z m -146.6114,32.19144 c 2.0369,2.3036 5.7873,2.3048 8.8466,2.6152 3.7955,0.3851 8.0889,0.915 11.4033,-0.974 2.3443,-1.3361 4.8219,-3.8928 4.7032,-6.5885 -0.1259,-2.8597 -3.1288,-5.0525 -5.5841,-6.5239 -2.6059,-1.56166 -5.8686,-2.15556 -8.9004,-1.96146 -4.2363,0.2712 -10.9271,1.1931 -11.9856,4.30406 -1.0585,3.1111 -0.5262,6.8178 1.517,9.1286 z m 49.42,-12.75586 c -3.7131,0.3225 -8.4932,0.3927 -10.6387,3.44026 -1.8248,2.592 -1.6756,7.0236 0.2969,9.505 1.9856,2.4979 6.0735,2.1947 9.2543,2.4496 3.6903,0.2957 7.898,0.8421 11.0523,-1.0961 2.3275,-1.4302 4.6541,-4.1896 4.4063,-6.9101 -0.2552,-2.8011 -3.2534,-4.8779 -5.7477,-6.178 -2.574,-1.34156 -5.7316,-1.46186 -8.6234,-1.21066 z m 29.9354,1.16296 c -1.5894,1.1769 -2.629,3.2273 -2.8759,5.1896 -0.3023,2.4025 0.1325,5.3085 1.8373,7.0281 1.6872,1.7018 4.5605,1.5898 6.9395,1.8784 3.7905,0.4599 7.9023,1.145 11.4519,-0.262 2.3051,-0.9137 4.6648,-2.6488 5.5339,-4.9711 0.596,-1.5927 0.2108,-3.5821 -0.6246,-5.0634 -1.0205,-1.8096 -3.0015,-3.0065 -4.8985,-3.8535 -2.9027,-1.29606 -6.2155,-1.70296 -9.3939,-1.64466 -2.7158,0.05 -5.7868,0.082 -7.9697,1.69856 z m -102.8104,-1.16296 c -3.7132,0.3091 -8.4717,0.3993 -10.6389,3.43026 -1.8221,2.5483 -1.7425,6.9108 0.1638,9.3968 1.8709,2.4399 5.8045,2.254 8.865,2.5479 3.7941,0.3644 8.0952,0.9072 11.3899,-1.0093 2.3361,-1.3589 4.7626,-3.9679 4.6147,-6.6665 -0.1547,-2.8218 -3.0794,-5.045 -5.5584,-6.4018 -2.6114,-1.42926 -5.8694,-1.54436 -8.8361,-1.29736 z m 150.6289,0 c -3.7129,0.3135 -8.4717,0.3993 -10.6389,3.43026 -1.8221,2.5483 -1.7425,6.9108 0.1638,9.3968 1.8709,2.4398 5.8043,2.2552 8.865,2.5478 3.8018,0.3635 8.1365,0.9432 11.412,-1.0208 2.3807,-1.4275 4.7878,-4.2002 4.5621,-6.9669 -0.2253,-2.762 -3.171,-4.8309 -5.6215,-6.1248 -2.6037,-1.37476 -5.8086,-1.51016 -8.7425,-1.26236 z m 12.8027,18.79876 c -4.0511,0.6376 -8.0198,5.1104 -8.1582,9.209 -0.101,2.9914 2.6336,6.2048 5.4873,7.1075 3.2485,1.0276 7.642,-0.3602 9.763,-3.0266 1.8143,-2.2808 1.9944,-6.1367 0.6442,-8.7194 -1.3877,-2.6543 -4.7775,-5.0362 -7.7363,-4.5705 z m -109.9922,0.6387 c -3.7119,0.3215 -8.4935,0.3866 -10.6369,3.4342 -1.8278,2.5989 -1.6697,7.0423 0.3108,9.5268 1.985,2.4901 6.0641,2.1801 9.2386,2.432 3.6959,0.2932 7.9131,0.8474 11.068,-1.1 2.3282,-1.4371 4.643,-4.2135 4.3867,-6.9375 -0.2626,-2.7908 -3.2543,-4.8515 -5.7414,-6.1444 -2.5762,-1.3392 -5.7332,-1.4616 -8.6258,-1.2111 z m 38.8731,0 c -3.7205,0.3241 -8.5227,0.3903 -10.658,3.4542 -1.8208,2.6126 -1.6174,7.0677 0.3826,9.5458 2.0055,2.485 6.0912,2.1566 9.2755,2.3959 3.6966,0.2778 7.9186,0.8235 11.0623,-1.1409 2.3003,-1.4374 4.563,-4.2097 4.2989,-6.9093 -0.2724,-2.7848 -3.249,-4.8422 -5.7316,-6.1328 -2.5774,-1.3399 -5.7358,-1.465 -8.6297,-1.2129 z m 38.8711,0 c -3.7116,0.3253 -8.4938,0.3864 -10.6369,3.4342 -1.828,2.5996 -1.6686,7.044 0.3127,9.5287 1.9844,2.4887 6.0613,2.1827 9.2347,2.4301 3.724,0.2903 7.9785,0.8385 11.148,-1.138 2.302,-1.4356 4.5754,-4.2079 4.3048,-6.9073 -0.2821,-2.8144 -3.3135,-4.8724 -5.8282,-6.1673 -2.5534,-1.3149 -5.674,-1.4312 -8.5351,-1.1804 z m -19.4336,19.4356 c -3.7216,0.3207 -8.497,0.4106 -10.6599,3.4561 -1.8117,2.551 -1.7053,6.909 0.2084,9.3844 1.8921,2.4476 5.8475,2.2482 8.9277,2.5362 3.7787,0.3534 8.0735,0.9066 11.3393,-1.0268 2.3536,-1.3934 4.7735,-4.0807 4.579,-6.8089 -0.2012,-2.8221 -3.1904,-4.9709 -5.6881,-6.2999 -2.5879,-1.377 -5.7858,-1.4928 -8.7064,-1.2411 z" /><path
     id="path1528-3-31"
     style="display:inline;fill:none;stroke:#000000;stroke-width:13.592;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:40.776, 40.776;filter:url(#filter50759)"
     d="M 845.8465,637.49065 A 214.03976,179.55559 0 0 1 631.8067,817.04624 214.03976,179.55559 0 0 1 417.7669,637.49065 214.03976,179.55559 0 0 1 631.8067,457.93506 214.03976,179.55559 0 0 1 845.8465,637.49065 Z" /><path
     style="fill:none;fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:5.77552;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;filter:url(#filter50759)"
     d="m 997.5342,868.39466 c 6.1701,-30.8504 126.7686,-301.38953 276.3204,-316.78538 190.8996,-19.65245 361.0983,-74.8545 352.269,-211.1372 -19.5624,-301.950709 -12.6259,442.8386 -12.6259,442.8386"
     id="path18147-29" /><path
     id="path1790-4-5-9-4"
     style="display:inline;fill:url(#linearGradient54096);fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:20.3259;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:60.9778, 60.9778;stroke-dashoffset:0;stroke-opacity:1;paint-order:normal;filter:url(#filter50759)"
     d="M 783.6393,98.448537 540.2566,341.83124 a 184.31203,172.42093 45 0 0 -2.743,2.3534 184.31203,172.42093 45 0 0 8.4081,252.2491 184.31203,172.42093 45 0 0 252.2477,8.4068 184.31203,172.42093 45 0 0 2.0358,-2.1462 l 0.055,0.055 243.8399,-243.8398 z" /><path
     d="m 550.5045,504.34764 190.199,-190.1987 -43.751,-43.7506 168.4854,6.5181 6.5181,168.4853 -43.7508,-43.7511 -190.1988,190.1988 -3.2593,-84.2423 z"
     style="fill:none;fill-opacity:1;stroke:#ffffff;stroke-width:7.63112;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter50759)"
     id="path21907-9-7-2" /><metadata
     id="metadata11846"><rdf:RDF><cc:Work
         rdf:about=""><dc:title>spacetime</dc:title><cc:license
           rdf:resource="http://creativecommons.org/licenses/by-nc-sa/4.0/" /></cc:Work><cc:License
         rdf:about="http://creativecommons.org/licenses/by-nc-sa/4.0/"><cc:permits
           rdf:resource="http://creativecommons.org/ns#Reproduction" /><cc:permits
           rdf:resource="http://creativecommons.org/ns#Distribution" /><cc:requires
           rdf:resource="http://creativecommons.org/ns#Notice" /><cc:requires
           rdf:resource="http://creativecommons.org/ns#Attribution" /><cc:prohibits
           rdf:resource="http://creativecommons.org/ns#CommercialUse" /><cc:permits
           rdf:resource="http://creativecommons.org/ns#DerivativeWorks" /><cc:requires
           rdf:resource="http://creativecommons.org/ns#ShareAlike" /></cc:License></rdf:RDF></metadata><script
     id="mesh_polyfill-6"
     type="text/javascript">
!function(){const t=&quot;http://www.w3.org/2000/svg&quot;,e=&quot;http://www.w3.org/1999/xlink&quot;,s=&quot;http://www.w3.org/1999/xhtml&quot;,r=2;if(document.createElementNS(t,&quot;meshgradient&quot;).x)return;const n=(t,e,s,r)=&gt;{let n=new x(.5*(e.x+s.x),.5*(e.y+s.y)),o=new x(.5*(t.x+e.x),.5*(t.y+e.y)),i=new x(.5*(s.x+r.x),.5*(s.y+r.y)),a=new x(.5*(n.x+o.x),.5*(n.y+o.y)),h=new x(.5*(n.x+i.x),.5*(n.y+i.y)),l=new x(.5*(a.x+h.x),.5*(a.y+h.y));return[[t,o,a,l],[l,h,i,r]]},o=t=&gt;{let e=t[0].distSquared(t[1]),s=t[2].distSquared(t[3]),r=.25*t[0].distSquared(t[2]),n=.25*t[1].distSquared(t[3]),o=e&gt;s?e:s,i=r&gt;n?r:n;return 18*(o&gt;i?o:i)},i=(t,e)=&gt;Math.sqrt(t.distSquared(e)),a=(t,e)=&gt;t.scale(2/3).add(e.scale(1/3)),h=t=&gt;{let e,s,r,n,o,i,a,h=new g;return t.match(/(\w+\(\s*[^)]+\))+/g).forEach(t=&gt;{let l=t.match(/[\w.-]+/g),d=l.shift();switch(d){case&quot;translate&quot;:2===l.length?e=new g(1,0,0,1,l[0],l[1]):(console.error(&quot;mesh.js: translate does not have 2 arguments!&quot;),e=new g(1,0,0,1,0,0)),h=h.append(e);break;case&quot;scale&quot;:1===l.length?s=new g(l[0],0,0,l[0],0,0):2===l.length?s=new g(l[0],0,0,l[1],0,0):(console.error(&quot;mesh.js: scale does not have 1 or 2 arguments!&quot;),s=new g(1,0,0,1,0,0)),h=h.append(s);break;case&quot;rotate&quot;:if(3===l.length&amp;&amp;(e=new g(1,0,0,1,l[1],l[2]),h=h.append(e)),l[0]){r=l[0]*Math.PI/180;let t=Math.cos(r),e=Math.sin(r);Math.abs(t)&lt;1e-16&amp;&amp;(t=0),Math.abs(e)&lt;1e-16&amp;&amp;(e=0),a=new g(t,e,-e,t,0,0),h=h.append(a)}else console.error(&quot;math.js: No argument to rotate transform!&quot;);3===l.length&amp;&amp;(e=new g(1,0,0,1,-l[1],-l[2]),h=h.append(e));break;case&quot;skewX&quot;:l[0]?(r=l[0]*Math.PI/180,n=Math.tan(r),o=new g(1,0,n,1,0,0),h=h.append(o)):console.error(&quot;math.js: No argument to skewX transform!&quot;);break;case&quot;skewY&quot;:l[0]?(r=l[0]*Math.PI/180,n=Math.tan(r),i=new g(1,n,0,1,0,0),h=h.append(i)):console.error(&quot;math.js: No argument to skewY transform!&quot;);break;case&quot;matrix&quot;:6===l.length?h=h.append(new g(...l)):console.error(&quot;math.js: Incorrect number of arguments for matrix!&quot;);break;default:console.error(&quot;mesh.js: Unhandled transform type: &quot;+d)}}),h},l=t=&gt;{let e=[],s=t.split(/[ ,]+/);for(let t=0,r=s.length-1;t&lt;r;t+=2)e.push(new x(parseFloat(s[t]),parseFloat(s[t+1])));return e},d=(t,e)=&gt;{for(let s in e)t.setAttribute(s,e[s])},c=(t,e,s,r,n)=&gt;{let o,i,a=[0,0,0,0];for(let h=0;h&lt;3;++h)e[h]&lt;t[h]&amp;&amp;e[h]&lt;s[h]||t[h]&lt;e[h]&amp;&amp;s[h]&lt;e[h]?a[h]=0:(a[h]=.5*((e[h]-t[h])/r+(s[h]-e[h])/n),o=Math.abs(3*(e[h]-t[h])/r),i=Math.abs(3*(s[h]-e[h])/n),a[h]&gt;o?a[h]=o:a[h]&gt;i&amp;&amp;(a[h]=i));return a},u=[[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0],[-3,3,0,0,-2,-1,0,0,0,0,0,0,0,0,0,0],[2,-2,0,0,1,1,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0],[0,0,0,0,0,0,0,0,-3,3,0,0,-2,-1,0,0],[0,0,0,0,0,0,0,0,2,-2,0,0,1,1,0,0],[-3,0,3,0,0,0,0,0,-2,0,-1,0,0,0,0,0],[0,0,0,0,-3,0,3,0,0,0,0,0,-2,0,-1,0],[9,-9,-9,9,6,3,-6,-3,6,-6,3,-3,4,2,2,1],[-6,6,6,-6,-3,-3,3,3,-4,4,-2,2,-2,-2,-1,-1],[2,0,-2,0,0,0,0,0,1,0,1,0,0,0,0,0],[0,0,0,0,2,0,-2,0,0,0,0,0,1,0,1,0],[-6,6,6,-6,-4,-2,4,2,-3,3,-3,3,-2,-1,-2,-1],[4,-4,-4,4,2,2,-2,-2,2,-2,2,-2,1,1,1,1]],f=t=&gt;{let e=[];for(let s=0;s&lt;16;++s){e[s]=0;for(let r=0;r&lt;16;++r)e[s]+=u[s][r]*t[r]}return e},p=(t,e,s)=&gt;{const r=e*e,n=s*s,o=e*e*e,i=s*s*s;return t[0]+t[1]*e+t[2]*r+t[3]*o+t[4]*s+t[5]*s*e+t[6]*s*r+t[7]*s*o+t[8]*n+t[9]*n*e+t[10]*n*r+t[11]*n*o+t[12]*i+t[13]*i*e+t[14]*i*r+t[15]*i*o},y=t=&gt;{let e=[],s=[],r=[];for(let s=0;s&lt;4;++s)e[s]=[],e[s][0]=n(t[0][s],t[1][s],t[2][s],t[3][s]),e[s][1]=[],e[s][1].push(...n(...e[s][0][0])),e[s][1].push(...n(...e[s][0][1])),e[s][2]=[],e[s][2].push(...n(...e[s][1][0])),e[s][2].push(...n(...e[s][1][1])),e[s][2].push(...n(...e[s][1][2])),e[s][2].push(...n(...e[s][1][3]));for(let t=0;t&lt;8;++t){s[t]=[];for(let r=0;r&lt;4;++r)s[t][r]=[],s[t][r][0]=n(e[0][2][t][r],e[1][2][t][r],e[2][2][t][r],e[3][2][t][r]),s[t][r][1]=[],s[t][r][1].push(...n(...s[t][r][0][0])),s[t][r][1].push(...n(...s[t][r][0][1])),s[t][r][2]=[],s[t][r][2].push(...n(...s[t][r][1][0])),s[t][r][2].push(...n(...s[t][r][1][1])),s[t][r][2].push(...n(...s[t][r][1][2])),s[t][r][2].push(...n(...s[t][r][1][3]))}for(let t=0;t&lt;8;++t){r[t]=[];for(let e=0;e&lt;8;++e)r[t][e]=[],r[t][e][0]=s[t][0][2][e],r[t][e][1]=s[t][1][2][e],r[t][e][2]=s[t][2][2][e],r[t][e][3]=s[t][3][2][e]}return r};class x{constructor(t,e){this.x=t||0,this.y=e||0}toString(){return`(x=${this.x}, y=${this.y})`}clone(){return new x(this.x,this.y)}add(t){return new x(this.x+t.x,this.y+t.y)}scale(t){return void 0===t.x?new x(this.x*t,this.y*t):new x(this.x*t.x,this.y*t.y)}distSquared(t){let e=this.x-t.x,s=this.y-t.y;return e*e+s*s}transform(t){let e=this.x*t.a+this.y*t.c+t.e,s=this.x*t.b+this.y*t.d+t.f;return new x(e,s)}}class g{constructor(t,e,s,r,n,o){void 0===t?(this.a=1,this.b=0,this.c=0,this.d=1,this.e=0,this.f=0):(this.a=t,this.b=e,this.c=s,this.d=r,this.e=n,this.f=o)}toString(){return`affine: ${this.a} ${this.c} ${this.e} \n       ${this.b} ${this.d} ${this.f}`}append(t){t instanceof g||console.error(&quot;mesh.js: argument to Affine.append is not affine!&quot;);let e=this.a*t.a+this.c*t.b,s=this.b*t.a+this.d*t.b,r=this.a*t.c+this.c*t.d,n=this.b*t.c+this.d*t.d,o=this.a*t.e+this.c*t.f+this.e,i=this.b*t.e+this.d*t.f+this.f;return new g(e,s,r,n,o,i)}}class w{constructor(t,e){this.nodes=t,this.colors=e}paintCurve(t,e){if(o(this.nodes)&gt;r){const s=n(...this.nodes);let r=[[],[]],o=[[],[]];for(let t=0;t&lt;4;++t)r[0][t]=this.colors[0][t],r[1][t]=(this.colors[0][t]+this.colors[1][t])/2,o[0][t]=r[1][t],o[1][t]=this.colors[1][t];let i=new w(s[0],r),a=new w(s[1],o);i.paintCurve(t,e),a.paintCurve(t,e)}else{let s=Math.round(this.nodes[0].x);if(s&gt;=0&amp;&amp;s&lt;e){let r=4*(~~this.nodes[0].y*e+s);t[r]=Math.round(this.colors[0][0]),t[r+1]=Math.round(this.colors[0][1]),t[r+2]=Math.round(this.colors[0][2]),t[r+3]=Math.round(this.colors[0][3])}}}}class m{constructor(t,e){this.nodes=t,this.colors=e}split(){let t=[[],[],[],[]],e=[[],[],[],[]],s=[[[],[]],[[],[]]],r=[[[],[]],[[],[]]];for(let s=0;s&lt;4;++s){const r=n(this.nodes[0][s],this.nodes[1][s],this.nodes[2][s],this.nodes[3][s]);t[0][s]=r[0][0],t[1][s]=r[0][1],t[2][s]=r[0][2],t[3][s]=r[0][3],e[0][s]=r[1][0],e[1][s]=r[1][1],e[2][s]=r[1][2],e[3][s]=r[1][3]}for(let t=0;t&lt;4;++t)s[0][0][t]=this.colors[0][0][t],s[0][1][t]=this.colors[0][1][t],s[1][0][t]=(this.colors[0][0][t]+this.colors[1][0][t])/2,s[1][1][t]=(this.colors[0][1][t]+this.colors[1][1][t])/2,r[0][0][t]=s[1][0][t],r[0][1][t]=s[1][1][t],r[1][0][t]=this.colors[1][0][t],r[1][1][t]=this.colors[1][1][t];return[new m(t,s),new m(e,r)]}paint(t,e){let s,n=!1;for(let t=0;t&lt;4;++t)if((s=o([this.nodes[0][t],this.nodes[1][t],this.nodes[2][t],this.nodes[3][t]]))&gt;r){n=!0;break}if(n){let s=this.split();s[0].paint(t,e),s[1].paint(t,e)}else{new w([...this.nodes[0]],[...this.colors[0]]).paintCurve(t,e)}}}class b{constructor(t){this.readMesh(t),this.type=t.getAttribute(&quot;type&quot;)||&quot;bilinear&quot;}readMesh(t){let e=[[]],s=[[]],r=Number(t.getAttribute(&quot;x&quot;)),n=Number(t.getAttribute(&quot;y&quot;));e[0][0]=new x(r,n);let o=t.children;for(let t=0,r=o.length;t&lt;r;++t){e[3*t+1]=[],e[3*t+2]=[],e[3*t+3]=[],s[t+1]=[];let r=o[t].children;for(let n=0,o=r.length;n&lt;o;++n){let o=r[n].children;for(let r=0,i=o.length;r&lt;i;++r){let i=r;0!==t&amp;&amp;++i;let h,d=o[r].getAttribute(&quot;path&quot;),c=&quot;l&quot;;null!=d&amp;&amp;(c=(h=d.match(/\s*([lLcC])\s*(.*)/))[1]);let u=l(h[2]);switch(c){case&quot;l&quot;:0===i?(e[3*t][3*n+3]=u[0].add(e[3*t][3*n]),e[3*t][3*n+1]=a(e[3*t][3*n],e[3*t][3*n+3]),e[3*t][3*n+2]=a(e[3*t][3*n+3],e[3*t][3*n])):1===i?(e[3*t+3][3*n+3]=u[0].add(e[3*t][3*n+3]),e[3*t+1][3*n+3]=a(e[3*t][3*n+3],e[3*t+3][3*n+3]),e[3*t+2][3*n+3]=a(e[3*t+3][3*n+3],e[3*t][3*n+3])):2===i?(0===n&amp;&amp;(e[3*t+3][3*n+0]=u[0].add(e[3*t+3][3*n+3])),e[3*t+3][3*n+1]=a(e[3*t+3][3*n],e[3*t+3][3*n+3]),e[3*t+3][3*n+2]=a(e[3*t+3][3*n+3],e[3*t+3][3*n])):(e[3*t+1][3*n]=a(e[3*t][3*n],e[3*t+3][3*n]),e[3*t+2][3*n]=a(e[3*t+3][3*n],e[3*t][3*n]));break;case&quot;L&quot;:0===i?(e[3*t][3*n+3]=u[0],e[3*t][3*n+1]=a(e[3*t][3*n],e[3*t][3*n+3]),e[3*t][3*n+2]=a(e[3*t][3*n+3],e[3*t][3*n])):1===i?(e[3*t+3][3*n+3]=u[0],e[3*t+1][3*n+3]=a(e[3*t][3*n+3],e[3*t+3][3*n+3]),e[3*t+2][3*n+3]=a(e[3*t+3][3*n+3],e[3*t][3*n+3])):2===i?(0===n&amp;&amp;(e[3*t+3][3*n+0]=u[0]),e[3*t+3][3*n+1]=a(e[3*t+3][3*n],e[3*t+3][3*n+3]),e[3*t+3][3*n+2]=a(e[3*t+3][3*n+3],e[3*t+3][3*n])):(e[3*t+1][3*n]=a(e[3*t][3*n],e[3*t+3][3*n]),e[3*t+2][3*n]=a(e[3*t+3][3*n],e[3*t][3*n]));break;case&quot;c&quot;:0===i?(e[3*t][3*n+1]=u[0].add(e[3*t][3*n]),e[3*t][3*n+2]=u[1].add(e[3*t][3*n]),e[3*t][3*n+3]=u[2].add(e[3*t][3*n])):1===i?(e[3*t+1][3*n+3]=u[0].add(e[3*t][3*n+3]),e[3*t+2][3*n+3]=u[1].add(e[3*t][3*n+3]),e[3*t+3][3*n+3]=u[2].add(e[3*t][3*n+3])):2===i?(e[3*t+3][3*n+2]=u[0].add(e[3*t+3][3*n+3]),e[3*t+3][3*n+1]=u[1].add(e[3*t+3][3*n+3]),0===n&amp;&amp;(e[3*t+3][3*n+0]=u[2].add(e[3*t+3][3*n+3]))):(e[3*t+2][3*n]=u[0].add(e[3*t+3][3*n]),e[3*t+1][3*n]=u[1].add(e[3*t+3][3*n]));break;case&quot;C&quot;:0===i?(e[3*t][3*n+1]=u[0],e[3*t][3*n+2]=u[1],e[3*t][3*n+3]=u[2]):1===i?(e[3*t+1][3*n+3]=u[0],e[3*t+2][3*n+3]=u[1],e[3*t+3][3*n+3]=u[2]):2===i?(e[3*t+3][3*n+2]=u[0],e[3*t+3][3*n+1]=u[1],0===n&amp;&amp;(e[3*t+3][3*n+0]=u[2])):(e[3*t+2][3*n]=u[0],e[3*t+1][3*n]=u[1]);break;default:console.error(&quot;mesh.js: &quot;+c+&quot; invalid path type.&quot;)}if(0===t&amp;&amp;0===n||r&gt;0){let e=window.getComputedStyle(o[r]).stopColor.match(/^rgb\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)$/i),a=window.getComputedStyle(o[r]).stopOpacity,h=255;a&amp;&amp;(h=Math.floor(255*a)),e&amp;&amp;(0===i?(s[t][n]=[],s[t][n][0]=Math.floor(e[1]),s[t][n][1]=Math.floor(e[2]),s[t][n][2]=Math.floor(e[3]),s[t][n][3]=h):1===i?(s[t][n+1]=[],s[t][n+1][0]=Math.floor(e[1]),s[t][n+1][1]=Math.floor(e[2]),s[t][n+1][2]=Math.floor(e[3]),s[t][n+1][3]=h):2===i?(s[t+1][n+1]=[],s[t+1][n+1][0]=Math.floor(e[1]),s[t+1][n+1][1]=Math.floor(e[2]),s[t+1][n+1][2]=Math.floor(e[3]),s[t+1][n+1][3]=h):3===i&amp;&amp;(s[t+1][n]=[],s[t+1][n][0]=Math.floor(e[1]),s[t+1][n][1]=Math.floor(e[2]),s[t+1][n][2]=Math.floor(e[3]),s[t+1][n][3]=h))}}e[3*t+1][3*n+1]=new x,e[3*t+1][3*n+2]=new x,e[3*t+2][3*n+1]=new x,e[3*t+2][3*n+2]=new x,e[3*t+1][3*n+1].x=(-4*e[3*t][3*n].x+6*(e[3*t][3*n+1].x+e[3*t+1][3*n].x)+-2*(e[3*t][3*n+3].x+e[3*t+3][3*n].x)+3*(e[3*t+3][3*n+1].x+e[3*t+1][3*n+3].x)+-1*e[3*t+3][3*n+3].x)/9,e[3*t+1][3*n+2].x=(-4*e[3*t][3*n+3].x+6*(e[3*t][3*n+2].x+e[3*t+1][3*n+3].x)+-2*(e[3*t][3*n].x+e[3*t+3][3*n+3].x)+3*(e[3*t+3][3*n+2].x+e[3*t+1][3*n].x)+-1*e[3*t+3][3*n].x)/9,e[3*t+2][3*n+1].x=(-4*e[3*t+3][3*n].x+6*(e[3*t+3][3*n+1].x+e[3*t+2][3*n].x)+-2*(e[3*t+3][3*n+3].x+e[3*t][3*n].x)+3*(e[3*t][3*n+1].x+e[3*t+2][3*n+3].x)+-1*e[3*t][3*n+3].x)/9,e[3*t+2][3*n+2].x=(-4*e[3*t+3][3*n+3].x+6*(e[3*t+3][3*n+2].x+e[3*t+2][3*n+3].x)+-2*(e[3*t+3][3*n].x+e[3*t][3*n+3].x)+3*(e[3*t][3*n+2].x+e[3*t+2][3*n].x)+-1*e[3*t][3*n].x)/9,e[3*t+1][3*n+1].y=(-4*e[3*t][3*n].y+6*(e[3*t][3*n+1].y+e[3*t+1][3*n].y)+-2*(e[3*t][3*n+3].y+e[3*t+3][3*n].y)+3*(e[3*t+3][3*n+1].y+e[3*t+1][3*n+3].y)+-1*e[3*t+3][3*n+3].y)/9,e[3*t+1][3*n+2].y=(-4*e[3*t][3*n+3].y+6*(e[3*t][3*n+2].y+e[3*t+1][3*n+3].y)+-2*(e[3*t][3*n].y+e[3*t+3][3*n+3].y)+3*(e[3*t+3][3*n+2].y+e[3*t+1][3*n].y)+-1*e[3*t+3][3*n].y)/9,e[3*t+2][3*n+1].y=(-4*e[3*t+3][3*n].y+6*(e[3*t+3][3*n+1].y+e[3*t+2][3*n].y)+-2*(e[3*t+3][3*n+3].y+e[3*t][3*n].y)+3*(e[3*t][3*n+1].y+e[3*t+2][3*n+3].y)+-1*e[3*t][3*n+3].y)/9,e[3*t+2][3*n+2].y=(-4*e[3*t+3][3*n+3].y+6*(e[3*t+3][3*n+2].y+e[3*t+2][3*n+3].y)+-2*(e[3*t+3][3*n].y+e[3*t][3*n+3].y)+3*(e[3*t][3*n+2].y+e[3*t+2][3*n].y)+-1*e[3*t][3*n].y)/9}}this.nodes=e,this.colors=s}paintMesh(t,e){let s=(this.nodes.length-1)/3,r=(this.nodes[0].length-1)/3;if(&quot;bilinear&quot;===this.type||s&lt;2||r&lt;2){let n;for(let o=0;o&lt;s;++o)for(let s=0;s&lt;r;++s){let r=[];for(let t=3*o,e=3*o+4;t&lt;e;++t)r.push(this.nodes[t].slice(3*s,3*s+4));let i=[];i.push(this.colors[o].slice(s,s+2)),i.push(this.colors[o+1].slice(s,s+2)),(n=new m(r,i)).paint(t,e)}}else{let n,o,a,h,l,d,u;const x=s,g=r;s++,r++;let w=new Array(s);for(let t=0;t&lt;s;++t){w[t]=new Array(r);for(let e=0;e&lt;r;++e)w[t][e]=[],w[t][e][0]=this.nodes[3*t][3*e],w[t][e][1]=this.colors[t][e]}for(let t=0;t&lt;s;++t)for(let e=0;e&lt;r;++e)0!==t&amp;&amp;t!==x&amp;&amp;(n=i(w[t-1][e][0],w[t][e][0]),o=i(w[t+1][e][0],w[t][e][0]),w[t][e][2]=c(w[t-1][e][1],w[t][e][1],w[t+1][e][1],n,o)),0!==e&amp;&amp;e!==g&amp;&amp;(n=i(w[t][e-1][0],w[t][e][0]),o=i(w[t][e+1][0],w[t][e][0]),w[t][e][3]=c(w[t][e-1][1],w[t][e][1],w[t][e+1][1],n,o));for(let t=0;t&lt;r;++t){w[0][t][2]=[],w[x][t][2]=[];for(let e=0;e&lt;4;++e)n=i(w[1][t][0],w[0][t][0]),o=i(w[x][t][0],w[x-1][t][0]),w[0][t][2][e]=n&gt;0?2*(w[1][t][1][e]-w[0][t][1][e])/n-w[1][t][2][e]:0,w[x][t][2][e]=o&gt;0?2*(w[x][t][1][e]-w[x-1][t][1][e])/o-w[x-1][t][2][e]:0}for(let t=0;t&lt;s;++t){w[t][0][3]=[],w[t][g][3]=[];for(let e=0;e&lt;4;++e)n=i(w[t][1][0],w[t][0][0]),o=i(w[t][g][0],w[t][g-1][0]),w[t][0][3][e]=n&gt;0?2*(w[t][1][1][e]-w[t][0][1][e])/n-w[t][1][3][e]:0,w[t][g][3][e]=o&gt;0?2*(w[t][g][1][e]-w[t][g-1][1][e])/o-w[t][g-1][3][e]:0}for(let s=0;s&lt;x;++s)for(let r=0;r&lt;g;++r){let n=i(w[s][r][0],w[s+1][r][0]),o=i(w[s][r+1][0],w[s+1][r+1][0]),c=i(w[s][r][0],w[s][r+1][0]),x=i(w[s+1][r][0],w[s+1][r+1][0]),g=[[],[],[],[]];for(let t=0;t&lt;4;++t){(d=[])[0]=w[s][r][1][t],d[1]=w[s+1][r][1][t],d[2]=w[s][r+1][1][t],d[3]=w[s+1][r+1][1][t],d[4]=w[s][r][2][t]*n,d[5]=w[s+1][r][2][t]*n,d[6]=w[s][r+1][2][t]*o,d[7]=w[s+1][r+1][2][t]*o,d[8]=w[s][r][3][t]*c,d[9]=w[s+1][r][3][t]*x,d[10]=w[s][r+1][3][t]*c,d[11]=w[s+1][r+1][3][t]*x,d[12]=0,d[13]=0,d[14]=0,d[15]=0,u=f(d);for(let e=0;e&lt;9;++e){g[t][e]=[];for(let s=0;s&lt;9;++s)g[t][e][s]=p(u,e/8,s/8),g[t][e][s]&gt;255?g[t][e][s]=255:g[t][e][s]&lt;0&amp;&amp;(g[t][e][s]=0)}}h=[];for(let t=3*s,e=3*s+4;t&lt;e;++t)h.push(this.nodes[t].slice(3*r,3*r+4));l=y(h);for(let s=0;s&lt;8;++s)for(let r=0;r&lt;8;++r)(a=new m(l[s][r],[[[g[0][s][r],g[1][s][r],g[2][s][r],g[3][s][r]],[g[0][s][r+1],g[1][s][r+1],g[2][s][r+1],g[3][s][r+1]]],[[g[0][s+1][r],g[1][s+1][r],g[2][s+1][r],g[3][s+1][r]],[g[0][s+1][r+1],g[1][s+1][r+1],g[2][s+1][r+1],g[3][s+1][r+1]]]])).paint(t,e)}}}transform(t){if(t instanceof x)for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].add(t);else if(t instanceof g)for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].transform(t)}scale(t){for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].scale(t)}}document.querySelectorAll(&quot;rect,circle,ellipse,path,text&quot;).forEach((r,n)=&gt;{let o=r.getAttribute(&quot;id&quot;);o||(o=&quot;patchjs_shape&quot;+n,r.setAttribute(&quot;id&quot;,o));const i=r.style.fill.match(/^url\(\s*&quot;?\s*#([^\s&quot;]+)&quot;?\s*\)/),a=r.style.stroke.match(/^url\(\s*&quot;?\s*#([^\s&quot;]+)&quot;?\s*\)/);if(i&amp;&amp;i[1]){const a=document.getElementById(i[1]);if(a&amp;&amp;&quot;meshgradient&quot;===a.nodeName){const i=r.getBBox();let l=document.createElementNS(s,&quot;canvas&quot;);d(l,{width:i.width,height:i.height});const c=l.getContext(&quot;2d&quot;);let u=c.createImageData(i.width,i.height);const f=new b(a);&quot;objectBoundingBox&quot;===a.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;f.scale(new x(i.width,i.height));const p=a.getAttribute(&quot;gradientTransform&quot;);null!=p&amp;&amp;f.transform(h(p)),&quot;userSpaceOnUse&quot;===a.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;f.transform(new x(-i.x,-i.y)),f.paintMesh(u.data,l.width),c.putImageData(u,0,0);const y=document.createElementNS(t,&quot;image&quot;);d(y,{width:i.width,height:i.height,x:i.x,y:i.y});let g=l.toDataURL();y.setAttributeNS(e,&quot;xlink:href&quot;,g),r.parentNode.insertBefore(y,r),r.style.fill=&quot;none&quot;;const w=document.createElementNS(t,&quot;use&quot;);w.setAttributeNS(e,&quot;xlink:href&quot;,&quot;#&quot;+o);const m=&quot;patchjs_clip&quot;+n,M=document.createElementNS(t,&quot;clipPath&quot;);M.setAttribute(&quot;id&quot;,m),M.appendChild(w),r.parentElement.insertBefore(M,r),y.setAttribute(&quot;clip-path&quot;,&quot;url(#&quot;+m+&quot;)&quot;),u=null,l=null,g=null}}if(a&amp;&amp;a[1]){const o=document.getElementById(a[1]);if(o&amp;&amp;&quot;meshgradient&quot;===o.nodeName){const i=parseFloat(r.style.strokeWidth.slice(0,-2))*(parseFloat(r.style.strokeMiterlimit)||parseFloat(r.getAttribute(&quot;stroke-miterlimit&quot;))||1),a=r.getBBox(),l=Math.trunc(a.width+i),c=Math.trunc(a.height+i),u=Math.trunc(a.x-i/2),f=Math.trunc(a.y-i/2);let p=document.createElementNS(s,&quot;canvas&quot;);d(p,{width:l,height:c});const y=p.getContext(&quot;2d&quot;);let g=y.createImageData(l,c);const w=new b(o);&quot;objectBoundingBox&quot;===o.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;w.scale(new x(l,c));const m=o.getAttribute(&quot;gradientTransform&quot;);null!=m&amp;&amp;w.transform(h(m)),&quot;userSpaceOnUse&quot;===o.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;w.transform(new x(-u,-f)),w.paintMesh(g.data,p.width),y.putImageData(g,0,0);const M=document.createElementNS(t,&quot;image&quot;);d(M,{width:l,height:c,x:0,y:0});let S=p.toDataURL();M.setAttributeNS(e,&quot;xlink:href&quot;,S);const k=&quot;pattern_clip&quot;+n,A=document.createElementNS(t,&quot;pattern&quot;);d(A,{id:k,patternUnits:&quot;userSpaceOnUse&quot;,width:l,height:c,x:u,y:f}),A.appendChild(M),o.parentNode.appendChild(A),r.style.stroke=&quot;url(#&quot;+k+&quot;)&quot;,g=null,p=null,S=null}}})}();
</script><script
     id="mesh_polyfill-63"
     type="text/javascript">
!function(){const t=&quot;http://www.w3.org/2000/svg&quot;,e=&quot;http://www.w3.org/1999/xlink&quot;,s=&quot;http://www.w3.org/1999/xhtml&quot;,r=2;if(document.createElementNS(t,&quot;meshgradient&quot;).x)return;const n=(t,e,s,r)=&gt;{let n=new x(.5*(e.x+s.x),.5*(e.y+s.y)),o=new x(.5*(t.x+e.x),.5*(t.y+e.y)),i=new x(.5*(s.x+r.x),.5*(s.y+r.y)),a=new x(.5*(n.x+o.x),.5*(n.y+o.y)),h=new x(.5*(n.x+i.x),.5*(n.y+i.y)),l=new x(.5*(a.x+h.x),.5*(a.y+h.y));return[[t,o,a,l],[l,h,i,r]]},o=t=&gt;{let e=t[0].distSquared(t[1]),s=t[2].distSquared(t[3]),r=.25*t[0].distSquared(t[2]),n=.25*t[1].distSquared(t[3]),o=e&gt;s?e:s,i=r&gt;n?r:n;return 18*(o&gt;i?o:i)},i=(t,e)=&gt;Math.sqrt(t.distSquared(e)),a=(t,e)=&gt;t.scale(2/3).add(e.scale(1/3)),h=t=&gt;{let e,s,r,n,o,i,a,h=new g;return t.match(/(\w+\(\s*[^)]+\))+/g).forEach(t=&gt;{let l=t.match(/[\w.-]+/g),d=l.shift();switch(d){case&quot;translate&quot;:2===l.length?e=new g(1,0,0,1,l[0],l[1]):(console.error(&quot;mesh.js: translate does not have 2 arguments!&quot;),e=new g(1,0,0,1,0,0)),h=h.append(e);break;case&quot;scale&quot;:1===l.length?s=new g(l[0],0,0,l[0],0,0):2===l.length?s=new g(l[0],0,0,l[1],0,0):(console.error(&quot;mesh.js: scale does not have 1 or 2 arguments!&quot;),s=new g(1,0,0,1,0,0)),h=h.append(s);break;case&quot;rotate&quot;:if(3===l.length&amp;&amp;(e=new g(1,0,0,1,l[1],l[2]),h=h.append(e)),l[0]){r=l[0]*Math.PI/180;let t=Math.cos(r),e=Math.sin(r);Math.abs(t)&lt;1e-16&amp;&amp;(t=0),Math.abs(e)&lt;1e-16&amp;&amp;(e=0),a=new g(t,e,-e,t,0,0),h=h.append(a)}else console.error(&quot;math.js: No argument to rotate transform!&quot;);3===l.length&amp;&amp;(e=new g(1,0,0,1,-l[1],-l[2]),h=h.append(e));break;case&quot;skewX&quot;:l[0]?(r=l[0]*Math.PI/180,n=Math.tan(r),o=new g(1,0,n,1,0,0),h=h.append(o)):console.error(&quot;math.js: No argument to skewX transform!&quot;);break;case&quot;skewY&quot;:l[0]?(r=l[0]*Math.PI/180,n=Math.tan(r),i=new g(1,n,0,1,0,0),h=h.append(i)):console.error(&quot;math.js: No argument to skewY transform!&quot;);break;case&quot;matrix&quot;:6===l.length?h=h.append(new g(...l)):console.error(&quot;math.js: Incorrect number of arguments for matrix!&quot;);break;default:console.error(&quot;mesh.js: Unhandled transform type: &quot;+d)}}),h},l=t=&gt;{let e=[],s=t.split(/[ ,]+/);for(let t=0,r=s.length-1;t&lt;r;t+=2)e.push(new x(parseFloat(s[t]),parseFloat(s[t+1])));return e},d=(t,e)=&gt;{for(let s in e)t.setAttribute(s,e[s])},c=(t,e,s,r,n)=&gt;{let o,i,a=[0,0,0,0];for(let h=0;h&lt;3;++h)e[h]&lt;t[h]&amp;&amp;e[h]&lt;s[h]||t[h]&lt;e[h]&amp;&amp;s[h]&lt;e[h]?a[h]=0:(a[h]=.5*((e[h]-t[h])/r+(s[h]-e[h])/n),o=Math.abs(3*(e[h]-t[h])/r),i=Math.abs(3*(s[h]-e[h])/n),a[h]&gt;o?a[h]=o:a[h]&gt;i&amp;&amp;(a[h]=i));return a},u=[[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0],[-3,3,0,0,-2,-1,0,0,0,0,0,0,0,0,0,0],[2,-2,0,0,1,1,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0],[0,0,0,0,0,0,0,0,-3,3,0,0,-2,-1,0,0],[0,0,0,0,0,0,0,0,2,-2,0,0,1,1,0,0],[-3,0,3,0,0,0,0,0,-2,0,-1,0,0,0,0,0],[0,0,0,0,-3,0,3,0,0,0,0,0,-2,0,-1,0],[9,-9,-9,9,6,3,-6,-3,6,-6,3,-3,4,2,2,1],[-6,6,6,-6,-3,-3,3,3,-4,4,-2,2,-2,-2,-1,-1],[2,0,-2,0,0,0,0,0,1,0,1,0,0,0,0,0],[0,0,0,0,2,0,-2,0,0,0,0,0,1,0,1,0],[-6,6,6,-6,-4,-2,4,2,-3,3,-3,3,-2,-1,-2,-1],[4,-4,-4,4,2,2,-2,-2,2,-2,2,-2,1,1,1,1]],f=t=&gt;{let e=[];for(let s=0;s&lt;16;++s){e[s]=0;for(let r=0;r&lt;16;++r)e[s]+=u[s][r]*t[r]}return e},p=(t,e,s)=&gt;{const r=e*e,n=s*s,o=e*e*e,i=s*s*s;return t[0]+t[1]*e+t[2]*r+t[3]*o+t[4]*s+t[5]*s*e+t[6]*s*r+t[7]*s*o+t[8]*n+t[9]*n*e+t[10]*n*r+t[11]*n*o+t[12]*i+t[13]*i*e+t[14]*i*r+t[15]*i*o},y=t=&gt;{let e=[],s=[],r=[];for(let s=0;s&lt;4;++s)e[s]=[],e[s][0]=n(t[0][s],t[1][s],t[2][s],t[3][s]),e[s][1]=[],e[s][1].push(...n(...e[s][0][0])),e[s][1].push(...n(...e[s][0][1])),e[s][2]=[],e[s][2].push(...n(...e[s][1][0])),e[s][2].push(...n(...e[s][1][1])),e[s][2].push(...n(...e[s][1][2])),e[s][2].push(...n(...e[s][1][3]));for(let t=0;t&lt;8;++t){s[t]=[];for(let r=0;r&lt;4;++r)s[t][r]=[],s[t][r][0]=n(e[0][2][t][r],e[1][2][t][r],e[2][2][t][r],e[3][2][t][r]),s[t][r][1]=[],s[t][r][1].push(...n(...s[t][r][0][0])),s[t][r][1].push(...n(...s[t][r][0][1])),s[t][r][2]=[],s[t][r][2].push(...n(...s[t][r][1][0])),s[t][r][2].push(...n(...s[t][r][1][1])),s[t][r][2].push(...n(...s[t][r][1][2])),s[t][r][2].push(...n(...s[t][r][1][3]))}for(let t=0;t&lt;8;++t){r[t]=[];for(let e=0;e&lt;8;++e)r[t][e]=[],r[t][e][0]=s[t][0][2][e],r[t][e][1]=s[t][1][2][e],r[t][e][2]=s[t][2][2][e],r[t][e][3]=s[t][3][2][e]}return r};class x{constructor(t,e){this.x=t||0,this.y=e||0}toString(){return`(x=${this.x}, y=${this.y})`}clone(){return new x(this.x,this.y)}add(t){return new x(this.x+t.x,this.y+t.y)}scale(t){return void 0===t.x?new x(this.x*t,this.y*t):new x(this.x*t.x,this.y*t.y)}distSquared(t){let e=this.x-t.x,s=this.y-t.y;return e*e+s*s}transform(t){let e=this.x*t.a+this.y*t.c+t.e,s=this.x*t.b+this.y*t.d+t.f;return new x(e,s)}}class g{constructor(t,e,s,r,n,o){void 0===t?(this.a=1,this.b=0,this.c=0,this.d=1,this.e=0,this.f=0):(this.a=t,this.b=e,this.c=s,this.d=r,this.e=n,this.f=o)}toString(){return`affine: ${this.a} ${this.c} ${this.e} \n       ${this.b} ${this.d} ${this.f}`}append(t){t instanceof g||console.error(&quot;mesh.js: argument to Affine.append is not affine!&quot;);let e=this.a*t.a+this.c*t.b,s=this.b*t.a+this.d*t.b,r=this.a*t.c+this.c*t.d,n=this.b*t.c+this.d*t.d,o=this.a*t.e+this.c*t.f+this.e,i=this.b*t.e+this.d*t.f+this.f;return new g(e,s,r,n,o,i)}}class w{constructor(t,e){this.nodes=t,this.colors=e}paintCurve(t,e){if(o(this.nodes)&gt;r){const s=n(...this.nodes);let r=[[],[]],o=[[],[]];for(let t=0;t&lt;4;++t)r[0][t]=this.colors[0][t],r[1][t]=(this.colors[0][t]+this.colors[1][t])/2,o[0][t]=r[1][t],o[1][t]=this.colors[1][t];let i=new w(s[0],r),a=new w(s[1],o);i.paintCurve(t,e),a.paintCurve(t,e)}else{let s=Math.round(this.nodes[0].x);if(s&gt;=0&amp;&amp;s&lt;e){let r=4*(~~this.nodes[0].y*e+s);t[r]=Math.round(this.colors[0][0]),t[r+1]=Math.round(this.colors[0][1]),t[r+2]=Math.round(this.colors[0][2]),t[r+3]=Math.round(this.colors[0][3])}}}}class m{constructor(t,e){this.nodes=t,this.colors=e}split(){let t=[[],[],[],[]],e=[[],[],[],[]],s=[[[],[]],[[],[]]],r=[[[],[]],[[],[]]];for(let s=0;s&lt;4;++s){const r=n(this.nodes[0][s],this.nodes[1][s],this.nodes[2][s],this.nodes[3][s]);t[0][s]=r[0][0],t[1][s]=r[0][1],t[2][s]=r[0][2],t[3][s]=r[0][3],e[0][s]=r[1][0],e[1][s]=r[1][1],e[2][s]=r[1][2],e[3][s]=r[1][3]}for(let t=0;t&lt;4;++t)s[0][0][t]=this.colors[0][0][t],s[0][1][t]=this.colors[0][1][t],s[1][0][t]=(this.colors[0][0][t]+this.colors[1][0][t])/2,s[1][1][t]=(this.colors[0][1][t]+this.colors[1][1][t])/2,r[0][0][t]=s[1][0][t],r[0][1][t]=s[1][1][t],r[1][0][t]=this.colors[1][0][t],r[1][1][t]=this.colors[1][1][t];return[new m(t,s),new m(e,r)]}paint(t,e){let s,n=!1;for(let t=0;t&lt;4;++t)if((s=o([this.nodes[0][t],this.nodes[1][t],this.nodes[2][t],this.nodes[3][t]]))&gt;r){n=!0;break}if(n){let s=this.split();s[0].paint(t,e),s[1].paint(t,e)}else{new w([...this.nodes[0]],[...this.colors[0]]).paintCurve(t,e)}}}class b{constructor(t){this.readMesh(t),this.type=t.getAttribute(&quot;type&quot;)||&quot;bilinear&quot;}readMesh(t){let e=[[]],s=[[]],r=Number(t.getAttribute(&quot;x&quot;)),n=Number(t.getAttribute(&quot;y&quot;));e[0][0]=new x(r,n);let o=t.children;for(let t=0,r=o.length;t&lt;r;++t){e[3*t+1]=[],e[3*t+2]=[],e[3*t+3]=[],s[t+1]=[];let r=o[t].children;for(let n=0,o=r.length;n&lt;o;++n){let o=r[n].children;for(let r=0,i=o.length;r&lt;i;++r){let i=r;0!==t&amp;&amp;++i;let h,d=o[r].getAttribute(&quot;path&quot;),c=&quot;l&quot;;null!=d&amp;&amp;(c=(h=d.match(/\s*([lLcC])\s*(.*)/))[1]);let u=l(h[2]);switch(c){case&quot;l&quot;:0===i?(e[3*t][3*n+3]=u[0].add(e[3*t][3*n]),e[3*t][3*n+1]=a(e[3*t][3*n],e[3*t][3*n+3]),e[3*t][3*n+2]=a(e[3*t][3*n+3],e[3*t][3*n])):1===i?(e[3*t+3][3*n+3]=u[0].add(e[3*t][3*n+3]),e[3*t+1][3*n+3]=a(e[3*t][3*n+3],e[3*t+3][3*n+3]),e[3*t+2][3*n+3]=a(e[3*t+3][3*n+3],e[3*t][3*n+3])):2===i?(0===n&amp;&amp;(e[3*t+3][3*n+0]=u[0].add(e[3*t+3][3*n+3])),e[3*t+3][3*n+1]=a(e[3*t+3][3*n],e[3*t+3][3*n+3]),e[3*t+3][3*n+2]=a(e[3*t+3][3*n+3],e[3*t+3][3*n])):(e[3*t+1][3*n]=a(e[3*t][3*n],e[3*t+3][3*n]),e[3*t+2][3*n]=a(e[3*t+3][3*n],e[3*t][3*n]));break;case&quot;L&quot;:0===i?(e[3*t][3*n+3]=u[0],e[3*t][3*n+1]=a(e[3*t][3*n],e[3*t][3*n+3]),e[3*t][3*n+2]=a(e[3*t][3*n+3],e[3*t][3*n])):1===i?(e[3*t+3][3*n+3]=u[0],e[3*t+1][3*n+3]=a(e[3*t][3*n+3],e[3*t+3][3*n+3]),e[3*t+2][3*n+3]=a(e[3*t+3][3*n+3],e[3*t][3*n+3])):2===i?(0===n&amp;&amp;(e[3*t+3][3*n+0]=u[0]),e[3*t+3][3*n+1]=a(e[3*t+3][3*n],e[3*t+3][3*n+3]),e[3*t+3][3*n+2]=a(e[3*t+3][3*n+3],e[3*t+3][3*n])):(e[3*t+1][3*n]=a(e[3*t][3*n],e[3*t+3][3*n]),e[3*t+2][3*n]=a(e[3*t+3][3*n],e[3*t][3*n]));break;case&quot;c&quot;:0===i?(e[3*t][3*n+1]=u[0].add(e[3*t][3*n]),e[3*t][3*n+2]=u[1].add(e[3*t][3*n]),e[3*t][3*n+3]=u[2].add(e[3*t][3*n])):1===i?(e[3*t+1][3*n+3]=u[0].add(e[3*t][3*n+3]),e[3*t+2][3*n+3]=u[1].add(e[3*t][3*n+3]),e[3*t+3][3*n+3]=u[2].add(e[3*t][3*n+3])):2===i?(e[3*t+3][3*n+2]=u[0].add(e[3*t+3][3*n+3]),e[3*t+3][3*n+1]=u[1].add(e[3*t+3][3*n+3]),0===n&amp;&amp;(e[3*t+3][3*n+0]=u[2].add(e[3*t+3][3*n+3]))):(e[3*t+2][3*n]=u[0].add(e[3*t+3][3*n]),e[3*t+1][3*n]=u[1].add(e[3*t+3][3*n]));break;case&quot;C&quot;:0===i?(e[3*t][3*n+1]=u[0],e[3*t][3*n+2]=u[1],e[3*t][3*n+3]=u[2]):1===i?(e[3*t+1][3*n+3]=u[0],e[3*t+2][3*n+3]=u[1],e[3*t+3][3*n+3]=u[2]):2===i?(e[3*t+3][3*n+2]=u[0],e[3*t+3][3*n+1]=u[1],0===n&amp;&amp;(e[3*t+3][3*n+0]=u[2])):(e[3*t+2][3*n]=u[0],e[3*t+1][3*n]=u[1]);break;default:console.error(&quot;mesh.js: &quot;+c+&quot; invalid path type.&quot;)}if(0===t&amp;&amp;0===n||r&gt;0){let e=window.getComputedStyle(o[r]).stopColor.match(/^rgb\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)$/i),a=window.getComputedStyle(o[r]).stopOpacity,h=255;a&amp;&amp;(h=Math.floor(255*a)),e&amp;&amp;(0===i?(s[t][n]=[],s[t][n][0]=Math.floor(e[1]),s[t][n][1]=Math.floor(e[2]),s[t][n][2]=Math.floor(e[3]),s[t][n][3]=h):1===i?(s[t][n+1]=[],s[t][n+1][0]=Math.floor(e[1]),s[t][n+1][1]=Math.floor(e[2]),s[t][n+1][2]=Math.floor(e[3]),s[t][n+1][3]=h):2===i?(s[t+1][n+1]=[],s[t+1][n+1][0]=Math.floor(e[1]),s[t+1][n+1][1]=Math.floor(e[2]),s[t+1][n+1][2]=Math.floor(e[3]),s[t+1][n+1][3]=h):3===i&amp;&amp;(s[t+1][n]=[],s[t+1][n][0]=Math.floor(e[1]),s[t+1][n][1]=Math.floor(e[2]),s[t+1][n][2]=Math.floor(e[3]),s[t+1][n][3]=h))}}e[3*t+1][3*n+1]=new x,e[3*t+1][3*n+2]=new x,e[3*t+2][3*n+1]=new x,e[3*t+2][3*n+2]=new x,e[3*t+1][3*n+1].x=(-4*e[3*t][3*n].x+6*(e[3*t][3*n+1].x+e[3*t+1][3*n].x)+-2*(e[3*t][3*n+3].x+e[3*t+3][3*n].x)+3*(e[3*t+3][3*n+1].x+e[3*t+1][3*n+3].x)+-1*e[3*t+3][3*n+3].x)/9,e[3*t+1][3*n+2].x=(-4*e[3*t][3*n+3].x+6*(e[3*t][3*n+2].x+e[3*t+1][3*n+3].x)+-2*(e[3*t][3*n].x+e[3*t+3][3*n+3].x)+3*(e[3*t+3][3*n+2].x+e[3*t+1][3*n].x)+-1*e[3*t+3][3*n].x)/9,e[3*t+2][3*n+1].x=(-4*e[3*t+3][3*n].x+6*(e[3*t+3][3*n+1].x+e[3*t+2][3*n].x)+-2*(e[3*t+3][3*n+3].x+e[3*t][3*n].x)+3*(e[3*t][3*n+1].x+e[3*t+2][3*n+3].x)+-1*e[3*t][3*n+3].x)/9,e[3*t+2][3*n+2].x=(-4*e[3*t+3][3*n+3].x+6*(e[3*t+3][3*n+2].x+e[3*t+2][3*n+3].x)+-2*(e[3*t+3][3*n].x+e[3*t][3*n+3].x)+3*(e[3*t][3*n+2].x+e[3*t+2][3*n].x)+-1*e[3*t][3*n].x)/9,e[3*t+1][3*n+1].y=(-4*e[3*t][3*n].y+6*(e[3*t][3*n+1].y+e[3*t+1][3*n].y)+-2*(e[3*t][3*n+3].y+e[3*t+3][3*n].y)+3*(e[3*t+3][3*n+1].y+e[3*t+1][3*n+3].y)+-1*e[3*t+3][3*n+3].y)/9,e[3*t+1][3*n+2].y=(-4*e[3*t][3*n+3].y+6*(e[3*t][3*n+2].y+e[3*t+1][3*n+3].y)+-2*(e[3*t][3*n].y+e[3*t+3][3*n+3].y)+3*(e[3*t+3][3*n+2].y+e[3*t+1][3*n].y)+-1*e[3*t+3][3*n].y)/9,e[3*t+2][3*n+1].y=(-4*e[3*t+3][3*n].y+6*(e[3*t+3][3*n+1].y+e[3*t+2][3*n].y)+-2*(e[3*t+3][3*n+3].y+e[3*t][3*n].y)+3*(e[3*t][3*n+1].y+e[3*t+2][3*n+3].y)+-1*e[3*t][3*n+3].y)/9,e[3*t+2][3*n+2].y=(-4*e[3*t+3][3*n+3].y+6*(e[3*t+3][3*n+2].y+e[3*t+2][3*n+3].y)+-2*(e[3*t+3][3*n].y+e[3*t][3*n+3].y)+3*(e[3*t][3*n+2].y+e[3*t+2][3*n].y)+-1*e[3*t][3*n].y)/9}}this.nodes=e,this.colors=s}paintMesh(t,e){let s=(this.nodes.length-1)/3,r=(this.nodes[0].length-1)/3;if(&quot;bilinear&quot;===this.type||s&lt;2||r&lt;2){let n;for(let o=0;o&lt;s;++o)for(let s=0;s&lt;r;++s){let r=[];for(let t=3*o,e=3*o+4;t&lt;e;++t)r.push(this.nodes[t].slice(3*s,3*s+4));let i=[];i.push(this.colors[o].slice(s,s+2)),i.push(this.colors[o+1].slice(s,s+2)),(n=new m(r,i)).paint(t,e)}}else{let n,o,a,h,l,d,u;const x=s,g=r;s++,r++;let w=new Array(s);for(let t=0;t&lt;s;++t){w[t]=new Array(r);for(let e=0;e&lt;r;++e)w[t][e]=[],w[t][e][0]=this.nodes[3*t][3*e],w[t][e][1]=this.colors[t][e]}for(let t=0;t&lt;s;++t)for(let e=0;e&lt;r;++e)0!==t&amp;&amp;t!==x&amp;&amp;(n=i(w[t-1][e][0],w[t][e][0]),o=i(w[t+1][e][0],w[t][e][0]),w[t][e][2]=c(w[t-1][e][1],w[t][e][1],w[t+1][e][1],n,o)),0!==e&amp;&amp;e!==g&amp;&amp;(n=i(w[t][e-1][0],w[t][e][0]),o=i(w[t][e+1][0],w[t][e][0]),w[t][e][3]=c(w[t][e-1][1],w[t][e][1],w[t][e+1][1],n,o));for(let t=0;t&lt;r;++t){w[0][t][2]=[],w[x][t][2]=[];for(let e=0;e&lt;4;++e)n=i(w[1][t][0],w[0][t][0]),o=i(w[x][t][0],w[x-1][t][0]),w[0][t][2][e]=n&gt;0?2*(w[1][t][1][e]-w[0][t][1][e])/n-w[1][t][2][e]:0,w[x][t][2][e]=o&gt;0?2*(w[x][t][1][e]-w[x-1][t][1][e])/o-w[x-1][t][2][e]:0}for(let t=0;t&lt;s;++t){w[t][0][3]=[],w[t][g][3]=[];for(let e=0;e&lt;4;++e)n=i(w[t][1][0],w[t][0][0]),o=i(w[t][g][0],w[t][g-1][0]),w[t][0][3][e]=n&gt;0?2*(w[t][1][1][e]-w[t][0][1][e])/n-w[t][1][3][e]:0,w[t][g][3][e]=o&gt;0?2*(w[t][g][1][e]-w[t][g-1][1][e])/o-w[t][g-1][3][e]:0}for(let s=0;s&lt;x;++s)for(let r=0;r&lt;g;++r){let n=i(w[s][r][0],w[s+1][r][0]),o=i(w[s][r+1][0],w[s+1][r+1][0]),c=i(w[s][r][0],w[s][r+1][0]),x=i(w[s+1][r][0],w[s+1][r+1][0]),g=[[],[],[],[]];for(let t=0;t&lt;4;++t){(d=[])[0]=w[s][r][1][t],d[1]=w[s+1][r][1][t],d[2]=w[s][r+1][1][t],d[3]=w[s+1][r+1][1][t],d[4]=w[s][r][2][t]*n,d[5]=w[s+1][r][2][t]*n,d[6]=w[s][r+1][2][t]*o,d[7]=w[s+1][r+1][2][t]*o,d[8]=w[s][r][3][t]*c,d[9]=w[s+1][r][3][t]*x,d[10]=w[s][r+1][3][t]*c,d[11]=w[s+1][r+1][3][t]*x,d[12]=0,d[13]=0,d[14]=0,d[15]=0,u=f(d);for(let e=0;e&lt;9;++e){g[t][e]=[];for(let s=0;s&lt;9;++s)g[t][e][s]=p(u,e/8,s/8),g[t][e][s]&gt;255?g[t][e][s]=255:g[t][e][s]&lt;0&amp;&amp;(g[t][e][s]=0)}}h=[];for(let t=3*s,e=3*s+4;t&lt;e;++t)h.push(this.nodes[t].slice(3*r,3*r+4));l=y(h);for(let s=0;s&lt;8;++s)for(let r=0;r&lt;8;++r)(a=new m(l[s][r],[[[g[0][s][r],g[1][s][r],g[2][s][r],g[3][s][r]],[g[0][s][r+1],g[1][s][r+1],g[2][s][r+1],g[3][s][r+1]]],[[g[0][s+1][r],g[1][s+1][r],g[2][s+1][r],g[3][s+1][r]],[g[0][s+1][r+1],g[1][s+1][r+1],g[2][s+1][r+1],g[3][s+1][r+1]]]])).paint(t,e)}}}transform(t){if(t instanceof x)for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].add(t);else if(t instanceof g)for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].transform(t)}scale(t){for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].scale(t)}}document.querySelectorAll(&quot;rect,circle,ellipse,path,text&quot;).forEach((r,n)=&gt;{let o=r.getAttribute(&quot;id&quot;);o||(o=&quot;patchjs_shape&quot;+n,r.setAttribute(&quot;id&quot;,o));const i=r.style.fill.match(/^url\(\s*&quot;?\s*#([^\s&quot;]+)&quot;?\s*\)/),a=r.style.stroke.match(/^url\(\s*&quot;?\s*#([^\s&quot;]+)&quot;?\s*\)/);if(i&amp;&amp;i[1]){const a=document.getElementById(i[1]);if(a&amp;&amp;&quot;meshgradient&quot;===a.nodeName){const i=r.getBBox();let l=document.createElementNS(s,&quot;canvas&quot;);d(l,{width:i.width,height:i.height});const c=l.getContext(&quot;2d&quot;);let u=c.createImageData(i.width,i.height);const f=new b(a);&quot;objectBoundingBox&quot;===a.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;f.scale(new x(i.width,i.height));const p=a.getAttribute(&quot;gradientTransform&quot;);null!=p&amp;&amp;f.transform(h(p)),&quot;userSpaceOnUse&quot;===a.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;f.transform(new x(-i.x,-i.y)),f.paintMesh(u.data,l.width),c.putImageData(u,0,0);const y=document.createElementNS(t,&quot;image&quot;);d(y,{width:i.width,height:i.height,x:i.x,y:i.y});let g=l.toDataURL();y.setAttributeNS(e,&quot;xlink:href&quot;,g),r.parentNode.insertBefore(y,r),r.style.fill=&quot;none&quot;;const w=document.createElementNS(t,&quot;use&quot;);w.setAttributeNS(e,&quot;xlink:href&quot;,&quot;#&quot;+o);const m=&quot;patchjs_clip&quot;+n,M=document.createElementNS(t,&quot;clipPath&quot;);M.setAttribute(&quot;id&quot;,m),M.appendChild(w),r.parentElement.insertBefore(M,r),y.setAttribute(&quot;clip-path&quot;,&quot;url(#&quot;+m+&quot;)&quot;),u=null,l=null,g=null}}if(a&amp;&amp;a[1]){const o=document.getElementById(a[1]);if(o&amp;&amp;&quot;meshgradient&quot;===o.nodeName){const i=parseFloat(r.style.strokeWidth.slice(0,-2))*(parseFloat(r.style.strokeMiterlimit)||parseFloat(r.getAttribute(&quot;stroke-miterlimit&quot;))||1),a=r.getBBox(),l=Math.trunc(a.width+i),c=Math.trunc(a.height+i),u=Math.trunc(a.x-i/2),f=Math.trunc(a.y-i/2);let p=document.createElementNS(s,&quot;canvas&quot;);d(p,{width:l,height:c});const y=p.getContext(&quot;2d&quot;);let g=y.createImageData(l,c);const w=new b(o);&quot;objectBoundingBox&quot;===o.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;w.scale(new x(l,c));const m=o.getAttribute(&quot;gradientTransform&quot;);null!=m&amp;&amp;w.transform(h(m)),&quot;userSpaceOnUse&quot;===o.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;w.transform(new x(-u,-f)),w.paintMesh(g.data,p.width),y.putImageData(g,0,0);const M=document.createElementNS(t,&quot;image&quot;);d(M,{width:l,height:c,x:0,y:0});let S=p.toDataURL();M.setAttributeNS(e,&quot;xlink:href&quot;,S);const k=&quot;pattern_clip&quot;+n,A=document.createElementNS(t,&quot;pattern&quot;);d(A,{id:k,patternUnits:&quot;userSpaceOnUse&quot;,width:l,height:c,x:u,y:f}),A.appendChild(M),o.parentNode.appendChild(A),r.style.stroke=&quot;url(#&quot;+k+&quot;)&quot;,g=null,p=null,S=null}}})}();
</script><script
     id="mesh_polyfill-8"
     type="text/javascript">
!function(){const t=&quot;http://www.w3.org/2000/svg&quot;,e=&quot;http://www.w3.org/1999/xlink&quot;,s=&quot;http://www.w3.org/1999/xhtml&quot;,r=2;if(document.createElementNS(t,&quot;meshgradient&quot;).x)return;const n=(t,e,s,r)=&gt;{let n=new x(.5*(e.x+s.x),.5*(e.y+s.y)),o=new x(.5*(t.x+e.x),.5*(t.y+e.y)),i=new x(.5*(s.x+r.x),.5*(s.y+r.y)),a=new x(.5*(n.x+o.x),.5*(n.y+o.y)),h=new x(.5*(n.x+i.x),.5*(n.y+i.y)),l=new x(.5*(a.x+h.x),.5*(a.y+h.y));return[[t,o,a,l],[l,h,i,r]]},o=t=&gt;{let e=t[0].distSquared(t[1]),s=t[2].distSquared(t[3]),r=.25*t[0].distSquared(t[2]),n=.25*t[1].distSquared(t[3]),o=e&gt;s?e:s,i=r&gt;n?r:n;return 18*(o&gt;i?o:i)},i=(t,e)=&gt;Math.sqrt(t.distSquared(e)),a=(t,e)=&gt;t.scale(2/3).add(e.scale(1/3)),h=t=&gt;{let e,s,r,n,o,i,a,h=new g;return t.match(/(\w+\(\s*[^)]+\))+/g).forEach(t=&gt;{let l=t.match(/[\w.-]+/g),d=l.shift();switch(d){case&quot;translate&quot;:2===l.length?e=new g(1,0,0,1,l[0],l[1]):(console.error(&quot;mesh.js: translate does not have 2 arguments!&quot;),e=new g(1,0,0,1,0,0)),h=h.append(e);break;case&quot;scale&quot;:1===l.length?s=new g(l[0],0,0,l[0],0,0):2===l.length?s=new g(l[0],0,0,l[1],0,0):(console.error(&quot;mesh.js: scale does not have 1 or 2 arguments!&quot;),s=new g(1,0,0,1,0,0)),h=h.append(s);break;case&quot;rotate&quot;:if(3===l.length&amp;&amp;(e=new g(1,0,0,1,l[1],l[2]),h=h.append(e)),l[0]){r=l[0]*Math.PI/180;let t=Math.cos(r),e=Math.sin(r);Math.abs(t)&lt;1e-16&amp;&amp;(t=0),Math.abs(e)&lt;1e-16&amp;&amp;(e=0),a=new g(t,e,-e,t,0,0),h=h.append(a)}else console.error(&quot;math.js: No argument to rotate transform!&quot;);3===l.length&amp;&amp;(e=new g(1,0,0,1,-l[1],-l[2]),h=h.append(e));break;case&quot;skewX&quot;:l[0]?(r=l[0]*Math.PI/180,n=Math.tan(r),o=new g(1,0,n,1,0,0),h=h.append(o)):console.error(&quot;math.js: No argument to skewX transform!&quot;);break;case&quot;skewY&quot;:l[0]?(r=l[0]*Math.PI/180,n=Math.tan(r),i=new g(1,n,0,1,0,0),h=h.append(i)):console.error(&quot;math.js: No argument to skewY transform!&quot;);break;case&quot;matrix&quot;:6===l.length?h=h.append(new g(...l)):console.error(&quot;math.js: Incorrect number of arguments for matrix!&quot;);break;default:console.error(&quot;mesh.js: Unhandled transform type: &quot;+d)}}),h},l=t=&gt;{let e=[],s=t.split(/[ ,]+/);for(let t=0,r=s.length-1;t&lt;r;t+=2)e.push(new x(parseFloat(s[t]),parseFloat(s[t+1])));return e},d=(t,e)=&gt;{for(let s in e)t.setAttribute(s,e[s])},c=(t,e,s,r,n)=&gt;{let o,i,a=[0,0,0,0];for(let h=0;h&lt;3;++h)e[h]&lt;t[h]&amp;&amp;e[h]&lt;s[h]||t[h]&lt;e[h]&amp;&amp;s[h]&lt;e[h]?a[h]=0:(a[h]=.5*((e[h]-t[h])/r+(s[h]-e[h])/n),o=Math.abs(3*(e[h]-t[h])/r),i=Math.abs(3*(s[h]-e[h])/n),a[h]&gt;o?a[h]=o:a[h]&gt;i&amp;&amp;(a[h]=i));return a},u=[[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0],[-3,3,0,0,-2,-1,0,0,0,0,0,0,0,0,0,0],[2,-2,0,0,1,1,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0],[0,0,0,0,0,0,0,0,-3,3,0,0,-2,-1,0,0],[0,0,0,0,0,0,0,0,2,-2,0,0,1,1,0,0],[-3,0,3,0,0,0,0,0,-2,0,-1,0,0,0,0,0],[0,0,0,0,-3,0,3,0,0,0,0,0,-2,0,-1,0],[9,-9,-9,9,6,3,-6,-3,6,-6,3,-3,4,2,2,1],[-6,6,6,-6,-3,-3,3,3,-4,4,-2,2,-2,-2,-1,-1],[2,0,-2,0,0,0,0,0,1,0,1,0,0,0,0,0],[0,0,0,0,2,0,-2,0,0,0,0,0,1,0,1,0],[-6,6,6,-6,-4,-2,4,2,-3,3,-3,3,-2,-1,-2,-1],[4,-4,-4,4,2,2,-2,-2,2,-2,2,-2,1,1,1,1]],f=t=&gt;{let e=[];for(let s=0;s&lt;16;++s){e[s]=0;for(let r=0;r&lt;16;++r)e[s]+=u[s][r]*t[r]}return e},p=(t,e,s)=&gt;{const r=e*e,n=s*s,o=e*e*e,i=s*s*s;return t[0]+t[1]*e+t[2]*r+t[3]*o+t[4]*s+t[5]*s*e+t[6]*s*r+t[7]*s*o+t[8]*n+t[9]*n*e+t[10]*n*r+t[11]*n*o+t[12]*i+t[13]*i*e+t[14]*i*r+t[15]*i*o},y=t=&gt;{let e=[],s=[],r=[];for(let s=0;s&lt;4;++s)e[s]=[],e[s][0]=n(t[0][s],t[1][s],t[2][s],t[3][s]),e[s][1]=[],e[s][1].push(...n(...e[s][0][0])),e[s][1].push(...n(...e[s][0][1])),e[s][2]=[],e[s][2].push(...n(...e[s][1][0])),e[s][2].push(...n(...e[s][1][1])),e[s][2].push(...n(...e[s][1][2])),e[s][2].push(...n(...e[s][1][3]));for(let t=0;t&lt;8;++t){s[t]=[];for(let r=0;r&lt;4;++r)s[t][r]=[],s[t][r][0]=n(e[0][2][t][r],e[1][2][t][r],e[2][2][t][r],e[3][2][t][r]),s[t][r][1]=[],s[t][r][1].push(...n(...s[t][r][0][0])),s[t][r][1].push(...n(...s[t][r][0][1])),s[t][r][2]=[],s[t][r][2].push(...n(...s[t][r][1][0])),s[t][r][2].push(...n(...s[t][r][1][1])),s[t][r][2].push(...n(...s[t][r][1][2])),s[t][r][2].push(...n(...s[t][r][1][3]))}for(let t=0;t&lt;8;++t){r[t]=[];for(let e=0;e&lt;8;++e)r[t][e]=[],r[t][e][0]=s[t][0][2][e],r[t][e][1]=s[t][1][2][e],r[t][e][2]=s[t][2][2][e],r[t][e][3]=s[t][3][2][e]}return r};class x{constructor(t,e){this.x=t||0,this.y=e||0}toString(){return`(x=${this.x}, y=${this.y})`}clone(){return new x(this.x,this.y)}add(t){return new x(this.x+t.x,this.y+t.y)}scale(t){return void 0===t.x?new x(this.x*t,this.y*t):new x(this.x*t.x,this.y*t.y)}distSquared(t){let e=this.x-t.x,s=this.y-t.y;return e*e+s*s}transform(t){let e=this.x*t.a+this.y*t.c+t.e,s=this.x*t.b+this.y*t.d+t.f;return new x(e,s)}}class g{constructor(t,e,s,r,n,o){void 0===t?(this.a=1,this.b=0,this.c=0,this.d=1,this.e=0,this.f=0):(this.a=t,this.b=e,this.c=s,this.d=r,this.e=n,this.f=o)}toString(){return`affine: ${this.a} ${this.c} ${this.e} \n       ${this.b} ${this.d} ${this.f}`}append(t){t instanceof g||console.error(&quot;mesh.js: argument to Affine.append is not affine!&quot;);let e=this.a*t.a+this.c*t.b,s=this.b*t.a+this.d*t.b,r=this.a*t.c+this.c*t.d,n=this.b*t.c+this.d*t.d,o=this.a*t.e+this.c*t.f+this.e,i=this.b*t.e+this.d*t.f+this.f;return new g(e,s,r,n,o,i)}}class w{constructor(t,e){this.nodes=t,this.colors=e}paintCurve(t,e){if(o(this.nodes)&gt;r){const s=n(...this.nodes);let r=[[],[]],o=[[],[]];for(let t=0;t&lt;4;++t)r[0][t]=this.colors[0][t],r[1][t]=(this.colors[0][t]+this.colors[1][t])/2,o[0][t]=r[1][t],o[1][t]=this.colors[1][t];let i=new w(s[0],r),a=new w(s[1],o);i.paintCurve(t,e),a.paintCurve(t,e)}else{let s=Math.round(this.nodes[0].x);if(s&gt;=0&amp;&amp;s&lt;e){let r=4*(~~this.nodes[0].y*e+s);t[r]=Math.round(this.colors[0][0]),t[r+1]=Math.round(this.colors[0][1]),t[r+2]=Math.round(this.colors[0][2]),t[r+3]=Math.round(this.colors[0][3])}}}}class m{constructor(t,e){this.nodes=t,this.colors=e}split(){let t=[[],[],[],[]],e=[[],[],[],[]],s=[[[],[]],[[],[]]],r=[[[],[]],[[],[]]];for(let s=0;s&lt;4;++s){const r=n(this.nodes[0][s],this.nodes[1][s],this.nodes[2][s],this.nodes[3][s]);t[0][s]=r[0][0],t[1][s]=r[0][1],t[2][s]=r[0][2],t[3][s]=r[0][3],e[0][s]=r[1][0],e[1][s]=r[1][1],e[2][s]=r[1][2],e[3][s]=r[1][3]}for(let t=0;t&lt;4;++t)s[0][0][t]=this.colors[0][0][t],s[0][1][t]=this.colors[0][1][t],s[1][0][t]=(this.colors[0][0][t]+this.colors[1][0][t])/2,s[1][1][t]=(this.colors[0][1][t]+this.colors[1][1][t])/2,r[0][0][t]=s[1][0][t],r[0][1][t]=s[1][1][t],r[1][0][t]=this.colors[1][0][t],r[1][1][t]=this.colors[1][1][t];return[new m(t,s),new m(e,r)]}paint(t,e){let s,n=!1;for(let t=0;t&lt;4;++t)if((s=o([this.nodes[0][t],this.nodes[1][t],this.nodes[2][t],this.nodes[3][t]]))&gt;r){n=!0;break}if(n){let s=this.split();s[0].paint(t,e),s[1].paint(t,e)}else{new w([...this.nodes[0]],[...this.colors[0]]).paintCurve(t,e)}}}class b{constructor(t){this.readMesh(t),this.type=t.getAttribute(&quot;type&quot;)||&quot;bilinear&quot;}readMesh(t){let e=[[]],s=[[]],r=Number(t.getAttribute(&quot;x&quot;)),n=Number(t.getAttribute(&quot;y&quot;));e[0][0]=new x(r,n);let o=t.children;for(let t=0,r=o.length;t&lt;r;++t){e[3*t+1]=[],e[3*t+2]=[],e[3*t+3]=[],s[t+1]=[];let r=o[t].children;for(let n=0,o=r.length;n&lt;o;++n){let o=r[n].children;for(let r=0,i=o.length;r&lt;i;++r){let i=r;0!==t&amp;&amp;++i;let h,d=o[r].getAttribute(&quot;path&quot;),c=&quot;l&quot;;null!=d&amp;&amp;(c=(h=d.match(/\s*([lLcC])\s*(.*)/))[1]);let u=l(h[2]);switch(c){case&quot;l&quot;:0===i?(e[3*t][3*n+3]=u[0].add(e[3*t][3*n]),e[3*t][3*n+1]=a(e[3*t][3*n],e[3*t][3*n+3]),e[3*t][3*n+2]=a(e[3*t][3*n+3],e[3*t][3*n])):1===i?(e[3*t+3][3*n+3]=u[0].add(e[3*t][3*n+3]),e[3*t+1][3*n+3]=a(e[3*t][3*n+3],e[3*t+3][3*n+3]),e[3*t+2][3*n+3]=a(e[3*t+3][3*n+3],e[3*t][3*n+3])):2===i?(0===n&amp;&amp;(e[3*t+3][3*n+0]=u[0].add(e[3*t+3][3*n+3])),e[3*t+3][3*n+1]=a(e[3*t+3][3*n],e[3*t+3][3*n+3]),e[3*t+3][3*n+2]=a(e[3*t+3][3*n+3],e[3*t+3][3*n])):(e[3*t+1][3*n]=a(e[3*t][3*n],e[3*t+3][3*n]),e[3*t+2][3*n]=a(e[3*t+3][3*n],e[3*t][3*n]));break;case&quot;L&quot;:0===i?(e[3*t][3*n+3]=u[0],e[3*t][3*n+1]=a(e[3*t][3*n],e[3*t][3*n+3]),e[3*t][3*n+2]=a(e[3*t][3*n+3],e[3*t][3*n])):1===i?(e[3*t+3][3*n+3]=u[0],e[3*t+1][3*n+3]=a(e[3*t][3*n+3],e[3*t+3][3*n+3]),e[3*t+2][3*n+3]=a(e[3*t+3][3*n+3],e[3*t][3*n+3])):2===i?(0===n&amp;&amp;(e[3*t+3][3*n+0]=u[0]),e[3*t+3][3*n+1]=a(e[3*t+3][3*n],e[3*t+3][3*n+3]),e[3*t+3][3*n+2]=a(e[3*t+3][3*n+3],e[3*t+3][3*n])):(e[3*t+1][3*n]=a(e[3*t][3*n],e[3*t+3][3*n]),e[3*t+2][3*n]=a(e[3*t+3][3*n],e[3*t][3*n]));break;case&quot;c&quot;:0===i?(e[3*t][3*n+1]=u[0].add(e[3*t][3*n]),e[3*t][3*n+2]=u[1].add(e[3*t][3*n]),e[3*t][3*n+3]=u[2].add(e[3*t][3*n])):1===i?(e[3*t+1][3*n+3]=u[0].add(e[3*t][3*n+3]),e[3*t+2][3*n+3]=u[1].add(e[3*t][3*n+3]),e[3*t+3][3*n+3]=u[2].add(e[3*t][3*n+3])):2===i?(e[3*t+3][3*n+2]=u[0].add(e[3*t+3][3*n+3]),e[3*t+3][3*n+1]=u[1].add(e[3*t+3][3*n+3]),0===n&amp;&amp;(e[3*t+3][3*n+0]=u[2].add(e[3*t+3][3*n+3]))):(e[3*t+2][3*n]=u[0].add(e[3*t+3][3*n]),e[3*t+1][3*n]=u[1].add(e[3*t+3][3*n]));break;case&quot;C&quot;:0===i?(e[3*t][3*n+1]=u[0],e[3*t][3*n+2]=u[1],e[3*t][3*n+3]=u[2]):1===i?(e[3*t+1][3*n+3]=u[0],e[3*t+2][3*n+3]=u[1],e[3*t+3][3*n+3]=u[2]):2===i?(e[3*t+3][3*n+2]=u[0],e[3*t+3][3*n+1]=u[1],0===n&amp;&amp;(e[3*t+3][3*n+0]=u[2])):(e[3*t+2][3*n]=u[0],e[3*t+1][3*n]=u[1]);break;default:console.error(&quot;mesh.js: &quot;+c+&quot; invalid path type.&quot;)}if(0===t&amp;&amp;0===n||r&gt;0){let e=window.getComputedStyle(o[r]).stopColor.match(/^rgb\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)$/i),a=window.getComputedStyle(o[r]).stopOpacity,h=255;a&amp;&amp;(h=Math.floor(255*a)),e&amp;&amp;(0===i?(s[t][n]=[],s[t][n][0]=Math.floor(e[1]),s[t][n][1]=Math.floor(e[2]),s[t][n][2]=Math.floor(e[3]),s[t][n][3]=h):1===i?(s[t][n+1]=[],s[t][n+1][0]=Math.floor(e[1]),s[t][n+1][1]=Math.floor(e[2]),s[t][n+1][2]=Math.floor(e[3]),s[t][n+1][3]=h):2===i?(s[t+1][n+1]=[],s[t+1][n+1][0]=Math.floor(e[1]),s[t+1][n+1][1]=Math.floor(e[2]),s[t+1][n+1][2]=Math.floor(e[3]),s[t+1][n+1][3]=h):3===i&amp;&amp;(s[t+1][n]=[],s[t+1][n][0]=Math.floor(e[1]),s[t+1][n][1]=Math.floor(e[2]),s[t+1][n][2]=Math.floor(e[3]),s[t+1][n][3]=h))}}e[3*t+1][3*n+1]=new x,e[3*t+1][3*n+2]=new x,e[3*t+2][3*n+1]=new x,e[3*t+2][3*n+2]=new x,e[3*t+1][3*n+1].x=(-4*e[3*t][3*n].x+6*(e[3*t][3*n+1].x+e[3*t+1][3*n].x)+-2*(e[3*t][3*n+3].x+e[3*t+3][3*n].x)+3*(e[3*t+3][3*n+1].x+e[3*t+1][3*n+3].x)+-1*e[3*t+3][3*n+3].x)/9,e[3*t+1][3*n+2].x=(-4*e[3*t][3*n+3].x+6*(e[3*t][3*n+2].x+e[3*t+1][3*n+3].x)+-2*(e[3*t][3*n].x+e[3*t+3][3*n+3].x)+3*(e[3*t+3][3*n+2].x+e[3*t+1][3*n].x)+-1*e[3*t+3][3*n].x)/9,e[3*t+2][3*n+1].x=(-4*e[3*t+3][3*n].x+6*(e[3*t+3][3*n+1].x+e[3*t+2][3*n].x)+-2*(e[3*t+3][3*n+3].x+e[3*t][3*n].x)+3*(e[3*t][3*n+1].x+e[3*t+2][3*n+3].x)+-1*e[3*t][3*n+3].x)/9,e[3*t+2][3*n+2].x=(-4*e[3*t+3][3*n+3].x+6*(e[3*t+3][3*n+2].x+e[3*t+2][3*n+3].x)+-2*(e[3*t+3][3*n].x+e[3*t][3*n+3].x)+3*(e[3*t][3*n+2].x+e[3*t+2][3*n].x)+-1*e[3*t][3*n].x)/9,e[3*t+1][3*n+1].y=(-4*e[3*t][3*n].y+6*(e[3*t][3*n+1].y+e[3*t+1][3*n].y)+-2*(e[3*t][3*n+3].y+e[3*t+3][3*n].y)+3*(e[3*t+3][3*n+1].y+e[3*t+1][3*n+3].y)+-1*e[3*t+3][3*n+3].y)/9,e[3*t+1][3*n+2].y=(-4*e[3*t][3*n+3].y+6*(e[3*t][3*n+2].y+e[3*t+1][3*n+3].y)+-2*(e[3*t][3*n].y+e[3*t+3][3*n+3].y)+3*(e[3*t+3][3*n+2].y+e[3*t+1][3*n].y)+-1*e[3*t+3][3*n].y)/9,e[3*t+2][3*n+1].y=(-4*e[3*t+3][3*n].y+6*(e[3*t+3][3*n+1].y+e[3*t+2][3*n].y)+-2*(e[3*t+3][3*n+3].y+e[3*t][3*n].y)+3*(e[3*t][3*n+1].y+e[3*t+2][3*n+3].y)+-1*e[3*t][3*n+3].y)/9,e[3*t+2][3*n+2].y=(-4*e[3*t+3][3*n+3].y+6*(e[3*t+3][3*n+2].y+e[3*t+2][3*n+3].y)+-2*(e[3*t+3][3*n].y+e[3*t][3*n+3].y)+3*(e[3*t][3*n+2].y+e[3*t+2][3*n].y)+-1*e[3*t][3*n].y)/9}}this.nodes=e,this.colors=s}paintMesh(t,e){let s=(this.nodes.length-1)/3,r=(this.nodes[0].length-1)/3;if(&quot;bilinear&quot;===this.type||s&lt;2||r&lt;2){let n;for(let o=0;o&lt;s;++o)for(let s=0;s&lt;r;++s){let r=[];for(let t=3*o,e=3*o+4;t&lt;e;++t)r.push(this.nodes[t].slice(3*s,3*s+4));let i=[];i.push(this.colors[o].slice(s,s+2)),i.push(this.colors[o+1].slice(s,s+2)),(n=new m(r,i)).paint(t,e)}}else{let n,o,a,h,l,d,u;const x=s,g=r;s++,r++;let w=new Array(s);for(let t=0;t&lt;s;++t){w[t]=new Array(r);for(let e=0;e&lt;r;++e)w[t][e]=[],w[t][e][0]=this.nodes[3*t][3*e],w[t][e][1]=this.colors[t][e]}for(let t=0;t&lt;s;++t)for(let e=0;e&lt;r;++e)0!==t&amp;&amp;t!==x&amp;&amp;(n=i(w[t-1][e][0],w[t][e][0]),o=i(w[t+1][e][0],w[t][e][0]),w[t][e][2]=c(w[t-1][e][1],w[t][e][1],w[t+1][e][1],n,o)),0!==e&amp;&amp;e!==g&amp;&amp;(n=i(w[t][e-1][0],w[t][e][0]),o=i(w[t][e+1][0],w[t][e][0]),w[t][e][3]=c(w[t][e-1][1],w[t][e][1],w[t][e+1][1],n,o));for(let t=0;t&lt;r;++t){w[0][t][2]=[],w[x][t][2]=[];for(let e=0;e&lt;4;++e)n=i(w[1][t][0],w[0][t][0]),o=i(w[x][t][0],w[x-1][t][0]),w[0][t][2][e]=n&gt;0?2*(w[1][t][1][e]-w[0][t][1][e])/n-w[1][t][2][e]:0,w[x][t][2][e]=o&gt;0?2*(w[x][t][1][e]-w[x-1][t][1][e])/o-w[x-1][t][2][e]:0}for(let t=0;t&lt;s;++t){w[t][0][3]=[],w[t][g][3]=[];for(let e=0;e&lt;4;++e)n=i(w[t][1][0],w[t][0][0]),o=i(w[t][g][0],w[t][g-1][0]),w[t][0][3][e]=n&gt;0?2*(w[t][1][1][e]-w[t][0][1][e])/n-w[t][1][3][e]:0,w[t][g][3][e]=o&gt;0?2*(w[t][g][1][e]-w[t][g-1][1][e])/o-w[t][g-1][3][e]:0}for(let s=0;s&lt;x;++s)for(let r=0;r&lt;g;++r){let n=i(w[s][r][0],w[s+1][r][0]),o=i(w[s][r+1][0],w[s+1][r+1][0]),c=i(w[s][r][0],w[s][r+1][0]),x=i(w[s+1][r][0],w[s+1][r+1][0]),g=[[],[],[],[]];for(let t=0;t&lt;4;++t){(d=[])[0]=w[s][r][1][t],d[1]=w[s+1][r][1][t],d[2]=w[s][r+1][1][t],d[3]=w[s+1][r+1][1][t],d[4]=w[s][r][2][t]*n,d[5]=w[s+1][r][2][t]*n,d[6]=w[s][r+1][2][t]*o,d[7]=w[s+1][r+1][2][t]*o,d[8]=w[s][r][3][t]*c,d[9]=w[s+1][r][3][t]*x,d[10]=w[s][r+1][3][t]*c,d[11]=w[s+1][r+1][3][t]*x,d[12]=0,d[13]=0,d[14]=0,d[15]=0,u=f(d);for(let e=0;e&lt;9;++e){g[t][e]=[];for(let s=0;s&lt;9;++s)g[t][e][s]=p(u,e/8,s/8),g[t][e][s]&gt;255?g[t][e][s]=255:g[t][e][s]&lt;0&amp;&amp;(g[t][e][s]=0)}}h=[];for(let t=3*s,e=3*s+4;t&lt;e;++t)h.push(this.nodes[t].slice(3*r,3*r+4));l=y(h);for(let s=0;s&lt;8;++s)for(let r=0;r&lt;8;++r)(a=new m(l[s][r],[[[g[0][s][r],g[1][s][r],g[2][s][r],g[3][s][r]],[g[0][s][r+1],g[1][s][r+1],g[2][s][r+1],g[3][s][r+1]]],[[g[0][s+1][r],g[1][s+1][r],g[2][s+1][r],g[3][s+1][r]],[g[0][s+1][r+1],g[1][s+1][r+1],g[2][s+1][r+1],g[3][s+1][r+1]]]])).paint(t,e)}}}transform(t){if(t instanceof x)for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].add(t);else if(t instanceof g)for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].transform(t)}scale(t){for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].scale(t)}}document.querySelectorAll(&quot;rect,circle,ellipse,path,text&quot;).forEach((r,n)=&gt;{let o=r.getAttribute(&quot;id&quot;);o||(o=&quot;patchjs_shape&quot;+n,r.setAttribute(&quot;id&quot;,o));const i=r.style.fill.match(/^url\(\s*&quot;?\s*#([^\s&quot;]+)&quot;?\s*\)/),a=r.style.stroke.match(/^url\(\s*&quot;?\s*#([^\s&quot;]+)&quot;?\s*\)/);if(i&amp;&amp;i[1]){const a=document.getElementById(i[1]);if(a&amp;&amp;&quot;meshgradient&quot;===a.nodeName){const i=r.getBBox();let l=document.createElementNS(s,&quot;canvas&quot;);d(l,{width:i.width,height:i.height});const c=l.getContext(&quot;2d&quot;);let u=c.createImageData(i.width,i.height);const f=new b(a);&quot;objectBoundingBox&quot;===a.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;f.scale(new x(i.width,i.height));const p=a.getAttribute(&quot;gradientTransform&quot;);null!=p&amp;&amp;f.transform(h(p)),&quot;userSpaceOnUse&quot;===a.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;f.transform(new x(-i.x,-i.y)),f.paintMesh(u.data,l.width),c.putImageData(u,0,0);const y=document.createElementNS(t,&quot;image&quot;);d(y,{width:i.width,height:i.height,x:i.x,y:i.y});let g=l.toDataURL();y.setAttributeNS(e,&quot;xlink:href&quot;,g),r.parentNode.insertBefore(y,r),r.style.fill=&quot;none&quot;;const w=document.createElementNS(t,&quot;use&quot;);w.setAttributeNS(e,&quot;xlink:href&quot;,&quot;#&quot;+o);const m=&quot;patchjs_clip&quot;+n,M=document.createElementNS(t,&quot;clipPath&quot;);M.setAttribute(&quot;id&quot;,m),M.appendChild(w),r.parentElement.insertBefore(M,r),y.setAttribute(&quot;clip-path&quot;,&quot;url(#&quot;+m+&quot;)&quot;),u=null,l=null,g=null}}if(a&amp;&amp;a[1]){const o=document.getElementById(a[1]);if(o&amp;&amp;&quot;meshgradient&quot;===o.nodeName){const i=parseFloat(r.style.strokeWidth.slice(0,-2))*(parseFloat(r.style.strokeMiterlimit)||parseFloat(r.getAttribute(&quot;stroke-miterlimit&quot;))||1),a=r.getBBox(),l=Math.trunc(a.width+i),c=Math.trunc(a.height+i),u=Math.trunc(a.x-i/2),f=Math.trunc(a.y-i/2);let p=document.createElementNS(s,&quot;canvas&quot;);d(p,{width:l,height:c});const y=p.getContext(&quot;2d&quot;);let g=y.createImageData(l,c);const w=new b(o);&quot;objectBoundingBox&quot;===o.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;w.scale(new x(l,c));const m=o.getAttribute(&quot;gradientTransform&quot;);null!=m&amp;&amp;w.transform(h(m)),&quot;userSpaceOnUse&quot;===o.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;w.transform(new x(-u,-f)),w.paintMesh(g.data,p.width),y.putImageData(g,0,0);const M=document.createElementNS(t,&quot;image&quot;);d(M,{width:l,height:c,x:0,y:0});let S=p.toDataURL();M.setAttributeNS(e,&quot;xlink:href&quot;,S);const k=&quot;pattern_clip&quot;+n,A=document.createElementNS(t,&quot;pattern&quot;);d(A,{id:k,patternUnits:&quot;userSpaceOnUse&quot;,width:l,height:c,x:u,y:f}),A.appendChild(M),o.parentNode.appendChild(A),r.style.stroke=&quot;url(#&quot;+k+&quot;)&quot;,g=null,p=null,S=null}}})}();
</script><script
     id="script36975"
     type="text/javascript">
!function(){const t=&quot;http://www.w3.org/2000/svg&quot;,e=&quot;http://www.w3.org/1999/xlink&quot;,s=&quot;http://www.w3.org/1999/xhtml&quot;,r=2;if(document.createElementNS(t,&quot;meshgradient&quot;).x)return;const n=(t,e,s,r)=&gt;{let n=new x(.5*(e.x+s.x),.5*(e.y+s.y)),o=new x(.5*(t.x+e.x),.5*(t.y+e.y)),i=new x(.5*(s.x+r.x),.5*(s.y+r.y)),a=new x(.5*(n.x+o.x),.5*(n.y+o.y)),h=new x(.5*(n.x+i.x),.5*(n.y+i.y)),l=new x(.5*(a.x+h.x),.5*(a.y+h.y));return[[t,o,a,l],[l,h,i,r]]},o=t=&gt;{let e=t[0].distSquared(t[1]),s=t[2].distSquared(t[3]),r=.25*t[0].distSquared(t[2]),n=.25*t[1].distSquared(t[3]),o=e&gt;s?e:s,i=r&gt;n?r:n;return 18*(o&gt;i?o:i)},i=(t,e)=&gt;Math.sqrt(t.distSquared(e)),a=(t,e)=&gt;t.scale(2/3).add(e.scale(1/3)),h=t=&gt;{let e,s,r,n,o,i,a,h=new g;return t.match(/(\w+\(\s*[^)]+\))+/g).forEach(t=&gt;{let l=t.match(/[\w.-]+/g),d=l.shift();switch(d){case&quot;translate&quot;:2===l.length?e=new g(1,0,0,1,l[0],l[1]):(console.error(&quot;mesh.js: translate does not have 2 arguments!&quot;),e=new g(1,0,0,1,0,0)),h=h.append(e);break;case&quot;scale&quot;:1===l.length?s=new g(l[0],0,0,l[0],0,0):2===l.length?s=new g(l[0],0,0,l[1],0,0):(console.error(&quot;mesh.js: scale does not have 1 or 2 arguments!&quot;),s=new g(1,0,0,1,0,0)),h=h.append(s);break;case&quot;rotate&quot;:if(3===l.length&amp;&amp;(e=new g(1,0,0,1,l[1],l[2]),h=h.append(e)),l[0]){r=l[0]*Math.PI/180;let t=Math.cos(r),e=Math.sin(r);Math.abs(t)&lt;1e-16&amp;&amp;(t=0),Math.abs(e)&lt;1e-16&amp;&amp;(e=0),a=new g(t,e,-e,t,0,0),h=h.append(a)}else console.error(&quot;math.js: No argument to rotate transform!&quot;);3===l.length&amp;&amp;(e=new g(1,0,0,1,-l[1],-l[2]),h=h.append(e));break;case&quot;skewX&quot;:l[0]?(r=l[0]*Math.PI/180,n=Math.tan(r),o=new g(1,0,n,1,0,0),h=h.append(o)):console.error(&quot;math.js: No argument to skewX transform!&quot;);break;case&quot;skewY&quot;:l[0]?(r=l[0]*Math.PI/180,n=Math.tan(r),i=new g(1,n,0,1,0,0),h=h.append(i)):console.error(&quot;math.js: No argument to skewY transform!&quot;);break;case&quot;matrix&quot;:6===l.length?h=h.append(new g(...l)):console.error(&quot;math.js: Incorrect number of arguments for matrix!&quot;);break;default:console.error(&quot;mesh.js: Unhandled transform type: &quot;+d)}}),h},l=t=&gt;{let e=[],s=t.split(/[ ,]+/);for(let t=0,r=s.length-1;t&lt;r;t+=2)e.push(new x(parseFloat(s[t]),parseFloat(s[t+1])));return e},d=(t,e)=&gt;{for(let s in e)t.setAttribute(s,e[s])},c=(t,e,s,r,n)=&gt;{let o,i,a=[0,0,0,0];for(let h=0;h&lt;3;++h)e[h]&lt;t[h]&amp;&amp;e[h]&lt;s[h]||t[h]&lt;e[h]&amp;&amp;s[h]&lt;e[h]?a[h]=0:(a[h]=.5*((e[h]-t[h])/r+(s[h]-e[h])/n),o=Math.abs(3*(e[h]-t[h])/r),i=Math.abs(3*(s[h]-e[h])/n),a[h]&gt;o?a[h]=o:a[h]&gt;i&amp;&amp;(a[h]=i));return a},u=[[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0],[-3,3,0,0,-2,-1,0,0,0,0,0,0,0,0,0,0],[2,-2,0,0,1,1,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0],[0,0,0,0,0,0,0,0,-3,3,0,0,-2,-1,0,0],[0,0,0,0,0,0,0,0,2,-2,0,0,1,1,0,0],[-3,0,3,0,0,0,0,0,-2,0,-1,0,0,0,0,0],[0,0,0,0,-3,0,3,0,0,0,0,0,-2,0,-1,0],[9,-9,-9,9,6,3,-6,-3,6,-6,3,-3,4,2,2,1],[-6,6,6,-6,-3,-3,3,3,-4,4,-2,2,-2,-2,-1,-1],[2,0,-2,0,0,0,0,0,1,0,1,0,0,0,0,0],[0,0,0,0,2,0,-2,0,0,0,0,0,1,0,1,0],[-6,6,6,-6,-4,-2,4,2,-3,3,-3,3,-2,-1,-2,-1],[4,-4,-4,4,2,2,-2,-2,2,-2,2,-2,1,1,1,1]],f=t=&gt;{let e=[];for(let s=0;s&lt;16;++s){e[s]=0;for(let r=0;r&lt;16;++r)e[s]+=u[s][r]*t[r]}return e},p=(t,e,s)=&gt;{const r=e*e,n=s*s,o=e*e*e,i=s*s*s;return t[0]+t[1]*e+t[2]*r+t[3]*o+t[4]*s+t[5]*s*e+t[6]*s*r+t[7]*s*o+t[8]*n+t[9]*n*e+t[10]*n*r+t[11]*n*o+t[12]*i+t[13]*i*e+t[14]*i*r+t[15]*i*o},y=t=&gt;{let e=[],s=[],r=[];for(let s=0;s&lt;4;++s)e[s]=[],e[s][0]=n(t[0][s],t[1][s],t[2][s],t[3][s]),e[s][1]=[],e[s][1].push(...n(...e[s][0][0])),e[s][1].push(...n(...e[s][0][1])),e[s][2]=[],e[s][2].push(...n(...e[s][1][0])),e[s][2].push(...n(...e[s][1][1])),e[s][2].push(...n(...e[s][1][2])),e[s][2].push(...n(...e[s][1][3]));for(let t=0;t&lt;8;++t){s[t]=[];for(let r=0;r&lt;4;++r)s[t][r]=[],s[t][r][0]=n(e[0][2][t][r],e[1][2][t][r],e[2][2][t][r],e[3][2][t][r]),s[t][r][1]=[],s[t][r][1].push(...n(...s[t][r][0][0])),s[t][r][1].push(...n(...s[t][r][0][1])),s[t][r][2]=[],s[t][r][2].push(...n(...s[t][r][1][0])),s[t][r][2].push(...n(...s[t][r][1][1])),s[t][r][2].push(...n(...s[t][r][1][2])),s[t][r][2].push(...n(...s[t][r][1][3]))}for(let t=0;t&lt;8;++t){r[t]=[];for(let e=0;e&lt;8;++e)r[t][e]=[],r[t][e][0]=s[t][0][2][e],r[t][e][1]=s[t][1][2][e],r[t][e][2]=s[t][2][2][e],r[t][e][3]=s[t][3][2][e]}return r};class x{constructor(t,e){this.x=t||0,this.y=e||0}toString(){return`(x=${this.x}, y=${this.y})`}clone(){return new x(this.x,this.y)}add(t){return new x(this.x+t.x,this.y+t.y)}scale(t){return void 0===t.x?new x(this.x*t,this.y*t):new x(this.x*t.x,this.y*t.y)}distSquared(t){let e=this.x-t.x,s=this.y-t.y;return e*e+s*s}transform(t){let e=this.x*t.a+this.y*t.c+t.e,s=this.x*t.b+this.y*t.d+t.f;return new x(e,s)}}class g{constructor(t,e,s,r,n,o){void 0===t?(this.a=1,this.b=0,this.c=0,this.d=1,this.e=0,this.f=0):(this.a=t,this.b=e,this.c=s,this.d=r,this.e=n,this.f=o)}toString(){return`affine: ${this.a} ${this.c} ${this.e} \n       ${this.b} ${this.d} ${this.f}`}append(t){t instanceof g||console.error(&quot;mesh.js: argument to Affine.append is not affine!&quot;);let e=this.a*t.a+this.c*t.b,s=this.b*t.a+this.d*t.b,r=this.a*t.c+this.c*t.d,n=this.b*t.c+this.d*t.d,o=this.a*t.e+this.c*t.f+this.e,i=this.b*t.e+this.d*t.f+this.f;return new g(e,s,r,n,o,i)}}class w{constructor(t,e){this.nodes=t,this.colors=e}paintCurve(t,e){if(o(this.nodes)&gt;r){const s=n(...this.nodes);let r=[[],[]],o=[[],[]];for(let t=0;t&lt;4;++t)r[0][t]=this.colors[0][t],r[1][t]=(this.colors[0][t]+this.colors[1][t])/2,o[0][t]=r[1][t],o[1][t]=this.colors[1][t];let i=new w(s[0],r),a=new w(s[1],o);i.paintCurve(t,e),a.paintCurve(t,e)}else{let s=Math.round(this.nodes[0].x);if(s&gt;=0&amp;&amp;s&lt;e){let r=4*(~~this.nodes[0].y*e+s);t[r]=Math.round(this.colors[0][0]),t[r+1]=Math.round(this.colors[0][1]),t[r+2]=Math.round(this.colors[0][2]),t[r+3]=Math.round(this.colors[0][3])}}}}class m{constructor(t,e){this.nodes=t,this.colors=e}split(){let t=[[],[],[],[]],e=[[],[],[],[]],s=[[[],[]],[[],[]]],r=[[[],[]],[[],[]]];for(let s=0;s&lt;4;++s){const r=n(this.nodes[0][s],this.nodes[1][s],this.nodes[2][s],this.nodes[3][s]);t[0][s]=r[0][0],t[1][s]=r[0][1],t[2][s]=r[0][2],t[3][s]=r[0][3],e[0][s]=r[1][0],e[1][s]=r[1][1],e[2][s]=r[1][2],e[3][s]=r[1][3]}for(let t=0;t&lt;4;++t)s[0][0][t]=this.colors[0][0][t],s[0][1][t]=this.colors[0][1][t],s[1][0][t]=(this.colors[0][0][t]+this.colors[1][0][t])/2,s[1][1][t]=(this.colors[0][1][t]+this.colors[1][1][t])/2,r[0][0][t]=s[1][0][t],r[0][1][t]=s[1][1][t],r[1][0][t]=this.colors[1][0][t],r[1][1][t]=this.colors[1][1][t];return[new m(t,s),new m(e,r)]}paint(t,e){let s,n=!1;for(let t=0;t&lt;4;++t)if((s=o([this.nodes[0][t],this.nodes[1][t],this.nodes[2][t],this.nodes[3][t]]))&gt;r){n=!0;break}if(n){let s=this.split();s[0].paint(t,e),s[1].paint(t,e)}else{new w([...this.nodes[0]],[...this.colors[0]]).paintCurve(t,e)}}}class b{constructor(t){this.readMesh(t),this.type=t.getAttribute(&quot;type&quot;)||&quot;bilinear&quot;}readMesh(t){let e=[[]],s=[[]],r=Number(t.getAttribute(&quot;x&quot;)),n=Number(t.getAttribute(&quot;y&quot;));e[0][0]=new x(r,n);let o=t.children;for(let t=0,r=o.length;t&lt;r;++t){e[3*t+1]=[],e[3*t+2]=[],e[3*t+3]=[],s[t+1]=[];let r=o[t].children;for(let n=0,o=r.length;n&lt;o;++n){let o=r[n].children;for(let r=0,i=o.length;r&lt;i;++r){let i=r;0!==t&amp;&amp;++i;let h,d=o[r].getAttribute(&quot;path&quot;),c=&quot;l&quot;;null!=d&amp;&amp;(c=(h=d.match(/\s*([lLcC])\s*(.*)/))[1]);let u=l(h[2]);switch(c){case&quot;l&quot;:0===i?(e[3*t][3*n+3]=u[0].add(e[3*t][3*n]),e[3*t][3*n+1]=a(e[3*t][3*n],e[3*t][3*n+3]),e[3*t][3*n+2]=a(e[3*t][3*n+3],e[3*t][3*n])):1===i?(e[3*t+3][3*n+3]=u[0].add(e[3*t][3*n+3]),e[3*t+1][3*n+3]=a(e[3*t][3*n+3],e[3*t+3][3*n+3]),e[3*t+2][3*n+3]=a(e[3*t+3][3*n+3],e[3*t][3*n+3])):2===i?(0===n&amp;&amp;(e[3*t+3][3*n+0]=u[0].add(e[3*t+3][3*n+3])),e[3*t+3][3*n+1]=a(e[3*t+3][3*n],e[3*t+3][3*n+3]),e[3*t+3][3*n+2]=a(e[3*t+3][3*n+3],e[3*t+3][3*n])):(e[3*t+1][3*n]=a(e[3*t][3*n],e[3*t+3][3*n]),e[3*t+2][3*n]=a(e[3*t+3][3*n],e[3*t][3*n]));break;case&quot;L&quot;:0===i?(e[3*t][3*n+3]=u[0],e[3*t][3*n+1]=a(e[3*t][3*n],e[3*t][3*n+3]),e[3*t][3*n+2]=a(e[3*t][3*n+3],e[3*t][3*n])):1===i?(e[3*t+3][3*n+3]=u[0],e[3*t+1][3*n+3]=a(e[3*t][3*n+3],e[3*t+3][3*n+3]),e[3*t+2][3*n+3]=a(e[3*t+3][3*n+3],e[3*t][3*n+3])):2===i?(0===n&amp;&amp;(e[3*t+3][3*n+0]=u[0]),e[3*t+3][3*n+1]=a(e[3*t+3][3*n],e[3*t+3][3*n+3]),e[3*t+3][3*n+2]=a(e[3*t+3][3*n+3],e[3*t+3][3*n])):(e[3*t+1][3*n]=a(e[3*t][3*n],e[3*t+3][3*n]),e[3*t+2][3*n]=a(e[3*t+3][3*n],e[3*t][3*n]));break;case&quot;c&quot;:0===i?(e[3*t][3*n+1]=u[0].add(e[3*t][3*n]),e[3*t][3*n+2]=u[1].add(e[3*t][3*n]),e[3*t][3*n+3]=u[2].add(e[3*t][3*n])):1===i?(e[3*t+1][3*n+3]=u[0].add(e[3*t][3*n+3]),e[3*t+2][3*n+3]=u[1].add(e[3*t][3*n+3]),e[3*t+3][3*n+3]=u[2].add(e[3*t][3*n+3])):2===i?(e[3*t+3][3*n+2]=u[0].add(e[3*t+3][3*n+3]),e[3*t+3][3*n+1]=u[1].add(e[3*t+3][3*n+3]),0===n&amp;&amp;(e[3*t+3][3*n+0]=u[2].add(e[3*t+3][3*n+3]))):(e[3*t+2][3*n]=u[0].add(e[3*t+3][3*n]),e[3*t+1][3*n]=u[1].add(e[3*t+3][3*n]));break;case&quot;C&quot;:0===i?(e[3*t][3*n+1]=u[0],e[3*t][3*n+2]=u[1],e[3*t][3*n+3]=u[2]):1===i?(e[3*t+1][3*n+3]=u[0],e[3*t+2][3*n+3]=u[1],e[3*t+3][3*n+3]=u[2]):2===i?(e[3*t+3][3*n+2]=u[0],e[3*t+3][3*n+1]=u[1],0===n&amp;&amp;(e[3*t+3][3*n+0]=u[2])):(e[3*t+2][3*n]=u[0],e[3*t+1][3*n]=u[1]);break;default:console.error(&quot;mesh.js: &quot;+c+&quot; invalid path type.&quot;)}if(0===t&amp;&amp;0===n||r&gt;0){let e=window.getComputedStyle(o[r]).stopColor.match(/^rgb\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)$/i),a=window.getComputedStyle(o[r]).stopOpacity,h=255;a&amp;&amp;(h=Math.floor(255*a)),e&amp;&amp;(0===i?(s[t][n]=[],s[t][n][0]=Math.floor(e[1]),s[t][n][1]=Math.floor(e[2]),s[t][n][2]=Math.floor(e[3]),s[t][n][3]=h):1===i?(s[t][n+1]=[],s[t][n+1][0]=Math.floor(e[1]),s[t][n+1][1]=Math.floor(e[2]),s[t][n+1][2]=Math.floor(e[3]),s[t][n+1][3]=h):2===i?(s[t+1][n+1]=[],s[t+1][n+1][0]=Math.floor(e[1]),s[t+1][n+1][1]=Math.floor(e[2]),s[t+1][n+1][2]=Math.floor(e[3]),s[t+1][n+1][3]=h):3===i&amp;&amp;(s[t+1][n]=[],s[t+1][n][0]=Math.floor(e[1]),s[t+1][n][1]=Math.floor(e[2]),s[t+1][n][2]=Math.floor(e[3]),s[t+1][n][3]=h))}}e[3*t+1][3*n+1]=new x,e[3*t+1][3*n+2]=new x,e[3*t+2][3*n+1]=new x,e[3*t+2][3*n+2]=new x,e[3*t+1][3*n+1].x=(-4*e[3*t][3*n].x+6*(e[3*t][3*n+1].x+e[3*t+1][3*n].x)+-2*(e[3*t][3*n+3].x+e[3*t+3][3*n].x)+3*(e[3*t+3][3*n+1].x+e[3*t+1][3*n+3].x)+-1*e[3*t+3][3*n+3].x)/9,e[3*t+1][3*n+2].x=(-4*e[3*t][3*n+3].x+6*(e[3*t][3*n+2].x+e[3*t+1][3*n+3].x)+-2*(e[3*t][3*n].x+e[3*t+3][3*n+3].x)+3*(e[3*t+3][3*n+2].x+e[3*t+1][3*n].x)+-1*e[3*t+3][3*n].x)/9,e[3*t+2][3*n+1].x=(-4*e[3*t+3][3*n].x+6*(e[3*t+3][3*n+1].x+e[3*t+2][3*n].x)+-2*(e[3*t+3][3*n+3].x+e[3*t][3*n].x)+3*(e[3*t][3*n+1].x+e[3*t+2][3*n+3].x)+-1*e[3*t][3*n+3].x)/9,e[3*t+2][3*n+2].x=(-4*e[3*t+3][3*n+3].x+6*(e[3*t+3][3*n+2].x+e[3*t+2][3*n+3].x)+-2*(e[3*t+3][3*n].x+e[3*t][3*n+3].x)+3*(e[3*t][3*n+2].x+e[3*t+2][3*n].x)+-1*e[3*t][3*n].x)/9,e[3*t+1][3*n+1].y=(-4*e[3*t][3*n].y+6*(e[3*t][3*n+1].y+e[3*t+1][3*n].y)+-2*(e[3*t][3*n+3].y+e[3*t+3][3*n].y)+3*(e[3*t+3][3*n+1].y+e[3*t+1][3*n+3].y)+-1*e[3*t+3][3*n+3].y)/9,e[3*t+1][3*n+2].y=(-4*e[3*t][3*n+3].y+6*(e[3*t][3*n+2].y+e[3*t+1][3*n+3].y)+-2*(e[3*t][3*n].y+e[3*t+3][3*n+3].y)+3*(e[3*t+3][3*n+2].y+e[3*t+1][3*n].y)+-1*e[3*t+3][3*n].y)/9,e[3*t+2][3*n+1].y=(-4*e[3*t+3][3*n].y+6*(e[3*t+3][3*n+1].y+e[3*t+2][3*n].y)+-2*(e[3*t+3][3*n+3].y+e[3*t][3*n].y)+3*(e[3*t][3*n+1].y+e[3*t+2][3*n+3].y)+-1*e[3*t][3*n+3].y)/9,e[3*t+2][3*n+2].y=(-4*e[3*t+3][3*n+3].y+6*(e[3*t+3][3*n+2].y+e[3*t+2][3*n+3].y)+-2*(e[3*t+3][3*n].y+e[3*t][3*n+3].y)+3*(e[3*t][3*n+2].y+e[3*t+2][3*n].y)+-1*e[3*t][3*n].y)/9}}this.nodes=e,this.colors=s}paintMesh(t,e){let s=(this.nodes.length-1)/3,r=(this.nodes[0].length-1)/3;if(&quot;bilinear&quot;===this.type||s&lt;2||r&lt;2){let n;for(let o=0;o&lt;s;++o)for(let s=0;s&lt;r;++s){let r=[];for(let t=3*o,e=3*o+4;t&lt;e;++t)r.push(this.nodes[t].slice(3*s,3*s+4));let i=[];i.push(this.colors[o].slice(s,s+2)),i.push(this.colors[o+1].slice(s,s+2)),(n=new m(r,i)).paint(t,e)}}else{let n,o,a,h,l,d,u;const x=s,g=r;s++,r++;let w=new Array(s);for(let t=0;t&lt;s;++t){w[t]=new Array(r);for(let e=0;e&lt;r;++e)w[t][e]=[],w[t][e][0]=this.nodes[3*t][3*e],w[t][e][1]=this.colors[t][e]}for(let t=0;t&lt;s;++t)for(let e=0;e&lt;r;++e)0!==t&amp;&amp;t!==x&amp;&amp;(n=i(w[t-1][e][0],w[t][e][0]),o=i(w[t+1][e][0],w[t][e][0]),w[t][e][2]=c(w[t-1][e][1],w[t][e][1],w[t+1][e][1],n,o)),0!==e&amp;&amp;e!==g&amp;&amp;(n=i(w[t][e-1][0],w[t][e][0]),o=i(w[t][e+1][0],w[t][e][0]),w[t][e][3]=c(w[t][e-1][1],w[t][e][1],w[t][e+1][1],n,o));for(let t=0;t&lt;r;++t){w[0][t][2]=[],w[x][t][2]=[];for(let e=0;e&lt;4;++e)n=i(w[1][t][0],w[0][t][0]),o=i(w[x][t][0],w[x-1][t][0]),w[0][t][2][e]=n&gt;0?2*(w[1][t][1][e]-w[0][t][1][e])/n-w[1][t][2][e]:0,w[x][t][2][e]=o&gt;0?2*(w[x][t][1][e]-w[x-1][t][1][e])/o-w[x-1][t][2][e]:0}for(let t=0;t&lt;s;++t){w[t][0][3]=[],w[t][g][3]=[];for(let e=0;e&lt;4;++e)n=i(w[t][1][0],w[t][0][0]),o=i(w[t][g][0],w[t][g-1][0]),w[t][0][3][e]=n&gt;0?2*(w[t][1][1][e]-w[t][0][1][e])/n-w[t][1][3][e]:0,w[t][g][3][e]=o&gt;0?2*(w[t][g][1][e]-w[t][g-1][1][e])/o-w[t][g-1][3][e]:0}for(let s=0;s&lt;x;++s)for(let r=0;r&lt;g;++r){let n=i(w[s][r][0],w[s+1][r][0]),o=i(w[s][r+1][0],w[s+1][r+1][0]),c=i(w[s][r][0],w[s][r+1][0]),x=i(w[s+1][r][0],w[s+1][r+1][0]),g=[[],[],[],[]];for(let t=0;t&lt;4;++t){(d=[])[0]=w[s][r][1][t],d[1]=w[s+1][r][1][t],d[2]=w[s][r+1][1][t],d[3]=w[s+1][r+1][1][t],d[4]=w[s][r][2][t]*n,d[5]=w[s+1][r][2][t]*n,d[6]=w[s][r+1][2][t]*o,d[7]=w[s+1][r+1][2][t]*o,d[8]=w[s][r][3][t]*c,d[9]=w[s+1][r][3][t]*x,d[10]=w[s][r+1][3][t]*c,d[11]=w[s+1][r+1][3][t]*x,d[12]=0,d[13]=0,d[14]=0,d[15]=0,u=f(d);for(let e=0;e&lt;9;++e){g[t][e]=[];for(let s=0;s&lt;9;++s)g[t][e][s]=p(u,e/8,s/8),g[t][e][s]&gt;255?g[t][e][s]=255:g[t][e][s]&lt;0&amp;&amp;(g[t][e][s]=0)}}h=[];for(let t=3*s,e=3*s+4;t&lt;e;++t)h.push(this.nodes[t].slice(3*r,3*r+4));l=y(h);for(let s=0;s&lt;8;++s)for(let r=0;r&lt;8;++r)(a=new m(l[s][r],[[[g[0][s][r],g[1][s][r],g[2][s][r],g[3][s][r]],[g[0][s][r+1],g[1][s][r+1],g[2][s][r+1],g[3][s][r+1]]],[[g[0][s+1][r],g[1][s+1][r],g[2][s+1][r],g[3][s+1][r]],[g[0][s+1][r+1],g[1][s+1][r+1],g[2][s+1][r+1],g[3][s+1][r+1]]]])).paint(t,e)}}}transform(t){if(t instanceof x)for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].add(t);else if(t instanceof g)for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].transform(t)}scale(t){for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].scale(t)}}document.querySelectorAll(&quot;rect,circle,ellipse,path,text&quot;).forEach((r,n)=&gt;{let o=r.getAttribute(&quot;id&quot;);o||(o=&quot;patchjs_shape&quot;+n,r.setAttribute(&quot;id&quot;,o));const i=r.style.fill.match(/^url\(\s*&quot;?\s*#([^\s&quot;]+)&quot;?\s*\)/),a=r.style.stroke.match(/^url\(\s*&quot;?\s*#([^\s&quot;]+)&quot;?\s*\)/);if(i&amp;&amp;i[1]){const a=document.getElementById(i[1]);if(a&amp;&amp;&quot;meshgradient&quot;===a.nodeName){const i=r.getBBox();let l=document.createElementNS(s,&quot;canvas&quot;);d(l,{width:i.width,height:i.height});const c=l.getContext(&quot;2d&quot;);let u=c.createImageData(i.width,i.height);const f=new b(a);&quot;objectBoundingBox&quot;===a.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;f.scale(new x(i.width,i.height));const p=a.getAttribute(&quot;gradientTransform&quot;);null!=p&amp;&amp;f.transform(h(p)),&quot;userSpaceOnUse&quot;===a.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;f.transform(new x(-i.x,-i.y)),f.paintMesh(u.data,l.width),c.putImageData(u,0,0);const y=document.createElementNS(t,&quot;image&quot;);d(y,{width:i.width,height:i.height,x:i.x,y:i.y});let g=l.toDataURL();y.setAttributeNS(e,&quot;xlink:href&quot;,g),r.parentNode.insertBefore(y,r),r.style.fill=&quot;none&quot;;const w=document.createElementNS(t,&quot;use&quot;);w.setAttributeNS(e,&quot;xlink:href&quot;,&quot;#&quot;+o);const m=&quot;patchjs_clip&quot;+n,M=document.createElementNS(t,&quot;clipPath&quot;);M.setAttribute(&quot;id&quot;,m),M.appendChild(w),r.parentElement.insertBefore(M,r),y.setAttribute(&quot;clip-path&quot;,&quot;url(#&quot;+m+&quot;)&quot;),u=null,l=null,g=null}}if(a&amp;&amp;a[1]){const o=document.getElementById(a[1]);if(o&amp;&amp;&quot;meshgradient&quot;===o.nodeName){const i=parseFloat(r.style.strokeWidth.slice(0,-2))*(parseFloat(r.style.strokeMiterlimit)||parseFloat(r.getAttribute(&quot;stroke-miterlimit&quot;))||1),a=r.getBBox(),l=Math.trunc(a.width+i),c=Math.trunc(a.height+i),u=Math.trunc(a.x-i/2),f=Math.trunc(a.y-i/2);let p=document.createElementNS(s,&quot;canvas&quot;);d(p,{width:l,height:c});const y=p.getContext(&quot;2d&quot;);let g=y.createImageData(l,c);const w=new b(o);&quot;objectBoundingBox&quot;===o.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;w.scale(new x(l,c));const m=o.getAttribute(&quot;gradientTransform&quot;);null!=m&amp;&amp;w.transform(h(m)),&quot;userSpaceOnUse&quot;===o.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;w.transform(new x(-u,-f)),w.paintMesh(g.data,p.width),y.putImageData(g,0,0);const M=document.createElementNS(t,&quot;image&quot;);d(M,{width:l,height:c,x:0,y:0});let S=p.toDataURL();M.setAttributeNS(e,&quot;xlink:href&quot;,S);const k=&quot;pattern_clip&quot;+n,A=document.createElementNS(t,&quot;pattern&quot;);d(A,{id:k,patternUnits:&quot;userSpaceOnUse&quot;,width:l,height:c,x:u,y:f}),A.appendChild(M),o.parentNode.appendChild(A),r.style.stroke=&quot;url(#&quot;+k+&quot;)&quot;,g=null,p=null,S=null}}})}();
</script><script
     id="script104539"
     type="text/javascript">
!function(){const t=&quot;http://www.w3.org/2000/svg&quot;,e=&quot;http://www.w3.org/1999/xlink&quot;,s=&quot;http://www.w3.org/1999/xhtml&quot;,r=2;if(document.createElementNS(t,&quot;meshgradient&quot;).x)return;const n=(t,e,s,r)=&gt;{let n=new x(.5*(e.x+s.x),.5*(e.y+s.y)),o=new x(.5*(t.x+e.x),.5*(t.y+e.y)),i=new x(.5*(s.x+r.x),.5*(s.y+r.y)),a=new x(.5*(n.x+o.x),.5*(n.y+o.y)),h=new x(.5*(n.x+i.x),.5*(n.y+i.y)),l=new x(.5*(a.x+h.x),.5*(a.y+h.y));return[[t,o,a,l],[l,h,i,r]]},o=t=&gt;{let e=t[0].distSquared(t[1]),s=t[2].distSquared(t[3]),r=.25*t[0].distSquared(t[2]),n=.25*t[1].distSquared(t[3]),o=e&gt;s?e:s,i=r&gt;n?r:n;return 18*(o&gt;i?o:i)},i=(t,e)=&gt;Math.sqrt(t.distSquared(e)),a=(t,e)=&gt;t.scale(2/3).add(e.scale(1/3)),h=t=&gt;{let e,s,r,n,o,i,a,h=new g;return t.match(/(\w+\(\s*[^)]+\))+/g).forEach(t=&gt;{let l=t.match(/[\w.-]+/g),d=l.shift();switch(d){case&quot;translate&quot;:2===l.length?e=new g(1,0,0,1,l[0],l[1]):(console.error(&quot;mesh.js: translate does not have 2 arguments!&quot;),e=new g(1,0,0,1,0,0)),h=h.append(e);break;case&quot;scale&quot;:1===l.length?s=new g(l[0],0,0,l[0],0,0):2===l.length?s=new g(l[0],0,0,l[1],0,0):(console.error(&quot;mesh.js: scale does not have 1 or 2 arguments!&quot;),s=new g(1,0,0,1,0,0)),h=h.append(s);break;case&quot;rotate&quot;:if(3===l.length&amp;&amp;(e=new g(1,0,0,1,l[1],l[2]),h=h.append(e)),l[0]){r=l[0]*Math.PI/180;let t=Math.cos(r),e=Math.sin(r);Math.abs(t)&lt;1e-16&amp;&amp;(t=0),Math.abs(e)&lt;1e-16&amp;&amp;(e=0),a=new g(t,e,-e,t,0,0),h=h.append(a)}else console.error(&quot;math.js: No argument to rotate transform!&quot;);3===l.length&amp;&amp;(e=new g(1,0,0,1,-l[1],-l[2]),h=h.append(e));break;case&quot;skewX&quot;:l[0]?(r=l[0]*Math.PI/180,n=Math.tan(r),o=new g(1,0,n,1,0,0),h=h.append(o)):console.error(&quot;math.js: No argument to skewX transform!&quot;);break;case&quot;skewY&quot;:l[0]?(r=l[0]*Math.PI/180,n=Math.tan(r),i=new g(1,n,0,1,0,0),h=h.append(i)):console.error(&quot;math.js: No argument to skewY transform!&quot;);break;case&quot;matrix&quot;:6===l.length?h=h.append(new g(...l)):console.error(&quot;math.js: Incorrect number of arguments for matrix!&quot;);break;default:console.error(&quot;mesh.js: Unhandled transform type: &quot;+d)}}),h},l=t=&gt;{let e=[],s=t.split(/[ ,]+/);for(let t=0,r=s.length-1;t&lt;r;t+=2)e.push(new x(parseFloat(s[t]),parseFloat(s[t+1])));return e},d=(t,e)=&gt;{for(let s in e)t.setAttribute(s,e[s])},c=(t,e,s,r,n)=&gt;{let o,i,a=[0,0,0,0];for(let h=0;h&lt;3;++h)e[h]&lt;t[h]&amp;&amp;e[h]&lt;s[h]||t[h]&lt;e[h]&amp;&amp;s[h]&lt;e[h]?a[h]=0:(a[h]=.5*((e[h]-t[h])/r+(s[h]-e[h])/n),o=Math.abs(3*(e[h]-t[h])/r),i=Math.abs(3*(s[h]-e[h])/n),a[h]&gt;o?a[h]=o:a[h]&gt;i&amp;&amp;(a[h]=i));return a},u=[[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0],[-3,3,0,0,-2,-1,0,0,0,0,0,0,0,0,0,0],[2,-2,0,0,1,1,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0],[0,0,0,0,0,0,0,0,-3,3,0,0,-2,-1,0,0],[0,0,0,0,0,0,0,0,2,-2,0,0,1,1,0,0],[-3,0,3,0,0,0,0,0,-2,0,-1,0,0,0,0,0],[0,0,0,0,-3,0,3,0,0,0,0,0,-2,0,-1,0],[9,-9,-9,9,6,3,-6,-3,6,-6,3,-3,4,2,2,1],[-6,6,6,-6,-3,-3,3,3,-4,4,-2,2,-2,-2,-1,-1],[2,0,-2,0,0,0,0,0,1,0,1,0,0,0,0,0],[0,0,0,0,2,0,-2,0,0,0,0,0,1,0,1,0],[-6,6,6,-6,-4,-2,4,2,-3,3,-3,3,-2,-1,-2,-1],[4,-4,-4,4,2,2,-2,-2,2,-2,2,-2,1,1,1,1]],f=t=&gt;{let e=[];for(let s=0;s&lt;16;++s){e[s]=0;for(let r=0;r&lt;16;++r)e[s]+=u[s][r]*t[r]}return e},p=(t,e,s)=&gt;{const r=e*e,n=s*s,o=e*e*e,i=s*s*s;return t[0]+t[1]*e+t[2]*r+t[3]*o+t[4]*s+t[5]*s*e+t[6]*s*r+t[7]*s*o+t[8]*n+t[9]*n*e+t[10]*n*r+t[11]*n*o+t[12]*i+t[13]*i*e+t[14]*i*r+t[15]*i*o},y=t=&gt;{let e=[],s=[],r=[];for(let s=0;s&lt;4;++s)e[s]=[],e[s][0]=n(t[0][s],t[1][s],t[2][s],t[3][s]),e[s][1]=[],e[s][1].push(...n(...e[s][0][0])),e[s][1].push(...n(...e[s][0][1])),e[s][2]=[],e[s][2].push(...n(...e[s][1][0])),e[s][2].push(...n(...e[s][1][1])),e[s][2].push(...n(...e[s][1][2])),e[s][2].push(...n(...e[s][1][3]));for(let t=0;t&lt;8;++t){s[t]=[];for(let r=0;r&lt;4;++r)s[t][r]=[],s[t][r][0]=n(e[0][2][t][r],e[1][2][t][r],e[2][2][t][r],e[3][2][t][r]),s[t][r][1]=[],s[t][r][1].push(...n(...s[t][r][0][0])),s[t][r][1].push(...n(...s[t][r][0][1])),s[t][r][2]=[],s[t][r][2].push(...n(...s[t][r][1][0])),s[t][r][2].push(...n(...s[t][r][1][1])),s[t][r][2].push(...n(...s[t][r][1][2])),s[t][r][2].push(...n(...s[t][r][1][3]))}for(let t=0;t&lt;8;++t){r[t]=[];for(let e=0;e&lt;8;++e)r[t][e]=[],r[t][e][0]=s[t][0][2][e],r[t][e][1]=s[t][1][2][e],r[t][e][2]=s[t][2][2][e],r[t][e][3]=s[t][3][2][e]}return r};class x{constructor(t,e){this.x=t||0,this.y=e||0}toString(){return`(x=${this.x}, y=${this.y})`}clone(){return new x(this.x,this.y)}add(t){return new x(this.x+t.x,this.y+t.y)}scale(t){return void 0===t.x?new x(this.x*t,this.y*t):new x(this.x*t.x,this.y*t.y)}distSquared(t){let e=this.x-t.x,s=this.y-t.y;return e*e+s*s}transform(t){let e=this.x*t.a+this.y*t.c+t.e,s=this.x*t.b+this.y*t.d+t.f;return new x(e,s)}}class g{constructor(t,e,s,r,n,o){void 0===t?(this.a=1,this.b=0,this.c=0,this.d=1,this.e=0,this.f=0):(this.a=t,this.b=e,this.c=s,this.d=r,this.e=n,this.f=o)}toString(){return`affine: ${this.a} ${this.c} ${this.e} \n       ${this.b} ${this.d} ${this.f}`}append(t){t instanceof g||console.error(&quot;mesh.js: argument to Affine.append is not affine!&quot;);let e=this.a*t.a+this.c*t.b,s=this.b*t.a+this.d*t.b,r=this.a*t.c+this.c*t.d,n=this.b*t.c+this.d*t.d,o=this.a*t.e+this.c*t.f+this.e,i=this.b*t.e+this.d*t.f+this.f;return new g(e,s,r,n,o,i)}}class w{constructor(t,e){this.nodes=t,this.colors=e}paintCurve(t,e){if(o(this.nodes)&gt;r){const s=n(...this.nodes);let r=[[],[]],o=[[],[]];for(let t=0;t&lt;4;++t)r[0][t]=this.colors[0][t],r[1][t]=(this.colors[0][t]+this.colors[1][t])/2,o[0][t]=r[1][t],o[1][t]=this.colors[1][t];let i=new w(s[0],r),a=new w(s[1],o);i.paintCurve(t,e),a.paintCurve(t,e)}else{let s=Math.round(this.nodes[0].x);if(s&gt;=0&amp;&amp;s&lt;e){let r=4*(~~this.nodes[0].y*e+s);t[r]=Math.round(this.colors[0][0]),t[r+1]=Math.round(this.colors[0][1]),t[r+2]=Math.round(this.colors[0][2]),t[r+3]=Math.round(this.colors[0][3])}}}}class m{constructor(t,e){this.nodes=t,this.colors=e}split(){let t=[[],[],[],[]],e=[[],[],[],[]],s=[[[],[]],[[],[]]],r=[[[],[]],[[],[]]];for(let s=0;s&lt;4;++s){const r=n(this.nodes[0][s],this.nodes[1][s],this.nodes[2][s],this.nodes[3][s]);t[0][s]=r[0][0],t[1][s]=r[0][1],t[2][s]=r[0][2],t[3][s]=r[0][3],e[0][s]=r[1][0],e[1][s]=r[1][1],e[2][s]=r[1][2],e[3][s]=r[1][3]}for(let t=0;t&lt;4;++t)s[0][0][t]=this.colors[0][0][t],s[0][1][t]=this.colors[0][1][t],s[1][0][t]=(this.colors[0][0][t]+this.colors[1][0][t])/2,s[1][1][t]=(this.colors[0][1][t]+this.colors[1][1][t])/2,r[0][0][t]=s[1][0][t],r[0][1][t]=s[1][1][t],r[1][0][t]=this.colors[1][0][t],r[1][1][t]=this.colors[1][1][t];return[new m(t,s),new m(e,r)]}paint(t,e){let s,n=!1;for(let t=0;t&lt;4;++t)if((s=o([this.nodes[0][t],this.nodes[1][t],this.nodes[2][t],this.nodes[3][t]]))&gt;r){n=!0;break}if(n){let s=this.split();s[0].paint(t,e),s[1].paint(t,e)}else{new w([...this.nodes[0]],[...this.colors[0]]).paintCurve(t,e)}}}class b{constructor(t){this.readMesh(t),this.type=t.getAttribute(&quot;type&quot;)||&quot;bilinear&quot;}readMesh(t){let e=[[]],s=[[]],r=Number(t.getAttribute(&quot;x&quot;)),n=Number(t.getAttribute(&quot;y&quot;));e[0][0]=new x(r,n);let o=t.children;for(let t=0,r=o.length;t&lt;r;++t){e[3*t+1]=[],e[3*t+2]=[],e[3*t+3]=[],s[t+1]=[];let r=o[t].children;for(let n=0,o=r.length;n&lt;o;++n){let o=r[n].children;for(let r=0,i=o.length;r&lt;i;++r){let i=r;0!==t&amp;&amp;++i;let h,d=o[r].getAttribute(&quot;path&quot;),c=&quot;l&quot;;null!=d&amp;&amp;(c=(h=d.match(/\s*([lLcC])\s*(.*)/))[1]);let u=l(h[2]);switch(c){case&quot;l&quot;:0===i?(e[3*t][3*n+3]=u[0].add(e[3*t][3*n]),e[3*t][3*n+1]=a(e[3*t][3*n],e[3*t][3*n+3]),e[3*t][3*n+2]=a(e[3*t][3*n+3],e[3*t][3*n])):1===i?(e[3*t+3][3*n+3]=u[0].add(e[3*t][3*n+3]),e[3*t+1][3*n+3]=a(e[3*t][3*n+3],e[3*t+3][3*n+3]),e[3*t+2][3*n+3]=a(e[3*t+3][3*n+3],e[3*t][3*n+3])):2===i?(0===n&amp;&amp;(e[3*t+3][3*n+0]=u[0].add(e[3*t+3][3*n+3])),e[3*t+3][3*n+1]=a(e[3*t+3][3*n],e[3*t+3][3*n+3]),e[3*t+3][3*n+2]=a(e[3*t+3][3*n+3],e[3*t+3][3*n])):(e[3*t+1][3*n]=a(e[3*t][3*n],e[3*t+3][3*n]),e[3*t+2][3*n]=a(e[3*t+3][3*n],e[3*t][3*n]));break;case&quot;L&quot;:0===i?(e[3*t][3*n+3]=u[0],e[3*t][3*n+1]=a(e[3*t][3*n],e[3*t][3*n+3]),e[3*t][3*n+2]=a(e[3*t][3*n+3],e[3*t][3*n])):1===i?(e[3*t+3][3*n+3]=u[0],e[3*t+1][3*n+3]=a(e[3*t][3*n+3],e[3*t+3][3*n+3]),e[3*t+2][3*n+3]=a(e[3*t+3][3*n+3],e[3*t][3*n+3])):2===i?(0===n&amp;&amp;(e[3*t+3][3*n+0]=u[0]),e[3*t+3][3*n+1]=a(e[3*t+3][3*n],e[3*t+3][3*n+3]),e[3*t+3][3*n+2]=a(e[3*t+3][3*n+3],e[3*t+3][3*n])):(e[3*t+1][3*n]=a(e[3*t][3*n],e[3*t+3][3*n]),e[3*t+2][3*n]=a(e[3*t+3][3*n],e[3*t][3*n]));break;case&quot;c&quot;:0===i?(e[3*t][3*n+1]=u[0].add(e[3*t][3*n]),e[3*t][3*n+2]=u[1].add(e[3*t][3*n]),e[3*t][3*n+3]=u[2].add(e[3*t][3*n])):1===i?(e[3*t+1][3*n+3]=u[0].add(e[3*t][3*n+3]),e[3*t+2][3*n+3]=u[1].add(e[3*t][3*n+3]),e[3*t+3][3*n+3]=u[2].add(e[3*t][3*n+3])):2===i?(e[3*t+3][3*n+2]=u[0].add(e[3*t+3][3*n+3]),e[3*t+3][3*n+1]=u[1].add(e[3*t+3][3*n+3]),0===n&amp;&amp;(e[3*t+3][3*n+0]=u[2].add(e[3*t+3][3*n+3]))):(e[3*t+2][3*n]=u[0].add(e[3*t+3][3*n]),e[3*t+1][3*n]=u[1].add(e[3*t+3][3*n]));break;case&quot;C&quot;:0===i?(e[3*t][3*n+1]=u[0],e[3*t][3*n+2]=u[1],e[3*t][3*n+3]=u[2]):1===i?(e[3*t+1][3*n+3]=u[0],e[3*t+2][3*n+3]=u[1],e[3*t+3][3*n+3]=u[2]):2===i?(e[3*t+3][3*n+2]=u[0],e[3*t+3][3*n+1]=u[1],0===n&amp;&amp;(e[3*t+3][3*n+0]=u[2])):(e[3*t+2][3*n]=u[0],e[3*t+1][3*n]=u[1]);break;default:console.error(&quot;mesh.js: &quot;+c+&quot; invalid path type.&quot;)}if(0===t&amp;&amp;0===n||r&gt;0){let e=window.getComputedStyle(o[r]).stopColor.match(/^rgb\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)$/i),a=window.getComputedStyle(o[r]).stopOpacity,h=255;a&amp;&amp;(h=Math.floor(255*a)),e&amp;&amp;(0===i?(s[t][n]=[],s[t][n][0]=Math.floor(e[1]),s[t][n][1]=Math.floor(e[2]),s[t][n][2]=Math.floor(e[3]),s[t][n][3]=h):1===i?(s[t][n+1]=[],s[t][n+1][0]=Math.floor(e[1]),s[t][n+1][1]=Math.floor(e[2]),s[t][n+1][2]=Math.floor(e[3]),s[t][n+1][3]=h):2===i?(s[t+1][n+1]=[],s[t+1][n+1][0]=Math.floor(e[1]),s[t+1][n+1][1]=Math.floor(e[2]),s[t+1][n+1][2]=Math.floor(e[3]),s[t+1][n+1][3]=h):3===i&amp;&amp;(s[t+1][n]=[],s[t+1][n][0]=Math.floor(e[1]),s[t+1][n][1]=Math.floor(e[2]),s[t+1][n][2]=Math.floor(e[3]),s[t+1][n][3]=h))}}e[3*t+1][3*n+1]=new x,e[3*t+1][3*n+2]=new x,e[3*t+2][3*n+1]=new x,e[3*t+2][3*n+2]=new x,e[3*t+1][3*n+1].x=(-4*e[3*t][3*n].x+6*(e[3*t][3*n+1].x+e[3*t+1][3*n].x)+-2*(e[3*t][3*n+3].x+e[3*t+3][3*n].x)+3*(e[3*t+3][3*n+1].x+e[3*t+1][3*n+3].x)+-1*e[3*t+3][3*n+3].x)/9,e[3*t+1][3*n+2].x=(-4*e[3*t][3*n+3].x+6*(e[3*t][3*n+2].x+e[3*t+1][3*n+3].x)+-2*(e[3*t][3*n].x+e[3*t+3][3*n+3].x)+3*(e[3*t+3][3*n+2].x+e[3*t+1][3*n].x)+-1*e[3*t+3][3*n].x)/9,e[3*t+2][3*n+1].x=(-4*e[3*t+3][3*n].x+6*(e[3*t+3][3*n+1].x+e[3*t+2][3*n].x)+-2*(e[3*t+3][3*n+3].x+e[3*t][3*n].x)+3*(e[3*t][3*n+1].x+e[3*t+2][3*n+3].x)+-1*e[3*t][3*n+3].x)/9,e[3*t+2][3*n+2].x=(-4*e[3*t+3][3*n+3].x+6*(e[3*t+3][3*n+2].x+e[3*t+2][3*n+3].x)+-2*(e[3*t+3][3*n].x+e[3*t][3*n+3].x)+3*(e[3*t][3*n+2].x+e[3*t+2][3*n].x)+-1*e[3*t][3*n].x)/9,e[3*t+1][3*n+1].y=(-4*e[3*t][3*n].y+6*(e[3*t][3*n+1].y+e[3*t+1][3*n].y)+-2*(e[3*t][3*n+3].y+e[3*t+3][3*n].y)+3*(e[3*t+3][3*n+1].y+e[3*t+1][3*n+3].y)+-1*e[3*t+3][3*n+3].y)/9,e[3*t+1][3*n+2].y=(-4*e[3*t][3*n+3].y+6*(e[3*t][3*n+2].y+e[3*t+1][3*n+3].y)+-2*(e[3*t][3*n].y+e[3*t+3][3*n+3].y)+3*(e[3*t+3][3*n+2].y+e[3*t+1][3*n].y)+-1*e[3*t+3][3*n].y)/9,e[3*t+2][3*n+1].y=(-4*e[3*t+3][3*n].y+6*(e[3*t+3][3*n+1].y+e[3*t+2][3*n].y)+-2*(e[3*t+3][3*n+3].y+e[3*t][3*n].y)+3*(e[3*t][3*n+1].y+e[3*t+2][3*n+3].y)+-1*e[3*t][3*n+3].y)/9,e[3*t+2][3*n+2].y=(-4*e[3*t+3][3*n+3].y+6*(e[3*t+3][3*n+2].y+e[3*t+2][3*n+3].y)+-2*(e[3*t+3][3*n].y+e[3*t][3*n+3].y)+3*(e[3*t][3*n+2].y+e[3*t+2][3*n].y)+-1*e[3*t][3*n].y)/9}}this.nodes=e,this.colors=s}paintMesh(t,e){let s=(this.nodes.length-1)/3,r=(this.nodes[0].length-1)/3;if(&quot;bilinear&quot;===this.type||s&lt;2||r&lt;2){let n;for(let o=0;o&lt;s;++o)for(let s=0;s&lt;r;++s){let r=[];for(let t=3*o,e=3*o+4;t&lt;e;++t)r.push(this.nodes[t].slice(3*s,3*s+4));let i=[];i.push(this.colors[o].slice(s,s+2)),i.push(this.colors[o+1].slice(s,s+2)),(n=new m(r,i)).paint(t,e)}}else{let n,o,a,h,l,d,u;const x=s,g=r;s++,r++;let w=new Array(s);for(let t=0;t&lt;s;++t){w[t]=new Array(r);for(let e=0;e&lt;r;++e)w[t][e]=[],w[t][e][0]=this.nodes[3*t][3*e],w[t][e][1]=this.colors[t][e]}for(let t=0;t&lt;s;++t)for(let e=0;e&lt;r;++e)0!==t&amp;&amp;t!==x&amp;&amp;(n=i(w[t-1][e][0],w[t][e][0]),o=i(w[t+1][e][0],w[t][e][0]),w[t][e][2]=c(w[t-1][e][1],w[t][e][1],w[t+1][e][1],n,o)),0!==e&amp;&amp;e!==g&amp;&amp;(n=i(w[t][e-1][0],w[t][e][0]),o=i(w[t][e+1][0],w[t][e][0]),w[t][e][3]=c(w[t][e-1][1],w[t][e][1],w[t][e+1][1],n,o));for(let t=0;t&lt;r;++t){w[0][t][2]=[],w[x][t][2]=[];for(let e=0;e&lt;4;++e)n=i(w[1][t][0],w[0][t][0]),o=i(w[x][t][0],w[x-1][t][0]),w[0][t][2][e]=n&gt;0?2*(w[1][t][1][e]-w[0][t][1][e])/n-w[1][t][2][e]:0,w[x][t][2][e]=o&gt;0?2*(w[x][t][1][e]-w[x-1][t][1][e])/o-w[x-1][t][2][e]:0}for(let t=0;t&lt;s;++t){w[t][0][3]=[],w[t][g][3]=[];for(let e=0;e&lt;4;++e)n=i(w[t][1][0],w[t][0][0]),o=i(w[t][g][0],w[t][g-1][0]),w[t][0][3][e]=n&gt;0?2*(w[t][1][1][e]-w[t][0][1][e])/n-w[t][1][3][e]:0,w[t][g][3][e]=o&gt;0?2*(w[t][g][1][e]-w[t][g-1][1][e])/o-w[t][g-1][3][e]:0}for(let s=0;s&lt;x;++s)for(let r=0;r&lt;g;++r){let n=i(w[s][r][0],w[s+1][r][0]),o=i(w[s][r+1][0],w[s+1][r+1][0]),c=i(w[s][r][0],w[s][r+1][0]),x=i(w[s+1][r][0],w[s+1][r+1][0]),g=[[],[],[],[]];for(let t=0;t&lt;4;++t){(d=[])[0]=w[s][r][1][t],d[1]=w[s+1][r][1][t],d[2]=w[s][r+1][1][t],d[3]=w[s+1][r+1][1][t],d[4]=w[s][r][2][t]*n,d[5]=w[s+1][r][2][t]*n,d[6]=w[s][r+1][2][t]*o,d[7]=w[s+1][r+1][2][t]*o,d[8]=w[s][r][3][t]*c,d[9]=w[s+1][r][3][t]*x,d[10]=w[s][r+1][3][t]*c,d[11]=w[s+1][r+1][3][t]*x,d[12]=0,d[13]=0,d[14]=0,d[15]=0,u=f(d);for(let e=0;e&lt;9;++e){g[t][e]=[];for(let s=0;s&lt;9;++s)g[t][e][s]=p(u,e/8,s/8),g[t][e][s]&gt;255?g[t][e][s]=255:g[t][e][s]&lt;0&amp;&amp;(g[t][e][s]=0)}}h=[];for(let t=3*s,e=3*s+4;t&lt;e;++t)h.push(this.nodes[t].slice(3*r,3*r+4));l=y(h);for(let s=0;s&lt;8;++s)for(let r=0;r&lt;8;++r)(a=new m(l[s][r],[[[g[0][s][r],g[1][s][r],g[2][s][r],g[3][s][r]],[g[0][s][r+1],g[1][s][r+1],g[2][s][r+1],g[3][s][r+1]]],[[g[0][s+1][r],g[1][s+1][r],g[2][s+1][r],g[3][s+1][r]],[g[0][s+1][r+1],g[1][s+1][r+1],g[2][s+1][r+1],g[3][s+1][r+1]]]])).paint(t,e)}}}transform(t){if(t instanceof x)for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].add(t);else if(t instanceof g)for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].transform(t)}scale(t){for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].scale(t)}}document.querySelectorAll(&quot;rect,circle,ellipse,path,text&quot;).forEach((r,n)=&gt;{let o=r.getAttribute(&quot;id&quot;);o||(o=&quot;patchjs_shape&quot;+n,r.setAttribute(&quot;id&quot;,o));const i=r.style.fill.match(/^url\(\s*&quot;?\s*#([^\s&quot;]+)&quot;?\s*\)/),a=r.style.stroke.match(/^url\(\s*&quot;?\s*#([^\s&quot;]+)&quot;?\s*\)/);if(i&amp;&amp;i[1]){const a=document.getElementById(i[1]);if(a&amp;&amp;&quot;meshgradient&quot;===a.nodeName){const i=r.getBBox();let l=document.createElementNS(s,&quot;canvas&quot;);d(l,{width:i.width,height:i.height});const c=l.getContext(&quot;2d&quot;);let u=c.createImageData(i.width,i.height);const f=new b(a);&quot;objectBoundingBox&quot;===a.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;f.scale(new x(i.width,i.height));const p=a.getAttribute(&quot;gradientTransform&quot;);null!=p&amp;&amp;f.transform(h(p)),&quot;userSpaceOnUse&quot;===a.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;f.transform(new x(-i.x,-i.y)),f.paintMesh(u.data,l.width),c.putImageData(u,0,0);const y=document.createElementNS(t,&quot;image&quot;);d(y,{width:i.width,height:i.height,x:i.x,y:i.y});let g=l.toDataURL();y.setAttributeNS(e,&quot;xlink:href&quot;,g),r.parentNode.insertBefore(y,r),r.style.fill=&quot;none&quot;;const w=document.createElementNS(t,&quot;use&quot;);w.setAttributeNS(e,&quot;xlink:href&quot;,&quot;#&quot;+o);const m=&quot;patchjs_clip&quot;+n,M=document.createElementNS(t,&quot;clipPath&quot;);M.setAttribute(&quot;id&quot;,m),M.appendChild(w),r.parentElement.insertBefore(M,r),y.setAttribute(&quot;clip-path&quot;,&quot;url(#&quot;+m+&quot;)&quot;),u=null,l=null,g=null}}if(a&amp;&amp;a[1]){const o=document.getElementById(a[1]);if(o&amp;&amp;&quot;meshgradient&quot;===o.nodeName){const i=parseFloat(r.style.strokeWidth.slice(0,-2))*(parseFloat(r.style.strokeMiterlimit)||parseFloat(r.getAttribute(&quot;stroke-miterlimit&quot;))||1),a=r.getBBox(),l=Math.trunc(a.width+i),c=Math.trunc(a.height+i),u=Math.trunc(a.x-i/2),f=Math.trunc(a.y-i/2);let p=document.createElementNS(s,&quot;canvas&quot;);d(p,{width:l,height:c});const y=p.getContext(&quot;2d&quot;);let g=y.createImageData(l,c);const w=new b(o);&quot;objectBoundingBox&quot;===o.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;w.scale(new x(l,c));const m=o.getAttribute(&quot;gradientTransform&quot;);null!=m&amp;&amp;w.transform(h(m)),&quot;userSpaceOnUse&quot;===o.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;w.transform(new x(-u,-f)),w.paintMesh(g.data,p.width),y.putImageData(g,0,0);const M=document.createElementNS(t,&quot;image&quot;);d(M,{width:l,height:c,x:0,y:0});let S=p.toDataURL();M.setAttributeNS(e,&quot;xlink:href&quot;,S);const k=&quot;pattern_clip&quot;+n,A=document.createElementNS(t,&quot;pattern&quot;);d(A,{id:k,patternUnits:&quot;userSpaceOnUse&quot;,width:l,height:c,x:u,y:f}),A.appendChild(M),o.parentNode.appendChild(A),r.style.stroke=&quot;url(#&quot;+k+&quot;)&quot;,g=null,p=null,S=null}}})}();
</script><script
     id="script1"
     type="text/javascript">
!function(){const t=&quot;http://www.w3.org/2000/svg&quot;,e=&quot;http://www.w3.org/1999/xlink&quot;,s=&quot;http://www.w3.org/1999/xhtml&quot;,r=2;if(document.createElementNS(t,&quot;meshgradient&quot;).x)return;const n=(t,e,s,r)=&gt;{let n=new x(.5*(e.x+s.x),.5*(e.y+s.y)),o=new x(.5*(t.x+e.x),.5*(t.y+e.y)),i=new x(.5*(s.x+r.x),.5*(s.y+r.y)),a=new x(.5*(n.x+o.x),.5*(n.y+o.y)),h=new x(.5*(n.x+i.x),.5*(n.y+i.y)),l=new x(.5*(a.x+h.x),.5*(a.y+h.y));return[[t,o,a,l],[l,h,i,r]]},o=t=&gt;{let e=t[0].distSquared(t[1]),s=t[2].distSquared(t[3]),r=.25*t[0].distSquared(t[2]),n=.25*t[1].distSquared(t[3]),o=e&gt;s?e:s,i=r&gt;n?r:n;return 18*(o&gt;i?o:i)},i=(t,e)=&gt;Math.sqrt(t.distSquared(e)),a=(t,e)=&gt;t.scale(2/3).add(e.scale(1/3)),h=t=&gt;{let e,s,r,n,o,i,a,h=new g;return t.match(/(\w+\(\s*[^)]+\))+/g).forEach(t=&gt;{let l=t.match(/[\w.-]+/g),d=l.shift();switch(d){case&quot;translate&quot;:2===l.length?e=new g(1,0,0,1,l[0],l[1]):(console.error(&quot;mesh.js: translate does not have 2 arguments!&quot;),e=new g(1,0,0,1,0,0)),h=h.append(e);break;case&quot;scale&quot;:1===l.length?s=new g(l[0],0,0,l[0],0,0):2===l.length?s=new g(l[0],0,0,l[1],0,0):(console.error(&quot;mesh.js: scale does not have 1 or 2 arguments!&quot;),s=new g(1,0,0,1,0,0)),h=h.append(s);break;case&quot;rotate&quot;:if(3===l.length&amp;&amp;(e=new g(1,0,0,1,l[1],l[2]),h=h.append(e)),l[0]){r=l[0]*Math.PI/180;let t=Math.cos(r),e=Math.sin(r);Math.abs(t)&lt;1e-16&amp;&amp;(t=0),Math.abs(e)&lt;1e-16&amp;&amp;(e=0),a=new g(t,e,-e,t,0,0),h=h.append(a)}else console.error(&quot;math.js: No argument to rotate transform!&quot;);3===l.length&amp;&amp;(e=new g(1,0,0,1,-l[1],-l[2]),h=h.append(e));break;case&quot;skewX&quot;:l[0]?(r=l[0]*Math.PI/180,n=Math.tan(r),o=new g(1,0,n,1,0,0),h=h.append(o)):console.error(&quot;math.js: No argument to skewX transform!&quot;);break;case&quot;skewY&quot;:l[0]?(r=l[0]*Math.PI/180,n=Math.tan(r),i=new g(1,n,0,1,0,0),h=h.append(i)):console.error(&quot;math.js: No argument to skewY transform!&quot;);break;case&quot;matrix&quot;:6===l.length?h=h.append(new g(...l)):console.error(&quot;math.js: Incorrect number of arguments for matrix!&quot;);break;default:console.error(&quot;mesh.js: Unhandled transform type: &quot;+d)}}),h},l=t=&gt;{let e=[],s=t.split(/[ ,]+/);for(let t=0,r=s.length-1;t&lt;r;t+=2)e.push(new x(parseFloat(s[t]),parseFloat(s[t+1])));return e},d=(t,e)=&gt;{for(let s in e)t.setAttribute(s,e[s])},c=(t,e,s,r,n)=&gt;{let o,i,a=[0,0,0,0];for(let h=0;h&lt;3;++h)e[h]&lt;t[h]&amp;&amp;e[h]&lt;s[h]||t[h]&lt;e[h]&amp;&amp;s[h]&lt;e[h]?a[h]=0:(a[h]=.5*((e[h]-t[h])/r+(s[h]-e[h])/n),o=Math.abs(3*(e[h]-t[h])/r),i=Math.abs(3*(s[h]-e[h])/n),a[h]&gt;o?a[h]=o:a[h]&gt;i&amp;&amp;(a[h]=i));return a},u=[[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0],[-3,3,0,0,-2,-1,0,0,0,0,0,0,0,0,0,0],[2,-2,0,0,1,1,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0],[0,0,0,0,0,0,0,0,-3,3,0,0,-2,-1,0,0],[0,0,0,0,0,0,0,0,2,-2,0,0,1,1,0,0],[-3,0,3,0,0,0,0,0,-2,0,-1,0,0,0,0,0],[0,0,0,0,-3,0,3,0,0,0,0,0,-2,0,-1,0],[9,-9,-9,9,6,3,-6,-3,6,-6,3,-3,4,2,2,1],[-6,6,6,-6,-3,-3,3,3,-4,4,-2,2,-2,-2,-1,-1],[2,0,-2,0,0,0,0,0,1,0,1,0,0,0,0,0],[0,0,0,0,2,0,-2,0,0,0,0,0,1,0,1,0],[-6,6,6,-6,-4,-2,4,2,-3,3,-3,3,-2,-1,-2,-1],[4,-4,-4,4,2,2,-2,-2,2,-2,2,-2,1,1,1,1]],f=t=&gt;{let e=[];for(let s=0;s&lt;16;++s){e[s]=0;for(let r=0;r&lt;16;++r)e[s]+=u[s][r]*t[r]}return e},p=(t,e,s)=&gt;{const r=e*e,n=s*s,o=e*e*e,i=s*s*s;return t[0]+t[1]*e+t[2]*r+t[3]*o+t[4]*s+t[5]*s*e+t[6]*s*r+t[7]*s*o+t[8]*n+t[9]*n*e+t[10]*n*r+t[11]*n*o+t[12]*i+t[13]*i*e+t[14]*i*r+t[15]*i*o},y=t=&gt;{let e=[],s=[],r=[];for(let s=0;s&lt;4;++s)e[s]=[],e[s][0]=n(t[0][s],t[1][s],t[2][s],t[3][s]),e[s][1]=[],e[s][1].push(...n(...e[s][0][0])),e[s][1].push(...n(...e[s][0][1])),e[s][2]=[],e[s][2].push(...n(...e[s][1][0])),e[s][2].push(...n(...e[s][1][1])),e[s][2].push(...n(...e[s][1][2])),e[s][2].push(...n(...e[s][1][3]));for(let t=0;t&lt;8;++t){s[t]=[];for(let r=0;r&lt;4;++r)s[t][r]=[],s[t][r][0]=n(e[0][2][t][r],e[1][2][t][r],e[2][2][t][r],e[3][2][t][r]),s[t][r][1]=[],s[t][r][1].push(...n(...s[t][r][0][0])),s[t][r][1].push(...n(...s[t][r][0][1])),s[t][r][2]=[],s[t][r][2].push(...n(...s[t][r][1][0])),s[t][r][2].push(...n(...s[t][r][1][1])),s[t][r][2].push(...n(...s[t][r][1][2])),s[t][r][2].push(...n(...s[t][r][1][3]))}for(let t=0;t&lt;8;++t){r[t]=[];for(let e=0;e&lt;8;++e)r[t][e]=[],r[t][e][0]=s[t][0][2][e],r[t][e][1]=s[t][1][2][e],r[t][e][2]=s[t][2][2][e],r[t][e][3]=s[t][3][2][e]}return r};class x{constructor(t,e){this.x=t||0,this.y=e||0}toString(){return`(x=${this.x}, y=${this.y})`}clone(){return new x(this.x,this.y)}add(t){return new x(this.x+t.x,this.y+t.y)}scale(t){return void 0===t.x?new x(this.x*t,this.y*t):new x(this.x*t.x,this.y*t.y)}distSquared(t){let e=this.x-t.x,s=this.y-t.y;return e*e+s*s}transform(t){let e=this.x*t.a+this.y*t.c+t.e,s=this.x*t.b+this.y*t.d+t.f;return new x(e,s)}}class g{constructor(t,e,s,r,n,o){void 0===t?(this.a=1,this.b=0,this.c=0,this.d=1,this.e=0,this.f=0):(this.a=t,this.b=e,this.c=s,this.d=r,this.e=n,this.f=o)}toString(){return`affine: ${this.a} ${this.c} ${this.e} \n       ${this.b} ${this.d} ${this.f}`}append(t){t instanceof g||console.error(&quot;mesh.js: argument to Affine.append is not affine!&quot;);let e=this.a*t.a+this.c*t.b,s=this.b*t.a+this.d*t.b,r=this.a*t.c+this.c*t.d,n=this.b*t.c+this.d*t.d,o=this.a*t.e+this.c*t.f+this.e,i=this.b*t.e+this.d*t.f+this.f;return new g(e,s,r,n,o,i)}}class w{constructor(t,e){this.nodes=t,this.colors=e}paintCurve(t,e){if(o(this.nodes)&gt;r){const s=n(...this.nodes);let r=[[],[]],o=[[],[]];for(let t=0;t&lt;4;++t)r[0][t]=this.colors[0][t],r[1][t]=(this.colors[0][t]+this.colors[1][t])/2,o[0][t]=r[1][t],o[1][t]=this.colors[1][t];let i=new w(s[0],r),a=new w(s[1],o);i.paintCurve(t,e),a.paintCurve(t,e)}else{let s=Math.round(this.nodes[0].x);if(s&gt;=0&amp;&amp;s&lt;e){let r=4*(~~this.nodes[0].y*e+s);t[r]=Math.round(this.colors[0][0]),t[r+1]=Math.round(this.colors[0][1]),t[r+2]=Math.round(this.colors[0][2]),t[r+3]=Math.round(this.colors[0][3])}}}}class m{constructor(t,e){this.nodes=t,this.colors=e}split(){let t=[[],[],[],[]],e=[[],[],[],[]],s=[[[],[]],[[],[]]],r=[[[],[]],[[],[]]];for(let s=0;s&lt;4;++s){const r=n(this.nodes[0][s],this.nodes[1][s],this.nodes[2][s],this.nodes[3][s]);t[0][s]=r[0][0],t[1][s]=r[0][1],t[2][s]=r[0][2],t[3][s]=r[0][3],e[0][s]=r[1][0],e[1][s]=r[1][1],e[2][s]=r[1][2],e[3][s]=r[1][3]}for(let t=0;t&lt;4;++t)s[0][0][t]=this.colors[0][0][t],s[0][1][t]=this.colors[0][1][t],s[1][0][t]=(this.colors[0][0][t]+this.colors[1][0][t])/2,s[1][1][t]=(this.colors[0][1][t]+this.colors[1][1][t])/2,r[0][0][t]=s[1][0][t],r[0][1][t]=s[1][1][t],r[1][0][t]=this.colors[1][0][t],r[1][1][t]=this.colors[1][1][t];return[new m(t,s),new m(e,r)]}paint(t,e){let s,n=!1;for(let t=0;t&lt;4;++t)if((s=o([this.nodes[0][t],this.nodes[1][t],this.nodes[2][t],this.nodes[3][t]]))&gt;r){n=!0;break}if(n){let s=this.split();s[0].paint(t,e),s[1].paint(t,e)}else{new w([...this.nodes[0]],[...this.colors[0]]).paintCurve(t,e)}}}class b{constructor(t){this.readMesh(t),this.type=t.getAttribute(&quot;type&quot;)||&quot;bilinear&quot;}readMesh(t){let e=[[]],s=[[]],r=Number(t.getAttribute(&quot;x&quot;)),n=Number(t.getAttribute(&quot;y&quot;));e[0][0]=new x(r,n);let o=t.children;for(let t=0,r=o.length;t&lt;r;++t){e[3*t+1]=[],e[3*t+2]=[],e[3*t+3]=[],s[t+1]=[];let r=o[t].children;for(let n=0,o=r.length;n&lt;o;++n){let o=r[n].children;for(let r=0,i=o.length;r&lt;i;++r){let i=r;0!==t&amp;&amp;++i;let h,d=o[r].getAttribute(&quot;path&quot;),c=&quot;l&quot;;null!=d&amp;&amp;(c=(h=d.match(/\s*([lLcC])\s*(.*)/))[1]);let u=l(h[2]);switch(c){case&quot;l&quot;:0===i?(e[3*t][3*n+3]=u[0].add(e[3*t][3*n]),e[3*t][3*n+1]=a(e[3*t][3*n],e[3*t][3*n+3]),e[3*t][3*n+2]=a(e[3*t][3*n+3],e[3*t][3*n])):1===i?(e[3*t+3][3*n+3]=u[0].add(e[3*t][3*n+3]),e[3*t+1][3*n+3]=a(e[3*t][3*n+3],e[3*t+3][3*n+3]),e[3*t+2][3*n+3]=a(e[3*t+3][3*n+3],e[3*t][3*n+3])):2===i?(0===n&amp;&amp;(e[3*t+3][3*n+0]=u[0].add(e[3*t+3][3*n+3])),e[3*t+3][3*n+1]=a(e[3*t+3][3*n],e[3*t+3][3*n+3]),e[3*t+3][3*n+2]=a(e[3*t+3][3*n+3],e[3*t+3][3*n])):(e[3*t+1][3*n]=a(e[3*t][3*n],e[3*t+3][3*n]),e[3*t+2][3*n]=a(e[3*t+3][3*n],e[3*t][3*n]));break;case&quot;L&quot;:0===i?(e[3*t][3*n+3]=u[0],e[3*t][3*n+1]=a(e[3*t][3*n],e[3*t][3*n+3]),e[3*t][3*n+2]=a(e[3*t][3*n+3],e[3*t][3*n])):1===i?(e[3*t+3][3*n+3]=u[0],e[3*t+1][3*n+3]=a(e[3*t][3*n+3],e[3*t+3][3*n+3]),e[3*t+2][3*n+3]=a(e[3*t+3][3*n+3],e[3*t][3*n+3])):2===i?(0===n&amp;&amp;(e[3*t+3][3*n+0]=u[0]),e[3*t+3][3*n+1]=a(e[3*t+3][3*n],e[3*t+3][3*n+3]),e[3*t+3][3*n+2]=a(e[3*t+3][3*n+3],e[3*t+3][3*n])):(e[3*t+1][3*n]=a(e[3*t][3*n],e[3*t+3][3*n]),e[3*t+2][3*n]=a(e[3*t+3][3*n],e[3*t][3*n]));break;case&quot;c&quot;:0===i?(e[3*t][3*n+1]=u[0].add(e[3*t][3*n]),e[3*t][3*n+2]=u[1].add(e[3*t][3*n]),e[3*t][3*n+3]=u[2].add(e[3*t][3*n])):1===i?(e[3*t+1][3*n+3]=u[0].add(e[3*t][3*n+3]),e[3*t+2][3*n+3]=u[1].add(e[3*t][3*n+3]),e[3*t+3][3*n+3]=u[2].add(e[3*t][3*n+3])):2===i?(e[3*t+3][3*n+2]=u[0].add(e[3*t+3][3*n+3]),e[3*t+3][3*n+1]=u[1].add(e[3*t+3][3*n+3]),0===n&amp;&amp;(e[3*t+3][3*n+0]=u[2].add(e[3*t+3][3*n+3]))):(e[3*t+2][3*n]=u[0].add(e[3*t+3][3*n]),e[3*t+1][3*n]=u[1].add(e[3*t+3][3*n]));break;case&quot;C&quot;:0===i?(e[3*t][3*n+1]=u[0],e[3*t][3*n+2]=u[1],e[3*t][3*n+3]=u[2]):1===i?(e[3*t+1][3*n+3]=u[0],e[3*t+2][3*n+3]=u[1],e[3*t+3][3*n+3]=u[2]):2===i?(e[3*t+3][3*n+2]=u[0],e[3*t+3][3*n+1]=u[1],0===n&amp;&amp;(e[3*t+3][3*n+0]=u[2])):(e[3*t+2][3*n]=u[0],e[3*t+1][3*n]=u[1]);break;default:console.error(&quot;mesh.js: &quot;+c+&quot; invalid path type.&quot;)}if(0===t&amp;&amp;0===n||r&gt;0){let e=window.getComputedStyle(o[r]).stopColor.match(/^rgb\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)$/i),a=window.getComputedStyle(o[r]).stopOpacity,h=255;a&amp;&amp;(h=Math.floor(255*a)),e&amp;&amp;(0===i?(s[t][n]=[],s[t][n][0]=Math.floor(e[1]),s[t][n][1]=Math.floor(e[2]),s[t][n][2]=Math.floor(e[3]),s[t][n][3]=h):1===i?(s[t][n+1]=[],s[t][n+1][0]=Math.floor(e[1]),s[t][n+1][1]=Math.floor(e[2]),s[t][n+1][2]=Math.floor(e[3]),s[t][n+1][3]=h):2===i?(s[t+1][n+1]=[],s[t+1][n+1][0]=Math.floor(e[1]),s[t+1][n+1][1]=Math.floor(e[2]),s[t+1][n+1][2]=Math.floor(e[3]),s[t+1][n+1][3]=h):3===i&amp;&amp;(s[t+1][n]=[],s[t+1][n][0]=Math.floor(e[1]),s[t+1][n][1]=Math.floor(e[2]),s[t+1][n][2]=Math.floor(e[3]),s[t+1][n][3]=h))}}e[3*t+1][3*n+1]=new x,e[3*t+1][3*n+2]=new x,e[3*t+2][3*n+1]=new x,e[3*t+2][3*n+2]=new x,e[3*t+1][3*n+1].x=(-4*e[3*t][3*n].x+6*(e[3*t][3*n+1].x+e[3*t+1][3*n].x)+-2*(e[3*t][3*n+3].x+e[3*t+3][3*n].x)+3*(e[3*t+3][3*n+1].x+e[3*t+1][3*n+3].x)+-1*e[3*t+3][3*n+3].x)/9,e[3*t+1][3*n+2].x=(-4*e[3*t][3*n+3].x+6*(e[3*t][3*n+2].x+e[3*t+1][3*n+3].x)+-2*(e[3*t][3*n].x+e[3*t+3][3*n+3].x)+3*(e[3*t+3][3*n+2].x+e[3*t+1][3*n].x)+-1*e[3*t+3][3*n].x)/9,e[3*t+2][3*n+1].x=(-4*e[3*t+3][3*n].x+6*(e[3*t+3][3*n+1].x+e[3*t+2][3*n].x)+-2*(e[3*t+3][3*n+3].x+e[3*t][3*n].x)+3*(e[3*t][3*n+1].x+e[3*t+2][3*n+3].x)+-1*e[3*t][3*n+3].x)/9,e[3*t+2][3*n+2].x=(-4*e[3*t+3][3*n+3].x+6*(e[3*t+3][3*n+2].x+e[3*t+2][3*n+3].x)+-2*(e[3*t+3][3*n].x+e[3*t][3*n+3].x)+3*(e[3*t][3*n+2].x+e[3*t+2][3*n].x)+-1*e[3*t][3*n].x)/9,e[3*t+1][3*n+1].y=(-4*e[3*t][3*n].y+6*(e[3*t][3*n+1].y+e[3*t+1][3*n].y)+-2*(e[3*t][3*n+3].y+e[3*t+3][3*n].y)+3*(e[3*t+3][3*n+1].y+e[3*t+1][3*n+3].y)+-1*e[3*t+3][3*n+3].y)/9,e[3*t+1][3*n+2].y=(-4*e[3*t][3*n+3].y+6*(e[3*t][3*n+2].y+e[3*t+1][3*n+3].y)+-2*(e[3*t][3*n].y+e[3*t+3][3*n+3].y)+3*(e[3*t+3][3*n+2].y+e[3*t+1][3*n].y)+-1*e[3*t+3][3*n].y)/9,e[3*t+2][3*n+1].y=(-4*e[3*t+3][3*n].y+6*(e[3*t+3][3*n+1].y+e[3*t+2][3*n].y)+-2*(e[3*t+3][3*n+3].y+e[3*t][3*n].y)+3*(e[3*t][3*n+1].y+e[3*t+2][3*n+3].y)+-1*e[3*t][3*n+3].y)/9,e[3*t+2][3*n+2].y=(-4*e[3*t+3][3*n+3].y+6*(e[3*t+3][3*n+2].y+e[3*t+2][3*n+3].y)+-2*(e[3*t+3][3*n].y+e[3*t][3*n+3].y)+3*(e[3*t][3*n+2].y+e[3*t+2][3*n].y)+-1*e[3*t][3*n].y)/9}}this.nodes=e,this.colors=s}paintMesh(t,e){let s=(this.nodes.length-1)/3,r=(this.nodes[0].length-1)/3;if(&quot;bilinear&quot;===this.type||s&lt;2||r&lt;2){let n;for(let o=0;o&lt;s;++o)for(let s=0;s&lt;r;++s){let r=[];for(let t=3*o,e=3*o+4;t&lt;e;++t)r.push(this.nodes[t].slice(3*s,3*s+4));let i=[];i.push(this.colors[o].slice(s,s+2)),i.push(this.colors[o+1].slice(s,s+2)),(n=new m(r,i)).paint(t,e)}}else{let n,o,a,h,l,d,u;const x=s,g=r;s++,r++;let w=new Array(s);for(let t=0;t&lt;s;++t){w[t]=new Array(r);for(let e=0;e&lt;r;++e)w[t][e]=[],w[t][e][0]=this.nodes[3*t][3*e],w[t][e][1]=this.colors[t][e]}for(let t=0;t&lt;s;++t)for(let e=0;e&lt;r;++e)0!==t&amp;&amp;t!==x&amp;&amp;(n=i(w[t-1][e][0],w[t][e][0]),o=i(w[t+1][e][0],w[t][e][0]),w[t][e][2]=c(w[t-1][e][1],w[t][e][1],w[t+1][e][1],n,o)),0!==e&amp;&amp;e!==g&amp;&amp;(n=i(w[t][e-1][0],w[t][e][0]),o=i(w[t][e+1][0],w[t][e][0]),w[t][e][3]=c(w[t][e-1][1],w[t][e][1],w[t][e+1][1],n,o));for(let t=0;t&lt;r;++t){w[0][t][2]=[],w[x][t][2]=[];for(let e=0;e&lt;4;++e)n=i(w[1][t][0],w[0][t][0]),o=i(w[x][t][0],w[x-1][t][0]),w[0][t][2][e]=n&gt;0?2*(w[1][t][1][e]-w[0][t][1][e])/n-w[1][t][2][e]:0,w[x][t][2][e]=o&gt;0?2*(w[x][t][1][e]-w[x-1][t][1][e])/o-w[x-1][t][2][e]:0}for(let t=0;t&lt;s;++t){w[t][0][3]=[],w[t][g][3]=[];for(let e=0;e&lt;4;++e)n=i(w[t][1][0],w[t][0][0]),o=i(w[t][g][0],w[t][g-1][0]),w[t][0][3][e]=n&gt;0?2*(w[t][1][1][e]-w[t][0][1][e])/n-w[t][1][3][e]:0,w[t][g][3][e]=o&gt;0?2*(w[t][g][1][e]-w[t][g-1][1][e])/o-w[t][g-1][3][e]:0}for(let s=0;s&lt;x;++s)for(let r=0;r&lt;g;++r){let n=i(w[s][r][0],w[s+1][r][0]),o=i(w[s][r+1][0],w[s+1][r+1][0]),c=i(w[s][r][0],w[s][r+1][0]),x=i(w[s+1][r][0],w[s+1][r+1][0]),g=[[],[],[],[]];for(let t=0;t&lt;4;++t){(d=[])[0]=w[s][r][1][t],d[1]=w[s+1][r][1][t],d[2]=w[s][r+1][1][t],d[3]=w[s+1][r+1][1][t],d[4]=w[s][r][2][t]*n,d[5]=w[s+1][r][2][t]*n,d[6]=w[s][r+1][2][t]*o,d[7]=w[s+1][r+1][2][t]*o,d[8]=w[s][r][3][t]*c,d[9]=w[s+1][r][3][t]*x,d[10]=w[s][r+1][3][t]*c,d[11]=w[s+1][r+1][3][t]*x,d[12]=0,d[13]=0,d[14]=0,d[15]=0,u=f(d);for(let e=0;e&lt;9;++e){g[t][e]=[];for(let s=0;s&lt;9;++s)g[t][e][s]=p(u,e/8,s/8),g[t][e][s]&gt;255?g[t][e][s]=255:g[t][e][s]&lt;0&amp;&amp;(g[t][e][s]=0)}}h=[];for(let t=3*s,e=3*s+4;t&lt;e;++t)h.push(this.nodes[t].slice(3*r,3*r+4));l=y(h);for(let s=0;s&lt;8;++s)for(let r=0;r&lt;8;++r)(a=new m(l[s][r],[[[g[0][s][r],g[1][s][r],g[2][s][r],g[3][s][r]],[g[0][s][r+1],g[1][s][r+1],g[2][s][r+1],g[3][s][r+1]]],[[g[0][s+1][r],g[1][s+1][r],g[2][s+1][r],g[3][s+1][r]],[g[0][s+1][r+1],g[1][s+1][r+1],g[2][s+1][r+1],g[3][s+1][r+1]]]])).paint(t,e)}}}transform(t){if(t instanceof x)for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].add(t);else if(t instanceof g)for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].transform(t)}scale(t){for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].scale(t)}}document.querySelectorAll(&quot;rect,circle,ellipse,path,text&quot;).forEach((r,n)=&gt;{let o=r.getAttribute(&quot;id&quot;);o||(o=&quot;patchjs_shape&quot;+n,r.setAttribute(&quot;id&quot;,o));const i=r.style.fill.match(/^url\(\s*&quot;?\s*#([^\s&quot;]+)&quot;?\s*\)/),a=r.style.stroke.match(/^url\(\s*&quot;?\s*#([^\s&quot;]+)&quot;?\s*\)/);if(i&amp;&amp;i[1]){const a=document.getElementById(i[1]);if(a&amp;&amp;&quot;meshgradient&quot;===a.nodeName){const i=r.getBBox();let l=document.createElementNS(s,&quot;canvas&quot;);d(l,{width:i.width,height:i.height});const c=l.getContext(&quot;2d&quot;);let u=c.createImageData(i.width,i.height);const f=new b(a);&quot;objectBoundingBox&quot;===a.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;f.scale(new x(i.width,i.height));const p=a.getAttribute(&quot;gradientTransform&quot;);null!=p&amp;&amp;f.transform(h(p)),&quot;userSpaceOnUse&quot;===a.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;f.transform(new x(-i.x,-i.y)),f.paintMesh(u.data,l.width),c.putImageData(u,0,0);const y=document.createElementNS(t,&quot;image&quot;);d(y,{width:i.width,height:i.height,x:i.x,y:i.y});let g=l.toDataURL();y.setAttributeNS(e,&quot;xlink:href&quot;,g),r.parentNode.insertBefore(y,r),r.style.fill=&quot;none&quot;;const w=document.createElementNS(t,&quot;use&quot;);w.setAttributeNS(e,&quot;xlink:href&quot;,&quot;#&quot;+o);const m=&quot;patchjs_clip&quot;+n,M=document.createElementNS(t,&quot;clipPath&quot;);M.setAttribute(&quot;id&quot;,m),M.appendChild(w),r.parentElement.insertBefore(M,r),y.setAttribute(&quot;clip-path&quot;,&quot;url(#&quot;+m+&quot;)&quot;),u=null,l=null,g=null}}if(a&amp;&amp;a[1]){const o=document.getElementById(a[1]);if(o&amp;&amp;&quot;meshgradient&quot;===o.nodeName){const i=parseFloat(r.style.strokeWidth.slice(0,-2))*(parseFloat(r.style.strokeMiterlimit)||parseFloat(r.getAttribute(&quot;stroke-miterlimit&quot;))||1),a=r.getBBox(),l=Math.trunc(a.width+i),c=Math.trunc(a.height+i),u=Math.trunc(a.x-i/2),f=Math.trunc(a.y-i/2);let p=document.createElementNS(s,&quot;canvas&quot;);d(p,{width:l,height:c});const y=p.getContext(&quot;2d&quot;);let g=y.createImageData(l,c);const w=new b(o);&quot;objectBoundingBox&quot;===o.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;w.scale(new x(l,c));const m=o.getAttribute(&quot;gradientTransform&quot;);null!=m&amp;&amp;w.transform(h(m)),&quot;userSpaceOnUse&quot;===o.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;w.transform(new x(-u,-f)),w.paintMesh(g.data,p.width),y.putImageData(g,0,0);const M=document.createElementNS(t,&quot;image&quot;);d(M,{width:l,height:c,x:0,y:0});let S=p.toDataURL();M.setAttributeNS(e,&quot;xlink:href&quot;,S);const k=&quot;pattern_clip&quot;+n,A=document.createElementNS(t,&quot;pattern&quot;);d(A,{id:k,patternUnits:&quot;userSpaceOnUse&quot;,width:l,height:c,x:u,y:f}),A.appendChild(M),o.parentNode.appendChild(A),r.style.stroke=&quot;url(#&quot;+k+&quot;)&quot;,g=null,p=null,S=null}}})}();
</script><path
     style="font-style:italic;font-weight:bold;font-size:96px;line-height:1;font-family:Calibri;-inkscape-font-specification:'Calibri Bold Italic';font-variant-ligatures:none;text-align:center;letter-spacing:1px;word-spacing:1px;text-orientation:upright;text-anchor:middle;fill:url(#radialGradient2-0);stroke:#e1ae53;stroke-width:4.19878;stroke-linejoin:bevel;stroke-opacity:0.836773;paint-order:stroke fill markers"
     d="m 1110.5508,733.70786 q 0.332,0.4065 0.8528,1.2517 0.5717,0.8037 1.1662,1.8428 0.5945,1.0392 1.1289,2.2122 0.5437,1.0806 0.852,2.1841 0.3176,1.0111 0.3261,1.8512 0.01,0.8403 -0.4488,1.2136 -0.7115,0.5811 -2.2765,0.8428 -1.6066,0.2108 -3.7628,0.786 -2.1469,0.4826 -4.7283,1.5743 -2.6228,1.0408 -5.2651,3.1987 -2.744,2.2409 -4.0524,4.5801 -1.2577,2.2976 -1.4398,4.5639 -0.2235,2.2155 0.4532,4.2887 0.6859,1.9809 1.9724,3.5561 1.4939,1.8293 3.5706,2.5051 2.0351,0.625 4.5554,0.5996 2.4789,-0.076 5.3228,-0.5352 2.8946,-0.5005 5.8723,-0.8994 3.0286,-0.4404 6.1629,-0.5437 3.1438,-0.1957 6.2451,0.4902 3.0599,0.6352 6.0079,2.3781 2.9056,1.6938 5.5209,4.8935 3.9008,4.7765 5.3313,10.4693 1.3889,5.642 0.3218,11.5958 -1.0577,5.8613 -4.6774,11.6974 -3.5688,5.7945 -9.6665,10.7743 -3.3029,2.6973 -6.5541,4.4208 -3.2097,1.7742 -6.0172,2.7964 -2.7567,0.9807 -4.8942,1.3711 -2.1791,0.3396 -3.513,0.1584 -1.3339,-0.1812 -2.5788,-1.7056 -0.3319,-0.4066 -0.8943,-1.3026 -0.5624,-0.8959 -1.1569,-1.9351 -0.5852,-1.1315 -1.1196,-2.3044 -0.5759,-1.2238 -0.8842,-2.3273 -0.3082,-1.1035 -0.3167,-1.9436 0.042,-0.8817 0.5505,-1.2967 0.8638,-0.7054 2.6965,-0.8468 1.842,-0.2338 4.409,-0.7208 2.5254,-0.5378 5.6285,-1.7167 3.103,-1.1789 6.5075,-3.9592 2.9981,-2.4484 4.6114,-5.0366 1.6641,-2.6295 2.1096,-5.1957 0.4454,-2.566 -0.2033,-4.9162 -0.6394,-2.4425 -2.3408,-4.5259 -1.5355,-1.88 -3.6121,-2.5558 -2.0766,-0.6758 -4.5554,-0.5997 -2.4696,-0.016 -5.272,0.4938 -2.7516,0.4683 -5.7293,0.8672 -2.9777,0.399 -6.0705,0.5531 -3.042,0.1126 -6.1019,-0.5226 -3.0506,-0.7274 -5.9986,-2.4704 -2.9483,-1.7425 -5.6454,-5.0458 -3.7349,-4.5732 -5.0594,-9.929 -1.3246,-5.3558 -0.3134,-10.7556 0.9697,-5.4507 4.2471,-10.6684 3.236,-5.2686 8.6731,-9.7089 2.5407,-2.0749 5.1593,-3.5358 2.5772,-1.5117 4.9552,-2.4374 2.3367,-0.9765 4.2387,-1.344 1.9022,-0.3676 2.8253,-0.2744 0.8816,0.042 1.5414,0.4353 0.669,0.3006 1.333,1.1137 z m 50.4831,-37.5521 q 2.7679,2.416 5.222,5.6901 2.4974,3.2247 4.2055,7.1541 1.6588,3.8861 2.337,8.3968 0.672,4.418 -0.1057,9.3996 -0.784,4.8889 -3.2648,10.1255 -2.5302,5.1936 -7.4915,10.8776 l -5.8241,6.6725 16.8818,21.9629 q 0.408,0.5302 0.4583,1.2708 0.05,0.7406 -0.436,1.7965 -0.4862,1.056 -1.509,2.4273 -0.9735,1.4145 -2.6129,3.2928 -1.5961,1.8287 -2.823,2.935 -1.1342,1.0999 -1.9854,1.5762 -0.851,0.4762 -1.4127,0.4214 -0.6111,-0.098 -1.0252,-0.7212 l -47.5298,-61.776 q -1.9348,-2.4725 -1.7773,-4.9476 0.108,-2.5181 2.0062,-4.6928 l 12.209,-13.9878 q 2.2434,-2.5702 4.2099,-4.424 1.917,-1.897 4.0381,-3.5291 3.2248,-2.4973 6.5312,-3.7911 3.3496,-1.3435 6.6946,-1.3845 3.2956,-0.084 6.5929,1.2262 3.2478,1.2674 6.4111,4.0285 z m -10.4674,14.9854 q -2.3724,-2.0708 -5.0946,-2.444 -2.7222,-0.3731 -5.485,1.3954 -1.2519,0.7359 -2.4724,1.9347 -1.27,1.1557 -2.6505,2.7374 l -5.0044,5.7334 17.988,23.1897 5.177,-5.9312 q 2.459,-2.8172 3.5421,-5.3551 1.0769,-2.6305 1.2838,-5.0625 0.2499,-2.4812 -0.3269,-4.8135 -0.5337,-2.3816 -1.6039,-4.4477 -1.0271,-2.1157 -2.3993,-3.8359 -1.4217,-1.7633 -2.9539,-3.1007 z m 85.677,-33.6278 q 2.2047,0.9084 3.3612,1.6602 1.1861,0.701 1.3492,1.8522 0.1362,1.0674 -0.7767,2.8896 -0.8561,1.8553 -2.6434,4.9141 -1.2574,2.1526 -2.1654,3.4458 -0.8511,1.3262 -1.5079,1.9302 -0.6569,0.604 -1.2755,0.6225 -0.6187,0.018 -1.4448,-0.3883 l -15.886,-6.6232 -16.0861,27.5293 9.9525,15.9974 q 0.5613,0.86 0.8298,1.7008 0.2119,0.8077 -0.068,1.936 -0.2794,1.1285 -1.1261,2.8374 -0.8134,1.6522 -2.2366,4.0879 -1.5226,2.6058 -2.52,3.9226 -1.0305,1.3734 -1.9184,1.4625 -0.9776,0.1126 -1.9357,-0.9786 -0.9909,-1.0349 -2.3446,-3.2697 l -44.2419,-73.5703 q -0.632,-1.1291 -0.8674,-2.0266 -0.2921,-0.9306 0.02,-2.1156 0.289,-1.2749 1.2585,-3.064 0.9458,-1.8788 2.6338,-4.7676 1.9529,-3.3421 3.1915,-5.2018 1.215,-1.9495 2.1839,-2.8272 0.912,-0.9107 1.7337,-0.8865 0.8217,0.024 1.9642,0.5398 z m -66.7636,-9.1495 -0.033,0.057 21.589,34.5747 12.048,-20.6185 z m 27.8852,-89.8303 q 1.7297,0.6187 4.412,2.2749 2.7043,1.5948 4.1645,3.1619 1.4202,1.4836 1.0225,2.5955 -0.2872,0.8029 -1.6734,1.5614 -1.4478,0.7363 -3.2623,2.1078 -1.8145,1.3716 -3.7972,3.7978 -2.0445,2.4042 -3.525,6.5429 -1.6351,4.5713 -1.1299,9.0023 0.4436,4.409 2.4098,8.4568 1.9045,4.0257 5.0007,7.6416 3.0962,3.6159 6.7664,6.6011 3.6923,2.9234 7.6277,5.1672 3.8956,2.1602 7.4786,3.4414 4.3241,1.5469 7.9737,1.6678 3.6717,0.059 6.563,-1.2059 2.8912,-1.2651 5.0637,-3.8324 2.1108,-2.5895 3.4366,-6.2959 1.5689,-4.3859 1.7471,-7.806 0.2003,-3.4817 -0.1382,-6.0416 -0.3164,-2.6216 -0.7348,-4.3738 -0.3963,-1.8139 0.024,-2.9877 0.2873,-0.803 0.9933,-0.8291 0.6665,-0.1101 1.7167,0.2656 0.4327,0.154 1.253,0.5876 0.8204,0.4333 1.8661,1.0162 0.9808,0.5663 2.1953,1.2675 1.1477,0.688 2.1486,1.3956 0.9395,0.6847 1.7116,1.4483 0.7322,0.68 1.1686,1.6026 0.4364,0.9225 0.8413,3.297 0.343,2.3524 0.2531,5.5254 -0.09,3.1729 -0.7537,6.9768 -0.602,3.8258 -2.0604,7.9028 -2.4086,6.7333 -6.1445,11.5285 -3.7138,4.7335 -8.7063,7.1979 -4.9925,2.4645 -11.2195,2.5364 -6.227,0.072 -13.5779,-2.5576 -5.7449,-2.055 -11.5023,-5.4384 -5.8195,-3.4049 -10.9098,-7.874 -5.0684,-4.5304 -9.0772,-10.0753 -4.0088,-5.5449 -6.1944,-11.901 -2.2255,-6.4399 -2.319,-13.5804 -0.071,-7.2022 2.6906,-14.9238 1.5468,-4.3241 3.8434,-7.8226 2.2569,-3.5823 4.7559,-5.8936 2.5211,-2.373 4.1543,-3.0429 1.5935,-0.754 3.4467,-0.091 z m 7.9181,-59.8059 q 0.3791,0.1057 1.2923,0.4952 0.9307,0.3264 2.0791,0.8497 1.0853,0.5054 2.2615,1.1731 1.1782,0.6641 2.1107,1.4712 0.8885,0.7235 1.3908,1.6118 0.5197,0.8254 0.3091,1.5839 l -8.1107,29.2047 18.8519,9.5932 6.8818,-24.7797 q 0.2457,-0.8849 0.9832,-1.0887 0.7375,-0.2037 1.8753,0.1123 0.4425,0.1229 1.3556,0.5126 0.8675,0.309 2.0159,0.8322 1.0853,0.5054 2.1981,1.1559 1.1162,0.6445 1.9842,1.4362 0.8885,0.7234 1.3452,1.531 0.4565,0.8078 0.2458,1.5663 l -6.8642,24.7165 21.7738,11.0856 8.216,-29.5839 q 0.2107,-0.7585 1.0114,-0.9448 0.7374,-0.2037 2.0017,0.1474 0.4425,0.123 1.3731,0.4496 0.9307,0.3264 2.0615,0.9128 1.0854,0.5054 2.1981,1.1559 1.1163,0.6445 2.0475,1.4538 0.8885,0.7233 1.3451,1.531 0.4566,0.8078 0.2284,1.6295 l -11.4112,41.0888 q -0.2808,1.0114 -0.7619,1.7629 -0.5443,0.734 -1.3345,1.1274 -0.8358,0.3126 -1.8367,0.239 -1.064,-0.091 -2.3845,-0.7304 l -67.3372,-34.089 q -2.6234,-1.3414 -3.3505,-3.3817 -0.7903,-2.0578 -0.2109,-4.1439 l 11.3058,-40.7095 q 0.4564,-1.6434 2.8585,-0.9764 z m 29.3568,-76.1148 q 0.4285,0.1654 1.3597,0.6671 0.8944,0.4159 1.9615,1.1117 1.0929,0.631 2.2343,1.4978 1.1056,0.7788 1.956,1.6714 0.8744,0.8308 1.287,1.7643 0.4362,0.8723 0.1521,1.6065 l -7.6953,19.8849 58.8902,37.4222 q 0.5406,0.4207 0.8408,1.0992 0.3001,0.6789 0.2034,1.8375 -0.073,1.0973 -0.5049,2.7592 -0.4084,1.6005 -1.3319,3.9868 -0.8996,2.3248 -1.6752,3.7835 -0.7755,1.4586 -1.4129,2.1968 -0.6137,0.6769 -1.2216,0.7935 -0.5842,0.055 -1.1487,-0.3039 l -58.8901,-37.4222 -7.6243,19.7013 q -0.3552,0.9178 -1.1702,1.0244 -0.7914,0.045 -1.954,-0.4043 -0.4896,-0.1892 -1.3835,-0.6058 -0.9318,-0.501 -2.0231,-1.1346 -1.1293,-0.7178 -2.2343,-1.4978 -1.1428,-0.8644 -1.9935,-1.7563 -0.8507,-0.8921 -1.2257,-1.7407 -0.4363,-0.8723 -0.1522,-1.6065 l 21.5942,-55.8 q 0.284,-0.7342 1.0992,-0.8409 0.8387,-0.1678 2.0624,0.3058 z m 81.6109,17.427 q 0.5304,0.4078 0.7686,1.111 0.2384,0.7029 0.039,1.8482 -0.1703,1.0865 -0.8075,2.6742 -0.5783,1.6167 -1.6816,3.8524 -1.1322,2.2944 -2.0346,3.6782 -0.8144,1.3539 -1.515,2.0324 -0.7006,0.6784 -1.3165,0.7404 -0.6158,0.062 -1.117,-0.405 l -64.8981,-49.9495 q -0.5597,-0.3486 -0.7977,-1.0521 -0.2094,-0.7617 -0.039,-1.8483 0.1994,-1.1452 0.8075,-2.6742 0.5784,-1.6167 1.6816,-3.8522 1.1032,-2.2357 1.9765,-3.5607 0.8435,-1.4127 1.544,-2.0911 0.7297,-0.7374 1.3164,-0.7404 0.6159,-0.062 1.1462,0.346 z m 63.5105,-100.6816 q 0.4245,0.5374 0.6286,1.1609 0.2042,0.6235 -0.092,1.6177 -0.2582,0.9406 -1.0915,2.3593 -0.7796,1.4564 -2.1719,3.4449 -1.4676,2.0957 -2.532,3.2727 -1.0106,1.2144 -1.7685,1.7248 -0.758,0.5107 -1.3385,0.4246 -0.5427,-0.14 -1.0048,-0.624 l -48.6856,-50.9116 -0.075,0.1072 34.4448,71.1339 q 0.892,1.5856 0.059,3.8053 -0.8495,2.1281 -3.2204,5.5138 -2.446,3.4931 -4.1285,4.6376 -1.6986,1.0532 -2.6498,0.4672 l -62.4159,-31.5329 -0.075,0.1071 48.7019,51.0028 q 0.4621,0.4839 0.6286,1.1612 0.2041,0.6235 -0.092,1.6177 -0.2582,0.9405 -1.0915,2.3592 -0.7419,1.4028 -2.172,3.445 -1.4299,2.042 -2.4943,3.2189 -1.0107,1.2144 -1.7686,1.7249 -0.7579,0.5105 -1.3383,0.4244 -0.5804,-0.086 -1.0048,-0.624 l -53.3071,-55.7496 q -1.1553,-1.2095 -1.8538,-2.4996 -0.6608,-1.3437 -0.7949,-2.639 -0.1503,-1.3867 0.2262,-2.725 0.3764,-1.3382 1.2419,-2.5741 l 6.1717,-8.8136 q 1.6557,-2.3645 3.2522,-3.7293 1.5428,-1.4025 3.2627,-1.7999 1.72,-0.3975 3.6548,0.1565 1.9724,0.5001 4.3262,1.828 l 46.0839,22.2589 0.1881,-0.2688 -24.6715,-52.8369 q -1.3432,-2.5425 -2.0953,-4.671 -0.8058,-2.1661 -0.87,-4.1332 -0.08,-2.0585 0.6188,-3.9718 0.6453,-1.951 2.1882,-4.1542 l 6.9995,-9.9957 q 0.9408,-1.3434 1.9943,-2.0473 1.0536,-0.7039 2.1823,-0.7146 1.1125,-0.1017 2.2626,0.5433 1.1338,0.5542 2.3269,1.7094 z m 7.3482,-118.1602 q 0.2697,0.2867 0.8479,1.0938 0.6261,0.7621 1.3362,1.8054 0.6653,0.9953 1.3248,2.176 0.6595,1.1809 1.0408,2.3531 0.3841,1.0794 0.3525,2.0995 0.016,0.9751 -0.5576,1.5142 l -22.0878,20.7564 11.1371,17.9829 18.7412,-17.6114 q 0.6694,-0.629 1.4054,-0.4204 0.7362,0.2085 1.5449,1.0691 0.3143,0.335 0.8927,1.1417 0.5812,0.7142 1.2914,1.7574 0.6652,0.9953 1.2798,2.1283 0.6146,1.133 0.9509,2.2574 0.3842,1.0795 0.3554,2.0068 -0.029,0.9273 -0.6026,1.4665 l -18.6933,17.5665 12.8605,20.7748 22.3746,-21.0258 q 0.5738,-0.5392 1.3549,-0.2829 0.736,0.2086 1.6346,1.1648 0.3143,0.335 0.9406,1.0967 0.6261,0.7621 1.2885,1.8502 0.6651,0.9954 1.2797,2.1284 0.6146,1.133 0.9959,2.3052 0.3842,1.0794 0.3554,2.0067 -0.029,0.9273 -0.6504,1.5114 l -31.0759,29.2026 q -0.7649,0.7189 -1.5661,1.1116 -0.8462,0.345 -1.7257,0.2712 -0.8767,-0.1664 -1.694,-0.7488 -0.8622,-0.6303 -1.6595,-1.8616 l -39.8728,-64.0821 q -1.5465,-2.508 -1.1093,-4.6294 0.3923,-2.1693 1.9701,-3.6518 l 30.789,-28.933 q 1.2431,-1.1682 2.9502,0.6486 z"
     id="text1-7"
     aria-label="SPACETIME" /><path
     d="m 670.8854,486.50636 q 0.3757,0.37569 0.641,0.68486 0.2433,0.2871 0.3757,0.55244 0.1329,0.2206 0.1988,0.464 0.066,0.19907 0.066,0.77352 0,0.53025 -0.2431,1.61296 -0.2652,1.06075 -0.7734,2.23193 -0.5082,1.12688 -1.2817,2.29811 -0.7733,1.17107 -1.8119,2.2097 -2.1434,2.14335 -4.5078,3.0936 -2.3644,0.9502 -4.8392,0.72906 -2.4749,-0.26506 -5.0382,-1.63511 -2.5632,-1.4142 -5.1486,-3.9996 -2.9389,-2.93889 -4.3311,-5.74515 -1.392,-2.85065 -1.5025,-5.43589 -0.088,-2.6075 0.9501,-4.92761 1.0386,-2.36453 3.0052,-4.33114 0.9503,-0.9502 2.0109,-1.6573 1.0827,-0.72907 2.1212,-1.19315 1.0386,-0.464 1.9888,-0.66291 0.9723,-0.22099 1.5026,-0.22099 0.5304,0 0.7734,0.066 0.2652,0.044 0.5525,0.19895 0.2653,0.13234 0.5524,0.37561 0.2871,0.24322 0.6848,0.641 0.8618,0.8618 1.0165,1.41424 0.1326,0.53028 -0.1547,0.81758 -0.3315,0.33141 -1.127,0.4198 -0.7954,0.044 -1.9003,0.26527 -1.1049,0.22094 -2.4085,0.81753 -1.3038,0.55239 -2.5855,1.83401 -2.6295,2.62959 -2.0108,6.07677 0.6188,3.40292 4.4637,7.24782 1.9224,1.9224 3.7344,3.02729 1.8119,1.06071 3.4913,1.32589 1.6793,0.26513 3.182,-0.26518 1.5026,-0.5746 2.8284,-1.90041 1.2595,-1.2595 1.8119,-2.60748 0.5524,-1.34789 0.7735,-2.49692 0.221,-1.19322 0.3093,-2.03292 0.088,-0.88388 0.3535,-1.14907 0.1547,-0.1547 0.3536,-0.17679 0.1989,-0.022 0.4861,0.13259 0.2873,0.11052 0.6409,0.41981 0.3531,0.26551 0.7951,0.70748 z m 16.5286,-30.80324 q 2.4307,2.43065 3.8449,5.12643 1.3921,2.6738 1.591,5.43598 0.221,2.73993 -0.8618,5.50212 -1.0827,2.71799 -3.6018,5.23714 -2.4527,2.45265 -5.0161,3.5576 -2.5411,1.08268 -5.1486,0.90585 -2.6074,-0.1767 -5.1928,-1.56888 -2.5853,-1.39204 -5.1044,-3.91112 -2.4307,-2.43069 -3.8449,-5.08225 -1.4142,-2.69602 -1.6352,-5.43596 -0.1989,-2.76219 0.8839,-5.48009 1.0827,-2.71798 3.6239,-5.25918 2.4528,-2.45273 4.9939,-3.53536 2.5633,-1.10504 5.1708,-0.92817 2.6075,0.17671 5.1927,1.56883 2.6075,1.37013 5.1045,3.86706 z m -3.6018,4.08792 q -1.6131,-1.61308 -3.3588,-2.73995 -1.7235,-1.14914 -3.4914,-1.5468 -1.7676,-0.39784 -3.5575,0.15463 -1.812,0.53023 -3.5577,2.27594 -1.613,1.61308 -2.2097,3.35878 -0.5745,1.72359 -0.2652,3.53552 0.2873,1.7899 1.348,3.60179 1.0828,1.7899 2.7842,3.49144 1.6352,1.63507 3.3587,2.7843 1.7457,1.12684 3.5135,1.52456 1.7678,0.35358 3.5797,-0.17679 1.7899,-0.55242 3.5355,-2.29797 1.5911,-1.59107 2.1876,-3.3367 0.5967,-1.74574 0.3095,-3.53556 -0.2873,-1.78989 -1.3701,-3.57964 -1.0827,-1.78997 -2.8063,-3.51355 z m 36.9684,-17.12521 q 0.1768,0.1768 0.221,0.39773 0.022,0.19889 -0.088,0.48607 -0.1105,0.2873 -0.4199,0.68503 -0.3097,0.39739 -0.84,0.92786 -0.5524,0.55239 -0.9498,0.86211 -0.3973,0.30964 -0.6851,0.41989 -0.2871,0.11035 -0.486,0.088 -0.2209,-0.044 -0.3977,-0.22094 l -11.6452,-11.6452 q -1.7015,-1.70146 -3.0052,-2.47488 -1.3037,-0.77338 -2.5633,-1.0164 -1.2595,-0.2431 -2.4749,0.17679 -1.1932,0.39772 -2.2539,1.4584 -1.37,1.37001 -1.7677,3.71231 -0.3978,2.34229 -0.022,5.72312 l 13.8991,13.8991 q 0.1768,0.17679 0.221,0.39778 0.022,0.19884 -0.088,0.48603 -0.1105,0.2873 -0.4198,0.68507 -0.3097,0.3974 -0.8621,0.94979 -0.5304,0.53031 -0.9278,0.84004 -0.3974,0.30971 -0.7071,0.44192 -0.2872,0.11056 -0.4861,0.088 -0.199,-0.0661 -0.3758,-0.2429 l -19.8874,-19.88738 q -0.1768,-0.17667 -0.2208,-0.35374 -0.066,-0.19906 0.044,-0.48623 0.089,-0.30931 0.3757,-0.64076 0.2655,-0.3532 0.7737,-0.8614 0.4862,-0.48624 0.8394,-0.75173 0.3533,-0.3095 0.6409,-0.37568 0.2651,-0.088 0.4639,-0.022 0.1989,0.022 0.3757,0.1989 l 2.6296,2.62943 q -0.1989,-3.5576 0.5966,-6.07664 0.7955,-2.56336 2.4969,-4.2647 1.9888,-1.98884 4.0218,-2.65175 2.0329,-0.7071 3.9995,-0.41989 1.9667,0.2873 3.8449,1.45841 1.8782,1.12698 3.9996,3.2483 z m 18.6278,-24.68248 q 0.3757,0.37568 0.641,0.68481 0.2433,0.2871 0.3757,0.55248 0.1329,0.22061 0.1989,0.464 0.066,0.19907 0.066,0.7734 0,0.53044 -0.2431,1.61315 -0.2651,1.06056 -0.7733,2.23175 -0.5082,1.12691 -1.2817,2.29814 -0.7733,1.17106 -1.8119,2.20966 -2.1434,2.14339 -4.5078,3.0936 -2.3644,0.95024 -4.8393,0.72918 -2.4749,-0.26518 -5.0381,-1.63519 -2.5632,-1.4142 -5.1486,-3.9996 -2.9389,-2.93889 -4.3311,-5.74515 -1.3922,-2.8505 -1.5026,-5.43593 -0.088,-2.60752 0.9502,-4.92757 1.0386,-2.36445 3.0052,-4.33114 0.9501,-0.95005 2.0108,-1.65715 1.0828,-0.72934 2.1213,-1.1933 1.0386,-0.46401 1.9888,-0.66291 0.9722,-0.22091 1.5026,-0.22091 0.5303,0 0.7733,0.066 0.2653,0.044 0.5525,0.19891 0.2653,0.13238 0.5524,0.37561 0.2871,0.24326 0.6848,0.64099 0.8619,0.86186 1.0166,1.41421 0.1325,0.53036 -0.1547,0.81758 -0.3315,0.33149 -1.127,0.41989 -0.7955,0.044 -1.9003,0.26513 -1.1049,0.22098 -2.4086,0.81766 -1.3038,0.5524 -2.5854,1.83401 -2.6295,2.62952 -2.0108,6.07669 0.6187,3.403 4.4636,7.2479 1.9224,1.92241 3.7344,3.02724 1.812,1.06068 3.4914,1.32586 1.6793,0.26513 3.182,-0.26518 1.5025,-0.57452 2.8283,-1.90033 1.2596,-1.25958 1.812,-2.60747 0.5524,-1.34798 0.7734,-2.49692 0.221,-1.19328 0.3094,-2.03301 0.088,-0.88388 0.3535,-1.14907 0.1547,-0.15462 0.3536,-0.17679 0.1988,-0.022 0.4861,0.13259 0.2873,0.11052 0.6408,0.4199 0.3532,0.2655 0.7952,0.70747 z m 14.7388,-30.29505 q 0.8619,0.86173 0.7955,1.67926 -0.066,0.77348 -0.6187,1.32586 l -13.0373,13.03725 q 1.6573,1.65742 3.3146,2.65176 1.6573,0.99431 3.3808,1.17111 1.7236,0.17685 3.4693,-0.55249 1.7457,-0.72919 3.5355,-2.519 1.4142,-1.41421 2.2981,-2.74001 0.8618,-1.34799 1.37,-2.4307 0.5304,-1.10491 0.8176,-1.8341 0.2873,-0.77337 0.5525,-1.0385 0.1546,-0.15465 0.3535,-0.17679 0.1991,-0.066 0.4199,0.022 0.221,0.0881 0.5303,0.35346 0.309,0.22131 0.7068,0.61908 0.2873,0.28715 0.4863,0.53011 0.1769,0.22082 0.3092,0.44219 0.1327,0.17652 0.1767,0.39771 0.066,0.19907 0.066,0.46399 0,0.22107 -0.3093,1.10488 -0.3315,0.86181 -1.0165,2.07711 -0.685,1.21539 -1.7456,2.67379 -1.0165,1.45841 -2.4307,2.87262 -2.4528,2.4528 -4.9941,3.6239 -2.5189,1.14908 -5.1265,1.06068 -2.6074,-0.088 -5.2811,-1.48048 -2.6737,-1.39213 -5.3696,-4.088 -2.5632,-2.56323 -3.9333,-5.2591 -1.3921,-2.71799 -1.5689,-5.36962 -0.1768,-2.69578 0.8397,-5.21494 0.9943,-2.54113 3.182,-4.72875 2.3423,-2.34229 4.7287,-3.22618 2.4086,-0.90593 4.7509,-0.68507 2.3202,0.19903 4.5299,1.43645 2.2098,1.19319 4.1543,3.1377 z m -4.7509,2.58539 q -2.8061,-2.9391 -5.7893,-3.22626 -2.9611,-0.30937 -5.5906,2.32022 -1.3479,1.34789 -1.8563,2.87264 -0.5081,1.52465 -0.3535,3.04937 0.1548,1.52468 0.906,3.02728 0.7292,1.48055 1.9004,2.74002 z m 29.8532,-26.58285 q 2.6074,2.60755 4.1101,5.25911 1.5247,2.6295 1.8783,5.19278 0.3534,2.51916 -0.4641,4.92761 -0.8397,2.38665 -2.9168,4.46369 -0.884,0.88396 -1.812,1.45841 -0.9281,0.57451 -2.0329,0.928 -1.0827,0.3315 -2.3644,0.46409 -1.2816,0.13266 -2.8505,0.15462 l 9.9437,9.9437 q 0.1767,0.17678 0.2209,0.39783 0.044,0.22088 -0.066,0.50818 -0.1105,0.28721 -0.4198,0.68499 -0.3097,0.39739 -0.8622,0.94986 -0.5303,0.53031 -0.9277,0.84004 -0.3974,0.30971 -0.7071,0.44192 -0.2872,0.11047 -0.5082,0.066 -0.199,-0.0661 -0.3758,-0.2429 l -27.776,-27.776 q -0.1989,-0.19891 -0.2429,-0.37582 -0.066,-0.19906 0.044,-0.48616 0.1104,-0.28721 0.3976,-0.61871 0.2656,-0.3532 0.7075,-0.79514 0.4641,-0.46409 0.7951,-0.70746 0.3313,-0.28744 0.6189,-0.39772 0.2872,-0.11048 0.486,-0.044 0.1989,0.022 0.3978,0.22087 l 2.6737,2.67382 q -0.022,-1.83411 0.1326,-3.35869 0.1547,-1.52483 0.5524,-2.80645 0.3978,-1.32574 1.0608,-2.4307 0.6628,-1.14902 1.6572,-2.14335 2.1655,-2.16551 4.5299,-2.85057 2.3644,-0.68507 4.773,-0.17678 2.4306,0.48612 4.8171,1.98872 2.3645,1.48057 4.53,3.64607 z m -3.4251,4.2647 q -1.5246,-1.52468 -3.1819,-2.69575 -1.6573,-1.21546 -3.3367,-1.74583 -1.6573,-0.55227 -3.2703,-0.26513 -1.6131,0.2873 -3.0274,1.70151 -0.7071,0.7071 -1.1711,1.61303 -0.4861,0.88397 -0.7292,2.05508 -0.2652,1.14914 -0.2873,2.6737 -0.044,1.50269 0.1768,3.44718 l 7.9108,7.91072 q 3.3367,0.3315 5.6568,-0.044 2.3202,-0.3757 3.8007,-1.85618 1.37,-1.37001 1.6794,-3.0052 0.3315,-1.65731 -0.1768,-3.35873 -0.4861,-1.72359 -1.5688,-3.3809 -1.0828,-1.65723 -2.475,-3.0494 z m 28.5495,-11.79975 q 0.6408,0.64067 0.9281,1.10475 0.2872,0.46401 0.2873,0.81758 -10e-5,0.35353 -0.1989,0.86182 -0.1989,0.50819 -0.5746,1.06063 -0.3314,0.55248 -0.7734,1.12702 -0.4417,0.57467 -0.9499,1.08286 -1.5468,1.5468 -3.0494,2.25391 -1.5247,0.68501 -3.0494,0.57451 -1.5468,-0.13259 -3.1378,-1.0606 -1.5911,-0.97216 -3.3146,-2.69582 l -11.6231,-11.62308 -2.7842,2.78433 q -0.3314,0.33135 -0.8839,0.17668 -0.5524,-0.15472 -1.3479,-0.95021 -0.4198,-0.41989 -0.6632,-0.75093 -0.2208,-0.35378 -0.3095,-0.61863 -0.1104,-0.28734 -0.044,-0.48625 0.066,-0.24311 0.243,-0.41989 l 2.7621,-2.7621 -4.729,-4.72888 q -0.1546,-0.15473 -0.2207,-0.35369 -0.044,-0.22106 0.066,-0.5083 0.1104,-0.3315 0.4198,-0.72934 0.3097,-0.39725 0.8401,-0.92772 0.5523,-0.5524 0.9497,-0.86211 0.3974,-0.30971 0.7072,-0.39765 0.2872,-0.11055 0.5082,-0.066 0.221,0.044 0.3756,0.19887 l 4.7288,4.72867 5.1044,-5.10436 q 0.1768,-0.1768 0.3978,-0.22098 0.1991,-0.0661 0.4861,0.0439 0.2873,0.066 0.6187,0.30942 0.3311,0.2434 0.751,0.66329 0.7955,0.79549 0.9502,1.34789 0.1546,0.55243 -0.1768,0.88396 l -5.1044,5.10437 11.0927,11.09276 q 2.055,2.05507 3.7123,2.51907 1.6573,0.41977 3.2262,-1.14906 0.5083,-0.50828 0.8176,-0.9944 0.2873,-0.50828 0.4862,-0.92809 0.1988,-0.41989 0.3313,-0.72915 0.1106,-0.33153 0.2873,-0.5082 0.1105,-0.11055 0.2654,-0.13244 0.1544,-0.067 0.3536,0.044 0.221,0.0881 0.5303,0.30942 0.309,0.22136 0.7068,0.61908 z"
     id="text13-8-1"
     style="font-size:64px;line-height:1;font-family:Calibri;-inkscape-font-specification:Calibri;font-variant-ligatures:none;text-align:center;letter-spacing:1px;word-spacing:1px;text-orientation:upright;text-anchor:middle;fill:#fe4eba;fill-opacity:1;stroke-width:3;stroke-linejoin:bevel;stroke-opacity:0.836773;paint-order:stroke fill markers"
     aria-label="concept" /><path
     d="m 464.9797,674.49819 v 2.9531 q 0,0.6094 -0.1407,0.9844 -0.1172,0.375 -0.3984,0.5859 -0.2578,0.2109 -0.6797,0.2813 -0.3984,0.07 -0.9609,0.07 -0.5625,0 -0.961,-0.07 -0.3984,-0.07 -0.6562,-0.2813 -0.2578,-0.2109 -0.3985,-0.5859 -0.1171,-0.375 -0.1171,-0.9844 0,-0.7031 0.07,-1.2891 0.07,-0.6094 0.2109,-1.1484 0.1641,-0.5391 0.4219,-1.0547 0.2812,-0.5391 0.6562,-1.125 l 3.1641,-4.8047 q 0.1172,-0.1875 0.2578,-0.3047 0.1406,-0.1172 0.3516,-0.1875 0.2109,-0.094 0.4921,-0.1406 0.3047,-0.047 0.7266,-0.047 0.375,0 0.6328,0.047 0.2578,0.023 0.375,0.1172 0.1172,0.07 0.1172,0.2109 0.023,0.1406 -0.094,0.3281 z m -8.3907,0 v 2.9531 q 0,0.6094 -0.1406,0.9844 -0.1172,0.375 -0.3984,0.5859 -0.2578,0.2109 -0.6797,0.2813 -0.3985,0.07 -0.961,0.07 -0.5625,0 -0.9609,-0.07 -0.3984,-0.07 -0.6562,-0.2813 -0.2579,-0.2109 -0.3985,-0.5859 -0.1172,-0.375 -0.1172,-0.9844 0,-0.7031 0.07,-1.2891 0.07,-0.6094 0.211,-1.1484 0.164,-0.5391 0.4218,-1.0547 0.2813,-0.5391 0.6563,-1.125 l 3.1641,-4.8047 q 0.1171,-0.1875 0.2578,-0.3047 0.1406,-0.1172 0.3515,-0.1875 0.211,-0.094 0.4922,-0.1406 0.3047,-0.047 0.7266,-0.047 0.375,0 0.6094,0.047 0.2578,0.023 0.375,0.1172 0.1406,0.07 0.1406,0.2109 0,0.1406 -0.094,0.3281 z m 36.5782,14.2031 q 0,2.7656 -0.6094,4.9687 -0.586,2.2032 -1.7578,3.75 -1.1485,1.5235 -2.8594,2.3672 -1.7109,0.8203 -3.9141,0.8203 -0.9375,0 -1.7343,-0.1875 -0.7969,-0.1875 -1.5704,-0.5859 -0.75,-0.3984 -1.5,-1.0078 -0.75,-0.6094 -1.5937,-1.4297 v 10.5469 q 0,0.1875 -0.094,0.3281 -0.094,0.1406 -0.3047,0.2344 -0.2109,0.094 -0.5859,0.1406 -0.375,0.047 -0.961,0.047 -0.5625,0 -0.9375,-0.047 -0.375,-0.047 -0.6093,-0.1406 -0.211,-0.094 -0.3047,-0.2344 -0.07,-0.1406 -0.07,-0.3281 v -29.461 q 0,-0.2109 0.07,-0.3281 0.07,-0.1406 0.2812,-0.2344 0.211,-0.094 0.5391,-0.1172 0.3281,-0.047 0.7969,-0.047 0.4922,0 0.7968,0.047 0.3282,0.023 0.5391,0.1172 0.2109,0.094 0.2812,0.2344 0.094,0.1172 0.094,0.3281 v 2.836 q 0.961,-0.9844 1.8516,-1.711 0.8906,-0.7265 1.7813,-1.1953 0.914,-0.4922 1.8515,-0.7265 0.961,-0.2578 2.0156,-0.2578 2.2969,0 3.9141,0.8906 1.6172,0.8906 2.625,2.4375 1.0313,1.5469 1.5,3.6094 0.4688,2.039 0.4688,4.3359 z m -4.0782,0.4453 q 0,-1.6172 -0.2578,-3.1172 -0.2344,-1.5234 -0.8437,-2.6953 -0.586,-1.1719 -1.5938,-1.875 -1.0078,-0.7031 -2.5078,-0.7031 -0.75,0 -1.4766,0.2343 -0.7265,0.211 -1.4765,0.7032 -0.75,0.4687 -1.5703,1.2656 -0.8203,0.7734 -1.7344,1.9219 v 8.3906 q 1.5937,1.9453 3.0234,2.9766 1.4297,1.0312 3,1.0312 1.4532,0 2.4844,-0.7031 1.0547,-0.7031 1.6875,-1.875 0.6563,-1.1719 0.9609,-2.625 0.3047,-1.4531 0.3047,-2.9297 z m 23.2187,-9.2813 q 0,0.5157 -0.023,0.8672 -0.023,0.3516 -0.094,0.5625 -0.07,0.1875 -0.1875,0.3047 -0.094,0.094 -0.2812,0.094 -0.1875,0 -0.4687,-0.094 -0.2578,-0.1172 -0.6094,-0.2109 -0.3281,-0.1172 -0.75,-0.211 -0.4219,-0.094 -0.9141,-0.094 -0.5859,0 -1.1484,0.2343 -0.5625,0.2344 -1.1953,0.7735 -0.6094,0.539 -1.2891,1.4297 -0.6797,0.8906 -1.5,2.1796 v 13.875 q 0,0.1875 -0.094,0.3282 -0.094,0.1172 -0.3047,0.2109 -0.2109,0.094 -0.5859,0.1406 -0.375,0.047 -0.9609,0.047 -0.5625,0 -0.9375,-0.047 -0.375,-0.047 -0.6094,-0.1406 -0.2109,-0.094 -0.3047,-0.2109 -0.07,-0.1407 -0.07,-0.3282 v -21.0937 q 0,-0.1875 0.07,-0.3047 0.07,-0.1406 0.2813,-0.2344 0.2109,-0.1172 0.539,-0.1406 0.3281,-0.047 0.8672,-0.047 0.5156,0 0.8438,0.047 0.3515,0.023 0.539,0.1406 0.1875,0.094 0.2578,0.2344 0.094,0.1172 0.094,0.3047 v 3.0703 q 0.8672,-1.2656 1.6172,-2.0625 0.7735,-0.7969 1.4531,-1.2422 0.6797,-0.4687 1.336,-0.6328 0.6797,-0.1875 1.3594,-0.1875 0.3046,0 0.6796,0.047 0.3985,0.023 0.8204,0.1172 0.4218,0.094 0.7499,0.2109 0.3516,0.1172 0.4922,0.2344 0.1406,0.1172 0.1875,0.2344 0.047,0.094 0.07,0.2578 0.047,0.1641 0.047,0.4922 0.023,0.3047 0.023,0.8437 z m 22.7735,8.25 q 0,0.9141 -0.4688,1.3125 -0.4453,0.375 -1.0312,0.375 h -13.8281 q 0,1.7579 0.3515,3.1641 0.3516,1.4063 1.1719,2.4141 0.8203,1.0078 2.1328,1.5468 1.3125,0.5391 3.2109,0.5391 1.5,0 2.6719,-0.2344 1.1719,-0.2578 2.0156,-0.5625 0.8672,-0.3047 1.4063,-0.539 0.5625,-0.2578 0.8437,-0.2578 0.1641,0 0.2813,0.094 0.1406,0.07 0.2109,0.2343 0.07,0.1641 0.094,0.4688 0.047,0.2812 0.047,0.7031 0,0.3047 -0.023,0.5391 -0.023,0.2109 -0.07,0.3984 -0.023,0.1641 -0.1172,0.3047 -0.07,0.1406 -0.2109,0.2812 -0.1172,0.1172 -0.75,0.4219 -0.6328,0.2813 -1.6406,0.5625 -1.0078,0.2813 -2.3438,0.4922 -1.3125,0.2344 -2.8125,0.2344 -2.6015,0 -4.5703,-0.7266 -1.9453,-0.7265 -3.2812,-2.1562 -1.336,-1.4297 -2.0157,-3.586 -0.6797,-2.1562 -0.6797,-5.0156 0,-2.7187 0.7032,-4.875 0.7031,-2.1797 2.0156,-3.6797 1.3359,-1.5234 3.2109,-2.3203 1.875,-0.8203 4.1953,-0.8203 2.4844,0 4.2188,0.7969 1.7578,0.7969 2.8828,2.1562 1.125,1.336 1.6406,3.1641 0.5391,1.8047 0.5391,3.8672 z m -3.8906,-1.1484 q 0.07,-3.0469 -1.3594,-4.7812 -1.4063,-1.7344 -4.1953,-1.7344 -1.4297,0 -2.5078,0.539 -1.0782,0.5391 -1.8047,1.4297 -0.7266,0.8907 -1.125,2.086 -0.3985,1.1718 -0.4453,2.4609 z m 24.0156,6.8672 q 0,1.6172 -0.6094,2.8828 -0.5859,1.2656 -1.6875,2.1328 -1.1015,0.8672 -2.625,1.3125 -1.5234,0.4453 -3.3515,0.4453 -1.125,0 -2.1563,-0.1875 -1.0078,-0.164 -1.8281,-0.4218 -0.7969,-0.2813 -1.3594,-0.5625 -0.5625,-0.3047 -0.8203,-0.5391 -0.2578,-0.2344 -0.375,-0.6563 -0.1172,-0.4218 -0.1172,-1.1484 0,-0.4453 0.047,-0.75 0.047,-0.3047 0.1172,-0.4922 0.07,-0.1875 0.1875,-0.2578 0.1406,-0.094 0.3047,-0.094 0.2578,0 0.75,0.3281 0.5156,0.3047 1.2422,0.6797 0.75,0.375 1.7578,0.7032 1.0078,0.3046 2.3203,0.3046 0.9844,0 1.7812,-0.2109 0.7969,-0.2109 1.3829,-0.6094 0.5859,-0.4218 0.8906,-1.0547 0.3281,-0.6328 0.3281,-1.5 0,-0.8906 -0.4687,-1.5 -0.4454,-0.6093 -1.1954,-1.0781 -0.75,-0.4687 -1.6875,-0.8203 -0.9375,-0.375 -1.9453,-0.7734 -0.9843,-0.3985 -1.9453,-0.8907 -0.9375,-0.5156 -1.6875,-1.2421 -0.75,-0.7266 -1.2187,-1.7344 -0.4453,-1.0078 -0.4453,-2.4141 0,-1.2422 0.4687,-2.3672 0.4922,-1.1484 1.4531,-1.9922 0.961,-0.8671 2.3907,-1.3828 1.4531,-0.5156 3.375,-0.5156 0.8437,0 1.6875,0.1406 0.8437,0.1407 1.5234,0.3516 0.6797,0.2109 1.1484,0.4687 0.4922,0.2344 0.7266,0.4219 0.2578,0.1875 0.3281,0.3281 0.094,0.1407 0.1172,0.3282 0.047,0.164 0.07,0.4218 0.047,0.2579 0.047,0.6329 0,0.3984 -0.047,0.7031 -0.023,0.2812 -0.1172,0.4687 -0.07,0.1875 -0.1875,0.2813 -0.1172,0.07 -0.2578,0.07 -0.2109,0 -0.6094,-0.2579 -0.3984,-0.2578 -1.0312,-0.539 -0.6328,-0.3047 -1.5,-0.5625 -0.8438,-0.2578 -1.9453,-0.2578 -0.9844,0 -1.7344,0.2343 -0.75,0.211 -1.2422,0.6329 -0.4687,0.3984 -0.7266,0.9609 -0.2343,0.5625 -0.2343,1.2187 0,0.9141 0.4687,1.5469 0.4688,0.6094 1.2188,1.0781 0.75,0.4688 1.7109,0.8438 0.9609,0.375 1.9453,0.7734 1.0078,0.3985 1.9688,0.8907 0.9843,0.4921 1.7343,1.1953 0.75,0.7031 1.1954,1.6875 0.4687,0.9843 0.4687,2.3437 z m 24.5312,-5.7188 q 0,0.9141 -0.4687,1.3125 -0.4453,0.375 -1.0313,0.375 h -13.8281 q 0,1.7579 0.3516,3.1641 0.3515,1.4063 1.1719,2.4141 0.8203,1.0078 2.1328,1.5468 1.3125,0.5391 3.2109,0.5391 1.5,0 2.6719,-0.2344 1.1719,-0.2578 2.0156,-0.5625 0.8672,-0.3047 1.4063,-0.539 0.5625,-0.2578 0.8437,-0.2578 0.1641,0 0.2813,0.094 0.1406,0.07 0.2109,0.2343 0.07,0.1641 0.094,0.4688 0.047,0.2812 0.047,0.7031 0,0.3047 -0.023,0.5391 -0.023,0.2109 -0.07,0.3984 -0.023,0.1641 -0.1172,0.3047 -0.07,0.1406 -0.211,0.2812 -0.1171,0.1172 -0.75,0.4219 -0.6328,0.2813 -1.6406,0.5625 -1.0078,0.2813 -2.3437,0.4922 -1.3125,0.2344 -2.8125,0.2344 -2.6016,0 -4.5703,-0.7266 -1.9454,-0.7265 -3.2813,-2.1562 -1.3359,-1.4297 -2.0156,-3.586 -0.6797,-2.1562 -0.6797,-5.0156 0,-2.7187 0.7031,-4.875 0.7031,-2.1797 2.0156,-3.6797 1.336,-1.5234 3.211,-2.3203 1.875,-0.8203 4.1953,-0.8203 2.4844,0 4.2187,0.7969 1.7579,0.7969 2.8829,2.1562 1.125,1.336 1.6406,3.1641 0.539,1.8047 0.539,3.8672 z m -3.8906,-1.1484 q 0.07,-3.0469 -1.3594,-4.7812 -1.4062,-1.7344 -4.1953,-1.7344 -1.4297,0 -2.5078,0.539 -1.0781,0.5391 -1.8047,1.4297 -0.7265,0.8907 -1.125,2.086 -0.3984,1.1718 -0.4453,2.4609 z m 28.9375,12.6094 q 0,0.1875 -0.094,0.3281 -0.094,0.1172 -0.3047,0.2109 -0.2109,0.094 -0.5859,0.1407 -0.375,0.047 -0.9375,0.047 -0.586,0 -0.961,-0.047 -0.375,-0.047 -0.5859,-0.1407 -0.2109,-0.094 -0.3047,-0.2109 -0.094,-0.1406 -0.094,-0.3281 v -12.3516 q 0,-1.8047 -0.2812,-2.9062 -0.2813,-1.1016 -0.8203,-1.8985 -0.5391,-0.7968 -1.4063,-1.2187 -0.8437,-0.4219 -1.9687,-0.4219 -1.4532,0 -2.9063,1.0313 -1.4531,1.0312 -3.0469,3.0234 v 14.7422 q 0,0.1875 -0.094,0.3281 -0.094,0.1172 -0.3047,0.211 -0.2109,0.094 -0.5859,0.1406 -0.375,0.047 -0.9609,0.047 -0.5625,0 -0.9375,-0.047 -0.375,-0.047 -0.6094,-0.1406 -0.2109,-0.094 -0.3047,-0.211 -0.07,-0.1406 -0.07,-0.3281 v -21.0938 q 0,-0.1875 0.07,-0.3047 0.07,-0.1406 0.2813,-0.2343 0.2109,-0.1172 0.539,-0.1407 0.3281,-0.047 0.8672,-0.047 0.5156,0 0.8438,0.047 0.3515,0.023 0.539,0.1407 0.1875,0.094 0.2578,0.2343 0.094,0.1172 0.094,0.3047 v 2.7891 q 1.7813,-1.9922 3.5391,-2.9063 1.7812,-0.9375 3.5859,-0.9375 2.1094,0 3.5391,0.7266 1.4531,0.7031 2.3437,1.8984 0.8907,1.1954 1.2657,2.8125 0.3984,1.5938 0.3984,3.8438 z m 18.5781,-1.5469 q 0,0.6797 -0.094,1.0781 -0.094,0.3985 -0.2812,0.586 -0.1875,0.1875 -0.5625,0.3515 -0.375,0.1641 -0.8672,0.2578 -0.4687,0.1172 -1.0078,0.1875 -0.5391,0.07 -1.0781,0.07 -1.6407,0 -2.8125,-0.4218 -1.1719,-0.4453 -1.9219,-1.3125 -0.75,-0.8907 -1.1016,-2.2266 -0.3281,-1.3594 -0.3281,-3.1875 v -12.3281 h -2.9531 q -0.3516,0 -0.5625,-0.375 -0.211,-0.375 -0.211,-1.2188 0,-0.4453 0.047,-0.75 0.07,-0.3047 0.1641,-0.4922 0.094,-0.2109 0.2344,-0.2812 0.164,-0.094 0.3515,-0.094 h 2.9297 v -5.0156 q 0,-0.1641 0.07,-0.3047 0.094,-0.1406 0.3047,-0.2344 0.2344,-0.1172 0.6094,-0.1641 0.375,-0.047 0.9375,-0.047 0.5859,0 0.9609,0.047 0.375,0.047 0.586,0.1641 0.2109,0.094 0.3046,0.2344 0.094,0.1406 0.094,0.3047 v 5.0156 h 5.4141 q 0.1875,0 0.3281,0.094 0.1407,0.07 0.2344,0.2812 0.1172,0.1875 0.1641,0.4922 0.047,0.3047 0.047,0.75 0,0.8438 -0.211,1.2188 -0.2109,0.375 -0.5625,0.375 h -5.414 v 11.7659 q 0,2.1797 0.6328,3.3047 0.6562,1.1016 2.3203,1.1016 0.5391,0 0.9609,-0.094 0.4219,-0.1172 0.75,-0.2344 0.3282,-0.1172 0.5625,-0.211 0.2344,-0.1171 0.4219,-0.1171 0.1172,0 0.211,0.07 0.1171,0.047 0.164,0.2109 0.07,0.1641 0.1172,0.4453 0.047,0.2813 0.047,0.7031 z m 21.086,-28.7812 q 0,0.7265 -0.07,1.3359 -0.07,0.5859 -0.2344,1.125 -0.1406,0.5391 -0.4219,1.0781 -0.2578,0.5156 -0.6328,1.0781 l -3.1875,4.8047 q -0.094,0.1875 -0.2578,0.3282 -0.1406,0.1172 -0.3516,0.2109 -0.2109,0.07 -0.4922,0.1172 -0.2812,0.047 -0.7031,0.047 -0.375,0 -0.6328,-0.023 -0.2344,-0.047 -0.375,-0.1406 -0.1172,-0.094 -0.1172,-0.2344 0,-0.1406 0.07,-0.3516 l 3.0938,-6.3984 v -2.9766 q 0,-0.6093 0.1172,-0.9843 0.1172,-0.375 0.375,-0.5625 0.2812,-0.211 0.6797,-0.2813 0.4218,-0.07 1.0078,-0.07 0.539,0 0.9375,0.07 0.4218,0.07 0.6797,0.2813 0.2578,0.1875 0.375,0.5625 0.1406,0.375 0.1406,0.9843 z m -8.3906,0 q 0,0.7265 -0.07,1.3359 -0.07,0.5859 -0.2344,1.125 -0.1406,0.5391 -0.4219,1.0781 -0.2578,0.5156 -0.6328,1.0781 l -3.1875,4.8047 q -0.094,0.1875 -0.2578,0.3282 -0.1406,0.1172 -0.3516,0.2109 -0.2109,0.07 -0.4922,0.1172 -0.2812,0.047 -0.7031,0.047 -0.375,0 -0.6328,-0.023 -0.2578,-0.047 -0.375,-0.1406 -0.1172,-0.094 -0.1406,-0.2344 0,-0.1406 0.094,-0.3516 l 3.0937,-6.3984 v -2.9766 q 0,-0.6093 0.1172,-0.9843 0.1172,-0.375 0.375,-0.5625 0.2813,-0.211 0.6797,-0.2813 0.4219,-0.07 1.0078,-0.07 0.5625,0 0.9609,0.07 0.3985,0.07 0.6563,0.2813 0.2578,0.1875 0.375,0.5625 0.1406,0.375 0.1406,0.9843 z m 44.1796,27.1171 q 0,0.3985 -0.023,0.7032 -0.023,0.2812 -0.094,0.4922 -0.047,0.1875 -0.1406,0.3515 -0.07,0.1406 -0.375,0.4453 -0.2812,0.2813 -0.9844,0.7266 -0.7031,0.4219 -1.5937,0.7734 -0.8672,0.3282 -1.8985,0.5391 -1.0312,0.2109 -2.1328,0.2109 -2.2734,0 -4.0312,-0.75 -1.7578,-0.75 -2.9531,-2.1797 -1.1719,-1.4531 -1.8047,-3.539 -0.6094,-2.1094 -0.6094,-4.8516 0,-3.1172 0.75,-5.3437 0.7734,-2.25 2.0859,-3.6797 1.336,-1.4297 3.1172,-2.1094 1.8047,-0.7031 3.8906,-0.7031 1.0079,0 1.9454,0.1875 0.9609,0.1875 1.7578,0.4922 0.7968,0.3047 1.4062,0.7031 0.6328,0.3984 0.9141,0.6797 0.2812,0.2812 0.375,0.4453 0.1172,0.1641 0.1875,0.3984 0.07,0.211 0.094,0.4922 0.023,0.2813 0.023,0.7031 0,0.9141 -0.2109,1.2891 -0.211,0.3516 -0.5157,0.3516 -0.3515,0 -0.8203,-0.375 -0.4453,-0.3985 -1.1484,-0.8672 -0.7031,-0.4688 -1.711,-0.8438 -0.9843,-0.3984 -2.3437,-0.3984 -2.7891,0 -4.2891,2.1562 -1.4765,2.1329 -1.4765,6.211 0,2.039 0.375,3.5859 0.3984,1.5235 1.1484,2.5547 0.75,1.0313 1.8281,1.5469 1.1016,0.4922 2.5078,0.4922 1.336,0 2.3438,-0.4219 1.0078,-0.4219 1.7344,-0.9141 0.75,-0.5156 1.2422,-0.914 0.5156,-0.4219 0.7968,-0.4219 0.1641,0 0.2813,0.094 0.1172,0.094 0.1875,0.3281 0.094,0.211 0.1172,0.5625 0.047,0.3281 0.047,0.7969 z m 25.3516,-7.5703 q 0,2.5782 -0.6797,4.7578 -0.6797,2.1563 -2.039,3.7266 -1.336,1.5703 -3.375,2.4609 -2.0157,0.8672 -4.6875,0.8672 -2.6016,0 -4.5469,-0.7734 -1.9219,-0.7734 -3.211,-2.25 -1.289,-1.4766 -1.9218,-3.5859 -0.6328,-2.1094 -0.6328,-4.7813 0,-2.5781 0.6562,-4.7344 0.6797,-2.1797 2.0156,-3.75 1.3594,-1.5703 3.375,-2.4375 2.0157,-0.8672 4.711,-0.8672 2.6015,0 4.5234,0.7735 1.9453,0.7734 3.2344,2.25 1.289,1.4765 1.9219,3.5859 0.6562,2.1094 0.6562,4.7578 z m -4.0781,0.2578 q 0,-1.7109 -0.3281,-3.2343 -0.3047,-1.5235 -1.0313,-2.6719 -0.7266,-1.1484 -1.9687,-1.8047 -1.2422,-0.6797 -3.0938,-0.6797 -1.7109,0 -2.9531,0.6094 -1.2188,0.6094 -2.0156,1.7344 -0.7969,1.1015 -1.1954,2.625 -0.375,1.5234 -0.375,3.3281 0,1.7344 0.3047,3.2578 0.3282,1.5234 1.0547,2.6719 0.75,1.125 1.9922,1.8047 1.2422,0.6562 3.0938,0.6562 1.6875,0 2.9296,-0.6094 1.2422,-0.6093 2.0391,-1.7109 0.7969,-1.1016 1.1719,-2.625 0.375,-1.5234 0.375,-3.3516 z m 28.9375,10.5235 q 0,0.1875 -0.094,0.3281 -0.094,0.1172 -0.3047,0.211 -0.2109,0.094 -0.5859,0.1406 -0.375,0.047 -0.9375,0.047 -0.586,0 -0.961,-0.047 -0.375,-0.047 -0.5859,-0.1406 -0.211,-0.094 -0.3047,-0.211 -0.094,-0.1406 -0.094,-0.3281 v -12.3516 q 0,-1.8047 -0.2813,-2.9062 -0.2812,-1.1016 -0.8203,-1.8985 -0.539,-0.7968 -1.4062,-1.2187 -0.8438,-0.4219 -1.9688,-0.4219 -1.4531,0 -2.9062,1.0313 -1.4532,1.0312 -3.0469,3.0234 v 14.7422 q 0,0.1875 -0.094,0.3281 -0.094,0.1172 -0.3047,0.211 -0.2109,0.094 -0.5859,0.1406 -0.375,0.047 -0.961,0.047 -0.5625,0 -0.9375,-0.047 -0.375,-0.047 -0.6093,-0.1406 -0.211,-0.094 -0.3047,-0.211 -0.07,-0.1406 -0.07,-0.3281 v -21.0938 q 0,-0.1875 0.07,-0.3046 0.07,-0.1407 0.2812,-0.2344 0.211,-0.1172 0.5391,-0.1406 0.3281,-0.047 0.8672,-0.047 0.5156,0 0.8437,0.047 0.3516,0.023 0.5391,0.1406 0.1875,0.094 0.2578,0.2344 0.094,0.1171 0.094,0.3046 v 2.7891 q 1.7812,-1.9922 3.5391,-2.9062 1.7812,-0.9375 3.5859,-0.9375 2.1094,0 3.5391,0.7265 1.4531,0.7031 2.3437,1.8985 0.8906,1.1953 1.2656,2.8125 0.3985,1.5937 0.3985,3.8437 z m 18.5781,-1.5469 q 0,0.6797 -0.094,1.0781 -0.094,0.3985 -0.2812,0.586 -0.1875,0.1875 -0.5625,0.3515 -0.375,0.1641 -0.8672,0.2578 -0.4688,0.1172 -1.0078,0.1875 -0.5391,0.07 -1.0782,0.07 -1.6406,0 -2.8125,-0.4219 -1.1718,-0.4453 -1.9218,-1.3125 -0.75,-0.8906 -1.1016,-2.2266 -0.3281,-1.3594 -0.3281,-3.1875 v -12.3281 h -2.9532 q -0.3515,0 -0.5625,-0.375 -0.2109,-0.375 -0.2109,-1.2188 0,-0.4453 0.047,-0.75 0.07,-0.3047 0.1641,-0.4922 0.094,-0.2109 0.2343,-0.2812 0.1641,-0.094 0.3516,-0.094 h 2.9297 v -5.0156 q 0,-0.1641 0.07,-0.3047 0.094,-0.1406 0.3047,-0.2344 0.2344,-0.1172 0.6094,-0.1641 0.375,-0.047 0.9375,-0.047 0.5859,0 0.9609,0.047 0.375,0.047 0.5859,0.1641 0.211,0.094 0.3047,0.2344 0.094,0.1406 0.094,0.3047 v 5.0156 h 5.4141 q 0.1875,0 0.3281,0.094 0.1406,0.07 0.2344,0.2812 0.1172,0.1875 0.164,0.4922 0.047,0.3047 0.047,0.75 0,0.8438 -0.2109,1.2188 -0.2109,0.375 -0.5625,0.375 h -5.4141 v 11.766 q 0,2.1797 0.6329,3.3047 0.6562,1.1016 2.3203,1.1016 0.539,0 0.9609,-0.094 0.4219,-0.1172 0.75,-0.2344 0.3281,-0.1172 0.5625,-0.211 0.2344,-0.1171 0.4219,-0.1171 0.1172,0 0.2109,0.07 0.1172,0.047 0.1641,0.2109 0.07,0.1641 0.1172,0.4453 0.047,0.2813 0.047,0.7031 z m 23.5938,-9.914 q 0,0.914 -0.4688,1.3125 -0.4453,0.375 -1.0312,0.375 h -13.8282 q 0,1.7578 0.3516,3.164 0.3516,1.4063 1.1719,2.4141 0.8203,1.0078 2.1328,1.5468 1.3125,0.5391 3.2109,0.5391 1.5,0 2.6719,-0.2344 1.1719,-0.2578 2.0156,-0.5625 0.8672,-0.3047 1.4063,-0.539 0.5625,-0.2578 0.8437,-0.2578 0.1641,0 0.2813,0.094 0.1406,0.07 0.2109,0.2343 0.07,0.1641 0.094,0.4688 0.047,0.2812 0.047,0.7031 0,0.3047 -0.023,0.5391 -0.023,0.2109 -0.07,0.3984 -0.023,0.1641 -0.1172,0.3047 -0.07,0.1406 -0.2109,0.2813 -0.1172,0.1171 -0.75,0.4218 -0.6328,0.2813 -1.6406,0.5625 -1.0079,0.2813 -2.3438,0.4922 -1.3125,0.2344 -2.8125,0.2344 -2.6016,0 -4.5703,-0.7266 -1.9453,-0.7265 -3.2813,-2.1562 -1.3359,-1.4297 -2.0156,-3.586 -0.6797,-2.1562 -0.6797,-5.0156 0,-2.7187 0.7032,-4.875 0.7031,-2.1797 2.0156,-3.6797 1.3359,-1.5234 3.2109,-2.3203 1.875,-0.8203 4.1953,-0.8203 2.4844,0 4.2188,0.7969 1.7578,0.7969 2.8828,2.1562 1.125,1.336 1.6406,3.1641 0.5391,1.8047 0.5391,3.8672 z m -3.8907,-1.1485 q 0.07,-3.0469 -1.3593,-4.7812 -1.4063,-1.7344 -4.1954,-1.7344 -1.4296,0 -2.5078,0.539 -1.0781,0.5391 -1.8047,1.4297 -0.7265,0.8907 -1.125,2.086 -0.3984,1.1718 -0.4453,2.4609 z m 26.0313,12.1641 q 0.1875,0.3281 0.1875,0.5625 0,0.2109 -0.2344,0.3515 -0.2109,0.1407 -0.6797,0.1875 -0.4453,0.07 -1.1719,0.07 -0.7031,0 -1.125,-0.047 -0.3984,-0.023 -0.6562,-0.094 -0.2344,-0.094 -0.375,-0.2109 -0.1172,-0.1406 -0.2109,-0.3047 l -5.0625,-8.3672 -5.0391,8.3672 q -0.094,0.1641 -0.2344,0.3047 -0.1172,0.1172 -0.375,0.2109 -0.2344,0.07 -0.6328,0.094 -0.3984,0.047 -1.0547,0.047 -0.6797,0 -1.125,-0.07 -0.4219,-0.047 -0.6328,-0.1875 -0.1875,-0.1406 -0.1875,-0.3515 0.023,-0.2344 0.2344,-0.5625 l 6.5625,-10.2891 -6.211,-9.914 q -0.1875,-0.3282 -0.2109,-0.5391 0,-0.2344 0.2109,-0.375 0.2344,-0.1641 0.6797,-0.2109 0.4688,-0.047 1.2188,-0.047 0.6797,0 1.0781,0.047 0.4219,0.023 0.6563,0.094 0.2343,0.07 0.3515,0.1875 0.1172,0.1171 0.211,0.2812 l 4.8046,7.8516 4.875,-7.8516 q 0.094,-0.1406 0.211,-0.2578 0.1172,-0.1172 0.3047,-0.1875 0.2109,-0.094 0.5625,-0.1172 0.375,-0.047 1.0078,-0.047 0.6797,0 1.1015,0.047 0.4454,0.047 0.6563,0.1875 0.2109,0.1172 0.1875,0.3516 -0.023,0.2343 -0.2344,0.5859 l -6.164,9.7969 z m 16.914,-1.1016 q 0,0.6797 -0.094,1.0781 -0.094,0.3985 -0.2812,0.586 -0.1875,0.1875 -0.5625,0.3515 -0.375,0.1641 -0.8672,0.2578 -0.4687,0.1172 -1.0078,0.1875 -0.5391,0.07 -1.0781,0.07 -1.6407,0 -2.8125,-0.4219 -1.1719,-0.4453 -1.9219,-1.3125 -0.75,-0.8906 -1.1016,-2.2266 -0.3281,-1.3594 -0.3281,-3.1875 v -12.3281 h -2.9531 q -0.3516,0 -0.5625,-0.375 -0.211,-0.375 -0.211,-1.2188 0,-0.4453 0.047,-0.75 0.07,-0.3047 0.1641,-0.4922 0.094,-0.2109 0.2344,-0.2812 0.164,-0.094 0.3515,-0.094 h 2.9297 v -5.0156 q 0,-0.1641 0.07,-0.3047 0.094,-0.1406 0.3047,-0.2344 0.2344,-0.1172 0.6094,-0.1641 0.375,-0.047 0.9375,-0.047 0.5859,0 0.9609,0.047 0.375,0.047 0.586,0.1641 0.2109,0.094 0.3046,0.2344 0.094,0.1406 0.094,0.3047 v 5.0156 h 5.4141 q 0.1875,0 0.3281,0.094 0.1407,0.07 0.2344,0.2812 0.1172,0.1875 0.1641,0.4922 0.047,0.3047 0.047,0.75 0,0.8438 -0.211,1.2188 -0.2109,0.375 -0.5625,0.375 h -5.414 v 11.766 q 0,2.1797 0.6328,3.3047 0.6562,1.1016 2.3203,1.1016 0.5391,0 0.9609,-0.094 0.4219,-0.1172 0.75,-0.2344 0.3282,-0.1172 0.5625,-0.211 0.2344,-0.1171 0.4219,-0.1171 0.1172,0 0.211,0.07 0.1171,0.047 0.164,0.2109 0.07,0.1641 0.1172,0.4453 0.047,0.2813 0.047,0.7031 z"
     id="text14-9"
     style="font-size:48px;line-height:1;font-family:Calibri;-inkscape-font-specification:Calibri;font-variant-ligatures:none;text-align:center;letter-spacing:1px;word-spacing:1px;text-orientation:upright;text-anchor:middle;fill:#fe90b5;fill-opacity:0.992157;stroke-width:3;stroke-linejoin:bevel;stroke-opacity:0.836773;paint-order:stroke fill markers"
     aria-label="“present” context" /></svg>
